{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {};\n    console.log(names);\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      let nowPrice = parseFloat(names[name].closing_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      data[name + \"_KRW\"] = {\n        korean: nowPrice\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      let nowPrice = parseFloat(names[name].closing_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: nowPrice\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  upbitUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(\"name\", names);\n\n    names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = parseFloat(name.trade_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  bithumbUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  //✅\n  mixExchangeUpdates: (one_names, two_names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(0);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        //console.log(\"BTC\", nowPrice, typeof (nowPrice));\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: 0.0,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: 0.0,\n          upbitUSDT: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: 0.0,\n          upbitBTC: name,\n          imgsrc: imgsrc\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: names[name].korean,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: names[name].korean,\n          bithumbBTC: name\n        };\n      }\n    });\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","axios","CoinMarketData","coinListDataUtils","marketNames","names","data","forEach","name","shortSym","market","split","moneySym","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","console","log","korean","korean_name","english","english_name","bithumbKRWNames","Object","keys","nowPrice","parseFloat","closing_price","toFixed","bithumbBTCNames","state","coinStateDatas","Coin","bithumbTotalNames","coinReadDataUtils","upbitUpdates","code","trade_price","upbitPrice","upbitUSDTPrice","upbitBTCPrice","bithumbUpdates","symbol","closePrice","bithumbPrice","bithumbBTCPrice","mixExchangeUpdates","one_names","two_names","upbitInitNames","imgsrc","find","coin","bithumbInitNames","bithumbSym","bithumbBTC"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst coinListDataUtils = {\n    marketNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        console.log(names);\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            let nowPrice = parseFloat(names[name].closing_price);\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n            data[name + \"_KRW\"] = {\n                korean: nowPrice,\n            };\n        })\n\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n\n        Object.keys(names).forEach(name => {\n            let nowPrice = parseFloat(names[name].closing_price);\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: nowPrice,\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    upbitUpdates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(\"name\", names);\n        names.forEach(name => {\n\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = parseFloat(name.trade_price);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    bithumbUpdates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        names.forEach(name => {\n\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            } else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    //✅\n    mixExchangeUpdates: (one_names, two_names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        //✅ bithumb\n        two_names.forEach(name => {\n\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        });\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(0);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                //console.log(\"BTC\", nowPrice, typeof (nowPrice));\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: 0.0,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: 0.0,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: 0.0,\n                    upbitBTC: name,\n                    imgsrc: imgsrc\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: names[name].korean,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: names[name].korean,\n                    bithumbBTC: name,\n                }\n            }\n        })\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}