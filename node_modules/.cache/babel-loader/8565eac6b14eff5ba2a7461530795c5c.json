{"ast":null,"code":"var _jsxFileName = \"/Users/sinhyeonsu/Documents/coingetprice2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport CoinContainer from \"./container/CoinContainer\";\nimport { startInit, getMarketNameSaga, startInitAsync } from './Reducer/coinReducer';\nimport \"./App.css\";\nimport { authService } from \"fbase\";\nimport AppRouter from \"./Router\";\nimport { doc, collection, addDoc, getFirestore, getDocs, updateDoc, setDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(startInit());\n  }, [dispatch]);\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(async () => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        const authCheck = async () => {\n          var logdBoolean = false;\n          const ipData = await fetch('https://geolocation-db.com/json/');\n          const locationIp = await ipData.json();\n          const ipv4 = locationIp.IPv4;\n          console.log(\"ipv4\", ipv4);\n          const db = await getFirestore();\n          const querySnapshot = await getDocs(collection(db, \"users\"));\n          let check = \"\";\n          let checkID = \"\";\n          querySnapshot.forEach(docc => {\n            if (docc.data().useremail === user.email) {\n              check = \"emailOK\";\n\n              if (docc.data().ipaddress === ipv4) {\n                check = \"ipOK\";\n              } else if (docc.data().ipaddress === 'init') {\n                check = \"NEW\";\n                checkID = docc.id;\n              } else {\n                check = \"FAIL\";\n              }\n            }\n\n            console.log(docc);\n          });\n          /*\n                    await setDoc(doc(db, \"users\", \"one\"), {\n                      useremail: user.email,\n                      ipaddress: ipv4\n                    });*/\n          //dbService.doc(users/id).delete();\n\n          if (check === 'ipOK') setIsLoggedIn(true);else if (check === 'NEW') {\n            /*await addDoc(collection(db, \"users\"), {\n              useremail: user.email,\n              ipaddress: ipv4,\n              id: checkID,\n            });*/\n            await setDoc(doc(db, \"users\", \"one\"), {\n              useremail: user.email,\n              ipaddress: ipv4\n            });\n          } else if (check === 'FAIL') setIsLoggedIn(false);\n        }; //setIsLoggedIn(true);\n\n\n        authCheck();\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setInit(true); //console.log(user);\n    });\n  }, []);\n  /*\n  <div className=\"coin-app\">\n      <CoinContainer />\n    </div>\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [init ? /*#__PURE__*/_jsxDEV(AppRouter, {\n      isLoggedIn: isLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }, this) : 'Initializing....', /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"\\xA9 Ncrypto \", new Date().getFullYear(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"/U3k1HS0pIEEQVaxvF2NP94eomg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/App.js"],"names":["React","useEffect","useState","useSelector","useDispatch","CoinContainer","startInit","getMarketNameSaga","startInitAsync","authService","AppRouter","doc","collection","addDoc","getFirestore","getDocs","updateDoc","setDoc","App","dispatch","init","setInit","isLoggedIn","setIsLoggedIn","onAuthStateChanged","user","authCheck","logdBoolean","ipData","fetch","locationIp","json","ipv4","IPv4","console","log","db","querySnapshot","check","checkID","forEach","docc","data","useremail","email","ipaddress","id","Date","getFullYear"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport CoinContainer from \"./container/CoinContainer\";\nimport { startInit, getMarketNameSaga, startInitAsync } from './Reducer/coinReducer';\nimport \"./App.css\";\nimport { authService } from \"fbase\";\nimport AppRouter from \"./Router\";\nimport { doc, collection, addDoc, getFirestore, getDocs, updateDoc, setDoc } from \"firebase/firestore\"\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startInit());\n\n  }, [dispatch]);\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(async () => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n\n        const authCheck = async () => {\n          var logdBoolean = false;\n          const ipData = await fetch('https://geolocation-db.com/json/');\n          const locationIp = await ipData.json();\n          const ipv4 = locationIp.IPv4;\n\n          console.log(\"ipv4\", ipv4);\n\n\n          const db = await getFirestore();\n          const querySnapshot = await getDocs(collection(db, \"users\"));\n          let check = \"\"; let checkID = \"\";\n          querySnapshot.forEach((docc) => {\n            if (docc.data().useremail === user.email) {\n              check = \"emailOK\";\n              if (docc.data().ipaddress === ipv4) {\n                check = \"ipOK\";\n              }\n              else if (docc.data().ipaddress === 'init') {\n                check = \"NEW\";\n                checkID = docc.id;\n\n\n              } else {\n                check = \"FAIL\";\n              }\n            }\n            console.log(docc);\n          });\n\n          /*\n                    await setDoc(doc(db, \"users\", \"one\"), {\n                      useremail: user.email,\n                      ipaddress: ipv4\n                    });*/\n\n          //dbService.doc(users/id).delete();\n          if (check === 'ipOK')\n            setIsLoggedIn(true);\n          else if (check === 'NEW') {\n            /*await addDoc(collection(db, \"users\"), {\n              useremail: user.email,\n              ipaddress: ipv4,\n              id: checkID,\n            });*/\n\n            await setDoc(doc(db, \"users\", \"one\"), {\n              useremail: user.email,\n              ipaddress: ipv4\n            });\n          } else if (check === 'FAIL')\n            setIsLoggedIn(false);\n\n        }\n\n\n\n\n        //setIsLoggedIn(true);\n\n        authCheck();\n\n\n\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n      //console.log(user);\n    });\n  }, [])\n\n  /*\n<div className=\"coin-app\">\n      <CoinContainer />\n    </div>\n  */\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} /> : 'Initializing....'}\n      <footer>&copy; Ncrypto {new Date().getFullYear()} </footer>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}