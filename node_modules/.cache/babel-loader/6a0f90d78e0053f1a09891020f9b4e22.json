{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      console.log(CoinMarketData[0]);\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n      let imgsrc = \"\";\n      console.log(\"1231\");\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  }\n};\nconst coinReadDataUtils = {\n  updates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(coinStateDatas);\n\n    names.forEach(name => {\n      //const newData = { ...coinStateDatas };\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.trade_price.toFixed(8);\n      } //console.log(\"1\", shortSym, \"2\", coinStateDatas[shortSym]);\n      //if (shortSym === coinStateDatas[shortSym]) {\n\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        }; //return coinStateDatas;\n      } //console.log(\"success\", name.code, name.trade_price, coinStateDatas);\n      //}\n\n    });\n    return coinStateDatas;\n  },\n  initNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      /*\n                  let geckoSymbol = jsonGeckoData.find((gecko) => {\n                      if (gecko.symbol === shortSym.toLowerCase()) {\n                          return gecko;\n                      }\n                  });\n      /*\n                  axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${Object.values(geckoSymbol)[0]}&per_page=100&page=1&sparkline=false`).then(\n                      res => {\n                          console.log(res.data);\n                      }\n                  ).catch(error => console.log(error));\n      */\n      //if (geckoSymbol) {\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: 0.0,\n          upbitSym: name //totalNameSym: Object.values(geckoSymbol)[0],\n\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: 0.0,\n          upbitUSDT: name //totalNameSym: Object.values(geckoSymbol)[0],\n\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: 0.0,\n          upbitBTC: name //totalNameSym: Object.values(geckoSymbol)[0],\n\n        };\n      } //}\n\n    });\n    return data;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","axios","CoinMarketData","coinListDataUtils","marketNames","names","data","forEach","name","console","log","shortSym","market","split","moneySym","imgsrc","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","korean","korean_name","english","english_name","coinReadDataUtils","updates","state","coinStateDatas","Coin","code","nowPrice","trade_price","toFixed","upbitPrice","upbitUSDTPrice","upbitBTCPrice","initNames"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst coinListDataUtils = {\n\n    marketNames: (names) => {\n        const data = {};\n\n\n        names.forEach(name => {\n            console.log(CoinMarketData[0]);\n\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n            let imgsrc = \"\";\n            console.log(\"1231\");\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    }\n};\n\nconst coinReadDataUtils = {\n    updates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(coinStateDatas);\n        names.forEach(name => {\n            //const newData = { ...coinStateDatas };\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (nowPrice < 1.0) {\n                nowPrice = name.trade_price.toFixed(8);\n            }\n\n            //console.log(\"1\", shortSym, \"2\", coinStateDatas[shortSym]);\n            //if (shortSym === coinStateDatas[shortSym]) {\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n                //return coinStateDatas;\n            }\n            //console.log(\"success\", name.code, name.trade_price, coinStateDatas);\n            //}\n        });\n        return coinStateDatas;\n    },\n    initNames: (names) => {\n        const data = {};\n\n        names.forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            /*\n                        let geckoSymbol = jsonGeckoData.find((gecko) => {\n                            if (gecko.symbol === shortSym.toLowerCase()) {\n                                return gecko;\n                            }\n                        });\n            /*\n                        axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${Object.values(geckoSymbol)[0]}&per_page=100&page=1&sparkline=false`).then(\n                            res => {\n                                console.log(res.data);\n                            }\n                        ).catch(error => console.log(error));\n            */\n\n            //if (geckoSymbol) {\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: 0.0,\n                    upbitSym: name,\n                    //totalNameSym: Object.values(geckoSymbol)[0],\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: 0.0,\n                    upbitUSDT: name,\n                    //totalNameSym: Object.values(geckoSymbol)[0],\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: 0.0,\n                    upbitBTC: name,\n                    //totalNameSym: Object.values(geckoSymbol)[0],\n                }\n            }\n            //}\n\n        });\n        return data;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}