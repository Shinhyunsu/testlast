{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\nimport { upbitmarket } from \"../Api/api\";\nimport { coinReadDataUtils } from \"./utils\";\nimport axios from \"axios\";\nimport { binancecoinApi } from \"../Api/api\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    var res;\n\n    if (type === \"GET_UPBIT_MARKET_PRICE_INIT\") {\n      const state = yield select();\n      var coinString;\n      Object.keys(state.Coin.upbitTotalNames.data).map(coin => {\n        coinString += coin + \",\";\n      }); //✅ coinString 내용을 복사 해서 api getMarketPriceCodes 에 붙여넣기 함.... ;;\n\n      coinString = coinString.slice(9, -1); //upbitmarket();\n\n      var aa = axios.get(`https://api.upbit.com/v1/ticker?markets=${coinString}`);\n      console.log(aa.data);\n      res = yield call(api, action.payload);\n    } else {\n      res = yield call(api, action.payload);\n    }\n\n    try {\n      const state = yield select();\n\n      if (type === \"GET_UPBIT_MARKET_NAMES\" || type === \"GET_UPBIT_MARKET_PRICE_INIT\" || type === \"GET_BINANCE_MARKET_NAMES\") {\n        yield put({\n          type: SUCCESS,\n          payload: dataMaker(res.data, state)\n        });\n      } else if (type === \"GET_BITHUMB_MARKET_KRW_NAMES\" || type === \"GET_BITHUMB_MARKET_BTC_NAMES\") {\n        yield put({\n          type: SUCCESS,\n          payload: dataMaker(res.data.data, state)\n        });\n      }\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n      throw e;\n    }\n  };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    try {\n      const state = yield select();\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(action.payload, state)\n      });\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n      throw e;\n    }\n  };\n};\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case SUCCESS:\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\n\nconst createUpbitSocket = () => {\n  const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n};\n\nconst createBithumbSocket = () => {\n  const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n}; // 소켓 연결용\n\n\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n  //console.log(\"action\", action);\n  return eventChannel(emit => {\n    socket.onopen = () => {\n      socket.send(JSON.stringify([{\n        ticket: \"coinbread-clone\"\n      }, {\n        type: connectType,\n        codes: action\n      }]));\n    };\n\n    socket.onmessage = evt => {\n      const enc = new encoding.TextDecoder(\"utf-8\");\n      const data = JSON.parse(enc.decode(evt.data));\n      emit(data);\n    };\n\n    socket.onerror = evt => {\n      console.log(\"error\", evt);\n      emit(evt);\n      emit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst bitconnectSocekt = (socket, connectType, type, action, buffer) => {\n  return eventChannel(eemit => {\n    socket.onopen = () => {\n      socket.send(JSON.stringify({\n        type: connectType,\n        symbols: action,\n        tickTypes: [\"MID\"]\n      }));\n    };\n\n    socket.onmessage = evt => {\n      //console.log(evt.data);\n      const data = JSON.parse(evt.data);\n\n      if (data && data['type'] === 'ticker') {\n        eemit(data['content']);\n      }\n    };\n\n    socket.onerror = evt => {\n      console.log(\"error\", evt);\n      eemit(evt);\n      eemit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const state = yield select();\n    const upbitTotalNames = Object.keys(state.Coin.upbitTotalNames.data);\n    const bithumbTotalNames = Object.keys(state.Coin.bithumbTotalNames.data);\n    var client;\n    var bitclient;\n    var clientChannel; //✅ new\n\n    var bitclientChannel;\n    client = yield call(createUpbitSocket);\n    bitclient = yield call(createBithumbSocket);\n    clientChannel = yield call(connectSocekt, client, connectType, type, upbitTotalNames, buffers.expanding(500)); //✅ new\n\n    bitclientChannel = yield call(bitconnectSocekt, bitclient, connectType, type, bithumbTotalNames, buffers.expanding(500));\n\n    try {\n      while (true) {\n        const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n\n        const bitdatas = yield flush(bitclientChannel);\n        var sortedDATA;\n        var sortedData;\n\n        if (datas.length) {\n          //console.log(datas);\n          var sortedObj = {};\n          datas.forEach(data => {\n            if (sortedObj[data.code]) {\n              // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n              sortedObj[data.code] = sortedObj[data.code].timestamp > data.timestamp ? sortedObj[data.code] : data;\n            } else {\n              sortedObj[data.code] = data;\n            }\n\n            sortedObj[data.code] = data;\n          });\n          sortedDATA = Object.keys(sortedObj).map(data => sortedObj[data]);\n\n          if (bitdatas.length) {\n            var sortedObj = {};\n            var binanceObj;\n            bitdatas.forEach(data => {\n              if (sortedObj[data.code]) {\n                // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                sortedObj[data.symbol] = sortedObj[data.symbol].time > data.time ? sortedObj[data.symbol] : data;\n              } else {\n                sortedObj[data.symbol] = data;\n              }\n\n              sortedObj[data.symbol] = data;\n            });\n            sortedData = Object.keys(sortedObj).map(data => sortedObj[data]);\n            binanceObj = yield call(binancecoinApi.getMarketCodes);\n            yield put({\n              type: SUCCESS,\n              payload: coinReadDataUtils.mixExchangeUpdates(sortedDATA, sortedData, binanceObj.data, state)\n            });\n          }\n        }\n\n        yield delay(500); // 500ms 동안 대기\n      }\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n    } finally {\n      clientChannel.close();\n    }\n  };\n};\n\nexport { createRequestSaga, requestActions, createConnectSocketSaga, createInitRequestSaga };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","w3cwebsocket","W3CWebSocket","buffers","eventChannel","END","encoding","upbitmarket","coinReadDataUtils","axios","binancecoinApi","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","res","state","coinString","Object","keys","Coin","upbitTotalNames","data","map","coin","slice","aa","get","console","log","payload","e","createInitRequestSaga","requestActions","key","reducerUtils","success","error","createUpbitSocket","client","binaryType","createBithumbSocket","connectSocekt","socket","connectType","buffer","emit","onopen","send","JSON","stringify","ticket","codes","onmessage","evt","enc","TextDecoder","parse","decode","onerror","unsubscribe","close","none","bitconnectSocekt","eemit","symbols","tickTypes","createConnectSocketSaga","bithumbTotalNames","bitclient","clientChannel","bitclientChannel","expanding","datas","bitdatas","sortedDATA","sortedData","length","sortedObj","forEach","code","timestamp","binanceObj","symbol","time","getMarketCodes","mixExchangeUpdates"],"mappings":"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","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nimport { upbitmarket } from \"../Api/api\";\n\nimport { coinReadDataUtils } from \"./utils\";\n\nimport axios from \"axios\";\nimport { binancecoinApi } from \"../Api/api\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n\n    return function* (action = {}) {\n        var res;\n\n        if (type === \"GET_UPBIT_MARKET_PRICE_INIT\") {\n\n            const state = yield select();\n            var coinString;\n            Object.keys(state.Coin.upbitTotalNames.data).map((coin) => {\n                coinString += coin + \",\"\n            });\n            //✅ coinString 내용을 복사 해서 api getMarketPriceCodes 에 붙여넣기 함.... ;;\n            coinString = coinString.slice(9, -1);\n\n\n            //upbitmarket();\n            var aa = axios.get(`https://api.upbit.com/v1/ticker?markets=${coinString}`);\n\n            console.log(aa.data);\n\n            res = yield call(api, action.payload);\n        }\n        else {\n            res = yield call(api, action.payload);\n        }\n        try {\n            const state = yield select();\n            if (type === \"GET_UPBIT_MARKET_NAMES\" || type === \"GET_UPBIT_MARKET_PRICE_INIT\" || type === \"GET_BINANCE_MARKET_NAMES\") {\n                yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            }\n            else if (type === \"GET_BITHUMB_MARKET_KRW_NAMES\" || type === \"GET_BITHUMB_MARKET_BTC_NAMES\") {\n                yield put({ type: SUCCESS, payload: dataMaker(res.data.data, state) });\n            }\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            throw e;\n        }\n    };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        try {\n            const state = yield select();\n            yield put({ type: SUCCESS, payload: dataMaker(action.payload, state) });\n\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            throw e;\n        }\n    };\n};\n\n\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n    return (state, action) => {\n        switch (action.type) {\n            case SUCCESS:\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\nconst createUpbitSocket = () => {\n    const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\nconst createBithumbSocket = () => {\n    const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\n\n\n// 소켓 연결용\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n    //console.log(\"action\", action);\n    return eventChannel((emit) => {\n        socket.onopen = () => {\n            socket.send(\n                JSON.stringify([\n                    { ticket: \"coinbread-clone\" },\n                    { type: connectType, codes: action },\n                ])\n            );\n        };\n        socket.onmessage = (evt) => {\n            const enc = new encoding.TextDecoder(\"utf-8\");\n            const data = JSON.parse(enc.decode(evt.data));\n            emit(data);\n        };\n\n        socket.onerror = (evt) => {\n            console.log(\"error\", evt);\n            emit(evt);\n            emit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst bitconnectSocekt = (socket, connectType, type, action, buffer) => {\n    return eventChannel((eemit) => {\n        socket.onopen = () => {\n            socket.send(\n                JSON.stringify(\n                    { type: connectType, symbols: action, tickTypes: [\"MID\"] }\n                )\n            );\n        };\n        socket.onmessage = (evt) => {\n            //console.log(evt.data);\n            const data = JSON.parse(evt.data)\n            if (data && data['type'] === 'ticker') {\n                eemit(data['content']);\n            }\n\n        };\n\n        socket.onerror = (evt) => {\n            console.log(\"error\", evt);\n            eemit(evt);\n            eemit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        const state = yield select();\n\n        const upbitTotalNames = Object.keys(state.Coin.upbitTotalNames.data);\n        const bithumbTotalNames = Object.keys(state.Coin.bithumbTotalNames.data);\n\n        var client;\n        var bitclient;\n        var clientChannel;\n        //✅ new\n        var bitclientChannel;\n\n        client = yield call(createUpbitSocket);\n\n        bitclient = yield call(createBithumbSocket);\n\n        clientChannel = yield call(\n            connectSocekt,\n            client,\n            connectType,\n            type,\n            upbitTotalNames,\n            buffers.expanding(500)\n        );\n\n        //✅ new\n        bitclientChannel = yield call(\n            bitconnectSocekt,\n            bitclient,\n            connectType,\n            type,\n            bithumbTotalNames,\n            buffers.expanding(500)\n        );\n\n        try {\n            while (true) {\n                const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n                const bitdatas = yield flush(bitclientChannel);\n\n                var sortedDATA;\n                var sortedData;\n\n                if (datas.length) {\n                    //console.log(datas);\n                    var sortedObj = {};\n                    datas.forEach((data) => {\n                        if (sortedObj[data.code]) {\n                            // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                            sortedObj[data.code] =\n                                sortedObj[data.code].timestamp > data.timestamp\n                                    ? sortedObj[data.code]\n                                    : data;\n                        } else {\n                            sortedObj[data.code] = data;\n                        }\n                        sortedObj[data.code] = data;\n                    });\n\n                    sortedDATA = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );\n\n                    if (bitdatas.length) {\n                        var sortedObj = {};\n                        var binanceObj;\n\n                        bitdatas.forEach((data) => {\n                            if (sortedObj[data.code]) {\n                                // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                                sortedObj[data.symbol] =\n                                    sortedObj[data.symbol].time > data.time\n                                        ? sortedObj[data.symbol]\n                                        : data;\n                            } else {\n                                sortedObj[data.symbol] = data;\n                            }\n                            sortedObj[data.symbol] = data;\n                        });\n                        sortedData = Object.keys(sortedObj).map(\n                            (data) => sortedObj[data]\n                        );\n                        binanceObj = yield call(binancecoinApi.getMarketCodes)\n\n                        yield put({ type: SUCCESS, payload: coinReadDataUtils.mixExchangeUpdates(sortedDATA, sortedData, binanceObj.data, state) });\n                    }\n                }\n                yield delay(500); // 500ms 동안 대기\n            }\n        } catch (e) {\n            console.log(e);\n            yield put({ type: ERROR, payload: e });\n        } finally {\n            clientChannel.close();\n        }\n    };\n};\nexport {\n    createRequestSaga,\n    requestActions,\n    createConnectSocketSaga,\n    createInitRequestSaga,\n}"]},"metadata":{},"sourceType":"module"}