{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\nconst GET_BITHUMB_MARKET_NAMES = \"GET_BITHUMB_MARKET_NAMES\";\nconst GET_BITHUMB_MARKET_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_NAMES_ERROR = \"GET_BITHUMB_MARKET_NAMES_ERROR\";\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\nconst CONNECT_BITHUMB_SOCKET = \"CONNECT_BITHUMB_SOCKET\";\nconst CONNECT_BITHUMB_SOCKET_SUCCESS = \"CONNECT_BITHUMB_SOCKET_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_ERROR = \"CONNECT_BITHUMB_SOCKET_ERROR\";\nconst CREATE_UPBIT_INIT = \"CONNECT_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CONNECT_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CONNECT_UPBIT_INIT_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(GET_UPBIT_MARKET_NAMES, upbitoinApi.getMarketCodes, coinListDataUtils.upbitAllNames);\nconst getBithumbAllMarketNameSaga = createRequestSaga(GET_BITHUMB_MARKET_NAMES, bithumbcoinApi.getKRWMarketCodes, coinListDataUtils.bithumbAllNames); //✅ 업비트 소켓 연결\n\nconst connectUpbitSocketSaga = createConnectSocketSaga(CONNECT_UPBIT_SOCKET, \"ticker\", coinReadDataUtils.updates); //✅ 빗썸 소켓 연결\n\nconst connectBithumbSocketSaga = createConnectSocketSaga(CONNECT_BITHUMB_SOCKET, \"ticker\", coinReadDataUtils.updates);\nconst createUpbitInitSocketSaga = createInitRequestSaga(CREATE_UPBIT_INIT, coinReadDataUtils.initNames);\n\nfunction* startInitSaga() {\n  //yield getUpbitAllMarketNameSaga();\n  yield getBithumbAllMarketNameSaga();\n  yield createUpbitInitSocketSaga();\n  /*\n      const state = yield select();\n      const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n  \n      yield connectBithumbSocketSaga({ payload: marketNames });\n  */\n  //yield connectUpbitSocketSaga({ payload: marketNames });\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  upbitTotalNames: {\n    data: {\n      \"KRW-BTC\": \"\"\n    }\n  },\n  bithumbTotalNames: {\n    data: {\n      \"BTC-KRW\": \"\"\n    }\n  },\n  marketNames: {\n    error: false,\n    data: {\n      \"BTC\": {\n        imgsrc: \"\",\n        upbitUSDT: \"\",\n        upbitBTC: \"\",\n        upbitSym: \"\",\n        bithumbSym: \"\",\n        binanSym: \"\",\n        upbitPrice: 0.0,\n        upbitBTCPrice: 0.0,\n        upbitUSDTPrice: 0.0,\n        bithumbPrice: 0.0,\n        binanPrice: 0.0\n      }\n    }\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_UPBIT_MARKET_NAMES_SUCCESS:\n    case GET_UPBIT_MARKET_NAMES_ERROR:\n      return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n    case GET_BITHUMB_MARKET_NAMES_SUCCESS:\n    case GET_BITHUMB_MARKET_NAMES_ERROR:\n      return requestActions(GET_BITHUMB_MARKET_NAMES, \"bithumbTotalNames\")(state, action);\n\n    case CONNECT_UPBIT_SOCKET_SUCCESS:\n    case CONNECT_UPBIT_SOCKET_ERROR:\n      return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n    case CREATE_UPBIT_INIT_SUCCESS:\n    case CREATE_UPBIT_INIT_ERROR:\n      return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n    case CONNECT_BITHUMB_SOCKET_SUCCESS:\n    case CONNECT_BITHUMB_SOCKET_ERROR:\n      return requestActions(CONNECT_BITHUMB_SOCKET, \"marketNames\")(state, action);\n\n    case START_INIT:\n      //console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, connectUpbitSocketSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","upbitoinApi","bithumbcoinApi","createConnectSocketSaga","createRequestSaga","requestActions","createInitRequestSaga","coinListDataUtils","coinReadDataUtils","START_INIT","START_INIT_ASYNC","GET_UPBIT_MARKET_NAMES","GET_UPBIT_MARKET_NAMES_SUCCESS","GET_UPBIT_MARKET_NAMES_ERROR","GET_BITHUMB_MARKET_NAMES","GET_BITHUMB_MARKET_NAMES_SUCCESS","GET_BITHUMB_MARKET_NAMES_ERROR","CONNECT_UPBIT_SOCKET","CONNECT_UPBIT_SOCKET_SUCCESS","CONNECT_UPBIT_SOCKET_ERROR","CONNECT_BITHUMB_SOCKET","CONNECT_BITHUMB_SOCKET_SUCCESS","CONNECT_BITHUMB_SOCKET_ERROR","CREATE_UPBIT_INIT","CREATE_UPBIT_INIT_SUCCESS","CREATE_UPBIT_INIT_ERROR","startInitAsync","type","startInit","getUpbitAllMarketNameSaga","getMarketCodes","upbitAllNames","getBithumbAllMarketNameSaga","getKRWMarketCodes","bithumbAllNames","connectUpbitSocketSaga","updates","connectBithumbSocketSaga","createUpbitInitSocketSaga","initNames","startInitSaga","coinSaga","initialState","upbitTotalNames","data","bithumbTotalNames","marketNames","error","imgsrc","upbitUSDT","upbitBTC","upbitSym","bithumbSym","binanSym","upbitPrice","upbitBTCPrice","upbitUSDTPrice","bithumbPrice","binanPrice","coinReducer","state","action"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\n\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\n\nconst GET_BITHUMB_MARKET_NAMES = \"GET_BITHUMB_MARKET_NAMES\";\nconst GET_BITHUMB_MARKET_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_NAMES_ERROR = \"GET_BITHUMB_MARKET_NAMES_ERROR\";\n\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\n\nconst CONNECT_BITHUMB_SOCKET = \"CONNECT_BITHUMB_SOCKET\";\nconst CONNECT_BITHUMB_SOCKET_SUCCESS = \"CONNECT_BITHUMB_SOCKET_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_ERROR = \"CONNECT_BITHUMB_SOCKET_ERROR\";\n\nconst CREATE_UPBIT_INIT = \"CONNECT_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CONNECT_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CONNECT_UPBIT_INIT_ERROR\";\n\n\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(\n    GET_UPBIT_MARKET_NAMES,\n    upbitoinApi.getMarketCodes,\n    coinListDataUtils.upbitAllNames\n);\nconst getBithumbAllMarketNameSaga = createRequestSaga(\n    GET_BITHUMB_MARKET_NAMES,\n    bithumbcoinApi.getKRWMarketCodes,\n    coinListDataUtils.bithumbAllNames\n);\n\n//✅ 업비트 소켓 연결\nconst connectUpbitSocketSaga = createConnectSocketSaga(\n    CONNECT_UPBIT_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.updates\n);\n//✅ 빗썸 소켓 연결\nconst connectBithumbSocketSaga = createConnectSocketSaga(\n    CONNECT_BITHUMB_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.updates\n);\nconst createUpbitInitSocketSaga = createInitRequestSaga(\n    CREATE_UPBIT_INIT,\n    coinReadDataUtils.initNames\n);\n\n\nfunction* startInitSaga() {\n    //yield getUpbitAllMarketNameSaga();\n    yield getBithumbAllMarketNameSaga();\n    yield createUpbitInitSocketSaga();\n\n    /*\n        const state = yield select();\n        const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n    \n        yield connectBithumbSocketSaga({ payload: marketNames });\n    */\n    //yield connectUpbitSocketSaga({ payload: marketNames });\n\n\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n    upbitTotalNames: {\n        data: {\n            \"KRW-BTC\": \"\"\n        },\n    },\n    bithumbTotalNames: {\n        data: {\n            \"BTC-KRW\": \"\"\n        },\n    },\n    marketNames: {\n        error: false,\n        data: {\n            \"BTC\": {\n                imgsrc: \"\",\n                upbitUSDT: \"\", upbitBTC: \"\", upbitSym: \"\", bithumbSym: \"\", binanSym: \"\", upbitPrice: 0.0, upbitBTCPrice: 0.0, upbitUSDTPrice: 0.0, bithumbPrice: 0.0, binanPrice: 0.0\n            },\n        },\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case GET_UPBIT_MARKET_NAMES_SUCCESS:\n        case GET_UPBIT_MARKET_NAMES_ERROR:\n            return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n        case GET_BITHUMB_MARKET_NAMES_SUCCESS:\n        case GET_BITHUMB_MARKET_NAMES_ERROR:\n            return requestActions(GET_BITHUMB_MARKET_NAMES, \"bithumbTotalNames\")(state, action);\n\n        case CONNECT_UPBIT_SOCKET_SUCCESS:\n        case CONNECT_UPBIT_SOCKET_ERROR:\n            return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n        case CREATE_UPBIT_INIT_SUCCESS:\n        case CREATE_UPBIT_INIT_ERROR:\n            return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n        case CONNECT_BITHUMB_SOCKET_SUCCESS:\n        case CONNECT_BITHUMB_SOCKET_ERROR:\n            return requestActions(CONNECT_BITHUMB_SOCKET, \"marketNames\")(state, action);\n\n        case START_INIT:\n            //console.log(12);\n            return state + 1;\n        default:\n            return state;\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    connectUpbitSocketSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}