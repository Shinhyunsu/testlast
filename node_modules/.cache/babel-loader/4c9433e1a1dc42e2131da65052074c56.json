{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(GET_UPBIT_MARKET_NAMES, coinApi.getMarketCodes, coinListDataUtils.upbitAllNames);\nconst connectUpbitSocketSaga = createConnectSocketSaga(CONNECT_UPBIT_SOCKET, \"ticker\", coinReadDataUtils.marketNames);\n\nfunction* startInitSaga() {\n  //yield getMarketNameSaga();\n  yield getUpbitAllMarketNameSaga();\n  const state = yield select();\n  const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n  yield connectUpbitSocketSaga({\n    payload: marketNames\n  }); //console.log(state.Coin.marketNames.data['ADA'].upbitSym);\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  upbitTotalNames: {\n    data: {\n      \"KRW-BTC\": \"\"\n    }\n  },\n  marketNames: {\n    error: false,\n    data: {\n      \"BTC\": {\n        upbitUSDT: \"\",\n        upbitBTC: \"\",\n        upbitSym: \"\",\n        bithumbSym: \"\",\n        binanSym: \"\",\n        upbitPrice: 0.0,\n        upbitBTCPrice: 0.0,\n        upbitUSDTPrice: 0.0,\n        bithumbPrice: 0.0,\n        binanPrice: 0.0\n      }\n    }\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  //console.log(state);\n  switch (action.type) {\n    case GET_UPBIT_MARKET_NAMES_SUCCESS:\n    case GET_UPBIT_MARKET_NAMES_ERROR:\n      return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n    case CONNECT_UPBIT_SOCKET_SUCCESS:\n    case CONNECT_UPBIT_SOCKET_ERROR:\n      return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n    case START_INIT:\n      //console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, connectUpbitSocketSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","coinApi","createConnectSocketSaga","createRequestSaga","requestActions","coinListDataUtils","coinReadDataUtils","START_INIT","START_INIT_ASYNC","GET_UPBIT_MARKET_NAMES","GET_UPBIT_MARKET_NAMES_SUCCESS","GET_UPBIT_MARKET_NAMES_ERROR","CONNECT_UPBIT_SOCKET","CONNECT_UPBIT_SOCKET_SUCCESS","CONNECT_UPBIT_SOCKET_ERROR","startInitAsync","type","startInit","getUpbitAllMarketNameSaga","getMarketCodes","upbitAllNames","connectUpbitSocketSaga","marketNames","startInitSaga","state","Object","keys","Coin","upbitTotalNames","data","payload","coinSaga","initialState","error","upbitUSDT","upbitBTC","upbitSym","bithumbSym","binanSym","upbitPrice","upbitBTCPrice","upbitUSDTPrice","bithumbPrice","binanPrice","coinReducer","action"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\n\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\n\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(\n    GET_UPBIT_MARKET_NAMES,\n    coinApi.getMarketCodes,\n    coinListDataUtils.upbitAllNames\n);\n\n\n\nconst connectUpbitSocketSaga = createConnectSocketSaga(\n    CONNECT_UPBIT_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.marketNames\n);\n\n\nfunction* startInitSaga() {\n    //yield getMarketNameSaga();\n    yield getUpbitAllMarketNameSaga();\n\n    const state = yield select();\n    const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n\n    yield connectUpbitSocketSaga({ payload: marketNames });\n\n    //console.log(state.Coin.marketNames.data['ADA'].upbitSym);\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n    upbitTotalNames: {\n        data: {\n            \"KRW-BTC\": \"\"\n        },\n    },\n    marketNames: {\n        error: false,\n        data: {\n            \"BTC\": {\n                upbitUSDT: \"\", upbitBTC: \"\", upbitSym: \"\", bithumbSym: \"\", binanSym: \"\", upbitPrice: 0.0, upbitBTCPrice: 0.0, upbitUSDTPrice: 0.0, bithumbPrice: 0.0, binanPrice: 0.0\n            },\n        },\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    //console.log(state);\n    switch (action.type) {\n\n        case GET_UPBIT_MARKET_NAMES_SUCCESS:\n        case GET_UPBIT_MARKET_NAMES_ERROR:\n            return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n        case CONNECT_UPBIT_SOCKET_SUCCESS:\n        case CONNECT_UPBIT_SOCKET_ERROR:\n            return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n        case START_INIT:\n            //console.log(12);\n            return state + 1;\n        default:\n            return state;\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    connectUpbitSocketSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}