{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {}; //console.log(names);\n\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  },\n  upbitPriceNames: (names, state) => {\n    const coinStateDatas = state.Coin.upbitTotalNames.data;\n    names.forEach(name => {\n      //console.log(\"name\", name);\n      let nowPrice = parseFloat(name.trade_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      coinStateDatas[name.market] = {\n        korean: nowPrice\n      };\n    });\n    return coinStateDatas;\n  },\n  binanceNames: names => {\n    const data = {};\n    names.forEach(name => {\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      }\n    }); //console.log(data);\n\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      let nowPrice = parseFloat(names[name].closing_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      data[name + \"_KRW\"] = {\n        korean: nowPrice\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      let nowPrice = parseFloat(names[name].closing_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: nowPrice\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  upbitUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(\"name\", names);\n\n    names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = parseFloat(name.trade_price);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  getUpbitAllMarketNameSagabithumbUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  //✅\n  mixExchangeUpdates: (one_names, two_names, three_names, gecko_data, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //✅ gecko\n\n    /* Object.keys(gecko_data).map(name => {\n         let shortSym = CoinMarketData.find((coinsym) => {\n             if (coinsym.totalName === name)\n                 return coinsym;\n         })\n           coinStateDatas[shortSym.symbol] = {\n             ...coinStateDatas[shortSym.symbol],\n             gecko: gecko_data[name].usd\n         }\n     });*/\n    //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        };\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice,\n          upbitPrice: \"\"\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice,\n          upbitPrice: \"\"\n        };\n      }\n\n      if (coinStateDatas['BTC'].upbitPrice) {\n        var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n        coinStateDatas['USDT'] = { ...coinStateDatas['USDT'],\n          upbitUSDT: 'USDTKRW',\n          upbitUSDTPrice: upbitusdtkrw\n        };\n      }\n    }); //✅ binance\n\n    three_names.forEach(name => {\n      let nowPrice = name.price;\n      if (typeof nowPrice === 'string') nowPrice = parseFloat(nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = nowPrice.toFixed(8);\n      } else {\n        nowPrice = nowPrice.toFixed(1);\n      }\n\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        var len = name.symbol.indexOf('BTC');\n        var coin = name.symbol.slice(0, len);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBTCSym: name.symbol,\n            binanBTCPrice: nowPrice //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n          };\n        }\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        var len = name.symbol.indexOf('USDT');\n        var coin = name.symbol.slice(0, len);\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n        if (Object.keys(coinStateDatas[coin]) === 'upbitPrice') {\n          console.log(\"ok\");\n        }\n\n        var readUpbirPrice = coinStateDatas[coin].upbitPrice;\n        if (readUpbirPrice !== undefined) var calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);else {\n          console.log(\"un\");\n          var calper = \"None\";\n        }\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanUSDTSym: name.symbol,\n            binanUSDTPrice: nowPrice,\n            calKoUSDT: cal,\n            //(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n            per: calper\n          };\n        }\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        var len = name.symbol.indexOf('BUSD');\n        var coin = name.symbol.slice(0, len);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBNBSym: name.symbol,\n            binanBNBPrice: nowPrice //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n          };\n        }\n      }\n\n      if (name.symbol === 'BTCBUSD') {\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanBNBSym: name.symbol,\n          binanBNBPrice: nowPrice\n        };\n      } else if (name.symbol === 'BTCUSDT') {\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanUSDTSym: name.symbol,\n          binanUSDTPrice: nowPrice,\n          calKoUSDT: cal,\n          per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: (names, state) => {\n    const data = {}; //console.log(\"names\", names);\n\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: names[name].korean,\n          upbitBTC: name,\n          imgsrc: imgsrc\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: names[name].korean,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: names[name].korean,\n          bithumbBTC: name\n        };\n      }\n    });\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","axios","CoinMarketData","coinListDataUtils","marketNames","names","data","forEach","name","shortSym","market","split","moneySym","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","korean","korean_name","english","english_name","upbitPriceNames","state","coinStateDatas","Coin","upbitTotalNames","nowPrice","parseFloat","trade_price","toFixed","binanceNames","symbol","lastIndexOf","price","bithumbKRWNames","Object","keys","closing_price","bithumbBTCNames","bithumbTotalNames","coinReadDataUtils","upbitUpdates","code","upbitPrice","upbitUSDTPrice","upbitBTCPrice","getUpbitAllMarketNameSagabithumbUpdates","closePrice","bithumbPrice","bithumbBTCPrice","mixExchangeUpdates","one_names","two_names","three_names","gecko_data","upbitusdtkrw","len","indexOf","coin","slice","binanBTCSym","binanBTCPrice","cal","console","log","readUpbirPrice","undefined","calper","binanUSDTSym","binanUSDTPrice","calKoUSDT","per","binanBNBSym","binanBNBPrice","upbitInitNames","imgsrc","find","bithumbInitNames","bithumbSym","bithumbBTC"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst coinListDataUtils = {\n    marketNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        //console.log(names);\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    },\n    upbitPriceNames: (names, state) => {\n        const coinStateDatas = state.Coin.upbitTotalNames.data;\n\n        names.forEach(name => {\n            //console.log(\"name\", name);\n            let nowPrice = parseFloat(name.trade_price);\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n            coinStateDatas[name.market] = {\n                korean: nowPrice,\n            };\n        })\n        return coinStateDatas;\n    },\n\n    binanceNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            }\n\n        })\n        //console.log(data);\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            let nowPrice = parseFloat(names[name].closing_price);\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n            data[name + \"_KRW\"] = {\n                korean: nowPrice,\n            };\n        })\n\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n\n        Object.keys(names).forEach(name => {\n            let nowPrice = parseFloat(names[name].closing_price);\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: nowPrice,\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    upbitUpdates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(\"name\", names);\n        names.forEach(name => {\n\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = parseFloat(name.trade_price);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    getUpbitAllMarketNameSagabithumbUpdates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        names.forEach(name => {\n\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            } else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    //✅\n    mixExchangeUpdates: (one_names, two_names, three_names, gecko_data, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //✅ gecko\n        /* Object.keys(gecko_data).map(name => {\n             let shortSym = CoinMarketData.find((coinsym) => {\n                 if (coinsym.totalName === name)\n                     return coinsym;\n             })\n \n             coinStateDatas[shortSym.symbol] = {\n                 ...coinStateDatas[shortSym.symbol],\n                 gecko: gecko_data[name].usd\n             }\n         });*/\n\n        //✅ bithumb\n        two_names.forEach(name => {\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        });\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice,\n                    upbitPrice: \"\"\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice,\n                    upbitPrice: \"\"\n                }\n            }\n\n            if (coinStateDatas['BTC'].upbitPrice) {\n                var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n\n                coinStateDatas['USDT'] = {\n                    ...coinStateDatas['USDT'],\n\n                    upbitUSDT: 'USDTKRW',\n                    upbitUSDTPrice: upbitusdtkrw\n                }\n            }\n        });\n\n\n        //✅ binance\n        three_names.forEach(name => {\n            let nowPrice = name.price;\n\n            if (typeof (nowPrice) === 'string')\n                nowPrice = parseFloat(nowPrice);\n\n            if (nowPrice < 1.0) {\n                nowPrice = nowPrice.toFixed(8);\n            }\n            else {\n                nowPrice = nowPrice.toFixed(1);\n            }\n\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                var len = name.symbol.indexOf('BTC');\n                var coin = name.symbol.slice(0, len);\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBTCSym: name.symbol,\n                        binanBTCPrice: nowPrice,\n                        //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                    }\n                }\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                var len = name.symbol.indexOf('USDT');\n\n                var coin = name.symbol.slice(0, len);\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (Object.keys(coinStateDatas[coin]) === 'upbitPrice') {\n                    console.log(\"ok\");\n                }\n                var readUpbirPrice = coinStateDatas[coin].upbitPrice;\n                if (readUpbirPrice !== undefined)\n                    var calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n                else {\n                    console.log(\"un\");\n                    var calper = \"None\"\n                }\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanUSDTSym: name.symbol,\n                        binanUSDTPrice: nowPrice,\n                        calKoUSDT: cal,//(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                        per: calper\n                    }\n                }\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                var len = name.symbol.indexOf('BUSD');\n                var coin = name.symbol.slice(0, len);\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBNBSym: name.symbol,\n                        binanBNBPrice: nowPrice,\n                        //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                    }\n                }\n            }\n\n            if (name.symbol === 'BTCBUSD') {\n\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanBNBSym: name.symbol,\n                    binanBNBPrice: nowPrice\n\n                }\n            } else if (name.symbol === 'BTCUSDT') {\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanUSDTSym: name.symbol,\n                    binanUSDTPrice: nowPrice,\n                    calKoUSDT: cal,\n                    per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n                }\n            }\n        });\n\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names, state) => {\n        const data = {};\n        //console.log(\"names\", names);\n        Object.keys(names).forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: names[name].korean,\n                    upbitBTC: name,\n                    imgsrc: imgsrc\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: names[name].korean,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: names[name].korean,\n                    bithumbBTC: name,\n                }\n            }\n        })\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}