{"ast":null,"code":"import { takeEvery, select } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi, binancecoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\nconst GET_UPBIT_MARKET_PRICE_INIT = \"GET_UPBIT_MARKET_PRICE_INIT\";\nconst GET_UPBIT_MARKET_PRICE_INIT_SUCCESS = \"GET_UPBIT_MARKET_PRICE_INIT_SUCCESS\";\nconst GET_UPBIT_MARKET_PRICE_INIT_ERROR = \"GET_UPBIT_MARKET_PRICE_INIT_ERROR\";\nconst GET_BITHUMB_MARKET_KRW_NAMES = \"GET_BITHUMB_MARKET_KRW_NAMES\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_ERROR = \"GET_BITHUMB_MARKET_KRW_NAMES_ERROR\";\nconst GET_BITHUMB_MARKET_BTC_NAMES = \"GET_BITHUMB_MARKET_BTC_NAMES\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_ERROR = \"GET_BITHUMB_MARKET_BTC_NAMES_ERROR\";\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\nconst CREATE_UPBIT_INIT = \"CREATE_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CREATE_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CREATE_UPBIT_INIT_ERROR\";\nconst CREATE_BITHUMB_INIT = \"CREATE_BITHUMB_INIT\";\nconst CREATE_BITHUMB_INIT_SUCCESS = \"CREATE_BITHUMB_INIT_SUCCESS\";\nconst CREATE_BITHUMB_INIT_ERROR = \"CREATE_BITHUMB_INIT_ERROR\";\nconst GET_BINANCE_MARKET_NAMES = \"GET_BINANCE_MARKET_NAMES\";\nconst GET_BINANCE_MARKET_NAMES_SUCCESS = \"GET_BINANCE_MARKET_NAMES_SUCCESS\";\nconst GET_BINANCE_MARKET_NAMES_ERROR = \"GET_BINANCE_MARKET_NAMES_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(GET_UPBIT_MARKET_NAMES, upbitoinApi.getMarketCodes, coinListDataUtils.upbitAllNames);\nconst getBinanceMarketNameSaga = createRequestSaga(GET_BINANCE_MARKET_NAMES, binancecoinApi.getMarketCodes, coinListDataUtils.binanceNames);\nconst getBithumbKRWMarketNameSaga = createRequestSaga(GET_BITHUMB_MARKET_KRW_NAMES, bithumbcoinApi.getKRWMarketCodes, coinListDataUtils.bithumbKRWNames);\nconst getBithumbBTCMarketNameSaga = createRequestSaga(GET_BITHUMB_MARKET_BTC_NAMES, bithumbcoinApi.getBTCMarketCodes, coinListDataUtils.bithumbBTCNames);\nconst getUpbitMarketPriceInitSaga = createRequestSaga(GET_UPBIT_MARKET_PRICE_INIT, upbitoinApi.getMarketPriceCodes, coinListDataUtils.upbitPriceNames); //✅ 업비트 소켓 연결\n\nconst connectUpbitSocketSaga = createConnectSocketSaga(CONNECT_UPBIT_SOCKET, \"ticker\", coinReadDataUtils.upbitUpdates);\nconst createUpbitInitSocketSaga = createInitRequestSaga(CREATE_UPBIT_INIT, coinReadDataUtils.upbitInitNames); //✅ 빗썸 소켓 연결\n\nconst createBithumbInitSocketSaga = createInitRequestSaga(CREATE_BITHUMB_INIT, coinReadDataUtils.bithumbInitNames);\n\nfunction* startInitSaga() {\n  yield getUpbitAllMarketNameSaga();\n  yield getUpbitMarketPriceInitSaga();\n  yield getBithumbKRWMarketNameSaga();\n  yield getBithumbBTCMarketNameSaga();\n  yield getBinanceMarketNameSaga();\n  const state = yield select();\n  const upbitmarketNames = state.Coin.upbitTotalNames.data;\n  yield createUpbitInitSocketSaga({\n    payload: upbitmarketNames\n  });\n  const bithumbmarketNames = state.Coin.bithumbTotalNames.data;\n  yield createBithumbInitSocketSaga({\n    payload: bithumbmarketNames\n  });\n  const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n  yield connectUpbitSocketSaga({\n    payload: marketNames\n  });\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  upbitTotalNames: {\n    data: {\n      \"KRW-BTC\": \"\"\n    }\n  },\n  bithumbTotalNames: {\n    data: {\n      \"BTC_KRW\": \"\"\n    }\n  },\n  binanceTotalNames: {\n    data: {\n      \"ETHBTC\": \"\"\n    }\n  },\n  marketNames: {\n    error: false,\n    data: {\n      \"BTC\": {\n        imgsrc: \"\",\n        gecko: \"\",\n        upbitSym: \"\",\n        upbitPrice: \"\",\n        upbitBTC: \"\",\n        upbitBTCPrice: \"\",\n        upbitUSDT: \"\",\n        upbitUSDTPrice: \"\",\n        bithumbSym: \"\",\n        bithumbPrice: \"\",\n        bithumbBTC: \"\",\n        bithumbBTCPrice: \"\",\n        binanBTCSym: \"\",\n        binanBTCPrice: \"\",\n        binanUSDTSym: \"\",\n        binanUSDTPrice: \"\",\n        binanBNBSym: \"\",\n        binanBNBPrice: \"\",\n        calKoupbitBTC: \"\",\n        calKobithumbBTC: \"\",\n        calKobinanBTC: \"\",\n        calKoupbitUSDT: \"\",\n        calKoUSDT: \"\",\n        calKoBUSD: \"\"\n      }\n    }\n  },\n  TOPmarketString: [],\n  TOPmarketNames: []\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_BINANCE_MARKET_NAMES_SUCCESS:\n    case GET_BINANCE_MARKET_NAMES_ERROR:\n      return requestActions(GET_BINANCE_MARKET_NAMES, \"binanceTotalNames\")(state, action);\n\n    case GET_UPBIT_MARKET_NAMES_SUCCESS:\n    case GET_UPBIT_MARKET_NAMES_ERROR:\n      return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n    case GET_UPBIT_MARKET_PRICE_INIT_SUCCESS:\n    case GET_UPBIT_MARKET_PRICE_INIT_ERROR:\n      return requestActions(GET_UPBIT_MARKET_PRICE_INIT, \"upbitTotalNames\")(state, action);\n\n    case GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS:\n    case GET_BITHUMB_MARKET_KRW_NAMES_ERROR:\n      return requestActions(GET_BITHUMB_MARKET_KRW_NAMES, \"bithumbTotalNames\")(state, action);\n\n    case GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS:\n    case GET_BITHUMB_MARKET_BTC_NAMES_ERROR:\n      return requestActions(GET_BITHUMB_MARKET_BTC_NAMES, \"bithumbTotalNames\")(state, action);\n\n    case CREATE_UPBIT_INIT_SUCCESS:\n    case CREATE_UPBIT_INIT_ERROR:\n      return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n    case CREATE_BITHUMB_INIT_SUCCESS:\n    case CREATE_BITHUMB_INIT_ERROR:\n      return requestActions(CREATE_BITHUMB_INIT, \"marketNames\")(state, action);\n\n    case CONNECT_UPBIT_SOCKET_SUCCESS:\n    case CONNECT_UPBIT_SOCKET_ERROR:\n      return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n    case START_INIT:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, connectUpbitSocketSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/Reducer/coinReducer.js"],"names":["takeEvery","select","upbitoinApi","bithumbcoinApi","binancecoinApi","createConnectSocketSaga","createRequestSaga","requestActions","createInitRequestSaga","coinListDataUtils","coinReadDataUtils","START_INIT","START_INIT_ASYNC","GET_UPBIT_MARKET_NAMES","GET_UPBIT_MARKET_NAMES_SUCCESS","GET_UPBIT_MARKET_NAMES_ERROR","GET_UPBIT_MARKET_PRICE_INIT","GET_UPBIT_MARKET_PRICE_INIT_SUCCESS","GET_UPBIT_MARKET_PRICE_INIT_ERROR","GET_BITHUMB_MARKET_KRW_NAMES","GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS","GET_BITHUMB_MARKET_KRW_NAMES_ERROR","GET_BITHUMB_MARKET_BTC_NAMES","GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS","GET_BITHUMB_MARKET_BTC_NAMES_ERROR","CONNECT_UPBIT_SOCKET","CONNECT_UPBIT_SOCKET_SUCCESS","CONNECT_UPBIT_SOCKET_ERROR","CREATE_UPBIT_INIT","CREATE_UPBIT_INIT_SUCCESS","CREATE_UPBIT_INIT_ERROR","CREATE_BITHUMB_INIT","CREATE_BITHUMB_INIT_SUCCESS","CREATE_BITHUMB_INIT_ERROR","GET_BINANCE_MARKET_NAMES","GET_BINANCE_MARKET_NAMES_SUCCESS","GET_BINANCE_MARKET_NAMES_ERROR","startInitAsync","type","startInit","getUpbitAllMarketNameSaga","getMarketCodes","upbitAllNames","getBinanceMarketNameSaga","binanceNames","getBithumbKRWMarketNameSaga","getKRWMarketCodes","bithumbKRWNames","getBithumbBTCMarketNameSaga","getBTCMarketCodes","bithumbBTCNames","getUpbitMarketPriceInitSaga","getMarketPriceCodes","upbitPriceNames","connectUpbitSocketSaga","upbitUpdates","createUpbitInitSocketSaga","upbitInitNames","createBithumbInitSocketSaga","bithumbInitNames","startInitSaga","state","upbitmarketNames","Coin","upbitTotalNames","data","payload","bithumbmarketNames","bithumbTotalNames","marketNames","Object","keys","coinSaga","initialState","binanceTotalNames","error","imgsrc","gecko","upbitSym","upbitPrice","upbitBTC","upbitBTCPrice","upbitUSDT","upbitUSDTPrice","bithumbSym","bithumbPrice","bithumbBTC","bithumbBTCPrice","binanBTCSym","binanBTCPrice","binanUSDTSym","binanUSDTPrice","binanBNBSym","binanBNBPrice","calKoupbitBTC","calKobithumbBTC","calKobinanBTC","calKoupbitUSDT","calKoUSDT","calKoBUSD","TOPmarketString","TOPmarketNames","coinReducer","action"],"mappings":"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","sourcesContent":["import { takeEvery, select, } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi, binancecoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\n\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\n\nconst GET_UPBIT_MARKET_PRICE_INIT = \"GET_UPBIT_MARKET_PRICE_INIT\";\nconst GET_UPBIT_MARKET_PRICE_INIT_SUCCESS = \"GET_UPBIT_MARKET_PRICE_INIT_SUCCESS\";\nconst GET_UPBIT_MARKET_PRICE_INIT_ERROR = \"GET_UPBIT_MARKET_PRICE_INIT_ERROR\";\n\nconst GET_BITHUMB_MARKET_KRW_NAMES = \"GET_BITHUMB_MARKET_KRW_NAMES\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_ERROR = \"GET_BITHUMB_MARKET_KRW_NAMES_ERROR\";\n\nconst GET_BITHUMB_MARKET_BTC_NAMES = \"GET_BITHUMB_MARKET_BTC_NAMES\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_ERROR = \"GET_BITHUMB_MARKET_BTC_NAMES_ERROR\";\n\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\n\nconst CREATE_UPBIT_INIT = \"CREATE_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CREATE_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CREATE_UPBIT_INIT_ERROR\";\n\nconst CREATE_BITHUMB_INIT = \"CREATE_BITHUMB_INIT\";\nconst CREATE_BITHUMB_INIT_SUCCESS = \"CREATE_BITHUMB_INIT_SUCCESS\";\nconst CREATE_BITHUMB_INIT_ERROR = \"CREATE_BITHUMB_INIT_ERROR\";\n\nconst GET_BINANCE_MARKET_NAMES = \"GET_BINANCE_MARKET_NAMES\";\nconst GET_BINANCE_MARKET_NAMES_SUCCESS = \"GET_BINANCE_MARKET_NAMES_SUCCESS\";\nconst GET_BINANCE_MARKET_NAMES_ERROR = \"GET_BINANCE_MARKET_NAMES_ERROR\";\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(\n    GET_UPBIT_MARKET_NAMES,\n    upbitoinApi.getMarketCodes,\n    coinListDataUtils.upbitAllNames\n);\nconst getBinanceMarketNameSaga = createRequestSaga(\n    GET_BINANCE_MARKET_NAMES,\n    binancecoinApi.getMarketCodes,\n    coinListDataUtils.binanceNames\n);\n\nconst getBithumbKRWMarketNameSaga = createRequestSaga(\n    GET_BITHUMB_MARKET_KRW_NAMES,\n    bithumbcoinApi.getKRWMarketCodes,\n    coinListDataUtils.bithumbKRWNames\n);\nconst getBithumbBTCMarketNameSaga = createRequestSaga(\n    GET_BITHUMB_MARKET_BTC_NAMES,\n    bithumbcoinApi.getBTCMarketCodes,\n    coinListDataUtils.bithumbBTCNames\n);\n\nconst getUpbitMarketPriceInitSaga = createRequestSaga(\n    GET_UPBIT_MARKET_PRICE_INIT,\n    upbitoinApi.getMarketPriceCodes,\n    coinListDataUtils.upbitPriceNames\n);\n\n\n\n\n//✅ 업비트 소켓 연결\nconst connectUpbitSocketSaga = createConnectSocketSaga(\n    CONNECT_UPBIT_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.upbitUpdates\n);\n\nconst createUpbitInitSocketSaga = createInitRequestSaga(\n    CREATE_UPBIT_INIT,\n    coinReadDataUtils.upbitInitNames\n);\n//✅ 빗썸 소켓 연결\nconst createBithumbInitSocketSaga = createInitRequestSaga(\n    CREATE_BITHUMB_INIT,\n    coinReadDataUtils.bithumbInitNames\n);\n\n\nfunction* startInitSaga() {\n    yield getUpbitAllMarketNameSaga();\n    yield getUpbitMarketPriceInitSaga();\n\n    yield getBithumbKRWMarketNameSaga();\n    yield getBithumbBTCMarketNameSaga();\n\n    yield getBinanceMarketNameSaga();\n    const state = yield select();\n\n    const upbitmarketNames = state.Coin.upbitTotalNames.data;\n    yield createUpbitInitSocketSaga({ payload: upbitmarketNames });\n\n    const bithumbmarketNames = state.Coin.bithumbTotalNames.data;\n    yield createBithumbInitSocketSaga({ payload: bithumbmarketNames });\n\n    const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n    yield connectUpbitSocketSaga({ payload: marketNames });\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n    upbitTotalNames: {\n        data: {\n            \"KRW-BTC\": \"\"\n        },\n    },\n    bithumbTotalNames: {\n        data: {\n            \"BTC_KRW\": \"\"\n        },\n    },\n    binanceTotalNames: {\n        data: {\n            \"ETHBTC\": \"\"\n        }\n    },\n    marketNames: {\n        error: false,\n        data: {\n            \"BTC\": {\n                imgsrc: \"\",\n                gecko: \"\",\n                upbitSym: \"\", upbitPrice: \"\",\n                upbitBTC: \"\", upbitBTCPrice: \"\",\n                upbitUSDT: \"\", upbitUSDTPrice: \"\",\n                bithumbSym: \"\", bithumbPrice: \"\",\n                bithumbBTC: \"\", bithumbBTCPrice: \"\",\n                binanBTCSym: \"\", binanBTCPrice: \"\",\n                binanUSDTSym: \"\", binanUSDTPrice: \"\",\n                binanBNBSym: \"\", binanBNBPrice: \"\",\n\n                calKoupbitBTC: \"\",\n                calKobithumbBTC: \"\",\n                calKobinanBTC: \"\",\n                calKoupbitUSDT: \"\",\n                calKoUSDT: \"\",\n                calKoBUSD: \"\"\n            },\n        },\n    },\n    TOPmarketString: [],\n    TOPmarketNames: [],\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_BINANCE_MARKET_NAMES_SUCCESS:\n        case GET_BINANCE_MARKET_NAMES_ERROR:\n            return requestActions(GET_BINANCE_MARKET_NAMES, \"binanceTotalNames\")(state, action);\n\n        case GET_UPBIT_MARKET_NAMES_SUCCESS:\n        case GET_UPBIT_MARKET_NAMES_ERROR:\n            return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n        case GET_UPBIT_MARKET_PRICE_INIT_SUCCESS:\n        case GET_UPBIT_MARKET_PRICE_INIT_ERROR:\n            return requestActions(GET_UPBIT_MARKET_PRICE_INIT, \"upbitTotalNames\")(state, action);\n\n        case GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS:\n        case GET_BITHUMB_MARKET_KRW_NAMES_ERROR:\n            return requestActions(GET_BITHUMB_MARKET_KRW_NAMES, \"bithumbTotalNames\")(state, action);\n\n        case GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS:\n        case GET_BITHUMB_MARKET_BTC_NAMES_ERROR:\n            return requestActions(GET_BITHUMB_MARKET_BTC_NAMES, \"bithumbTotalNames\")(state, action);\n\n        case CREATE_UPBIT_INIT_SUCCESS:\n        case CREATE_UPBIT_INIT_ERROR:\n            return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n        case CREATE_BITHUMB_INIT_SUCCESS:\n        case CREATE_BITHUMB_INIT_ERROR:\n            return requestActions(CREATE_BITHUMB_INIT, \"marketNames\")(state, action);\n\n        case CONNECT_UPBIT_SOCKET_SUCCESS:\n        case CONNECT_UPBIT_SOCKET_ERROR:\n            return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n        case START_INIT:\n            return state;\n        default:\n            return state;\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    connectUpbitSocketSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}