{"ast":null,"code":"import CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = price => {\n  let data = parseFloat(price);\n\n  if (data < 1.0) {\n    return data.toFixed(8);\n  } else {\n    return data.toFixed(1);\n  }\n};\n\nconst coinListDataUtils = {\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name\n      };\n    });\n    return data;\n  },\n  upbitPriceNames: (names, state) => {\n    const coinStateDatas = state.Coin.upbitTotalNames.data;\n    names.forEach(name => {\n      coinStateDatas[name.market] = {\n        korean: pricereturnFloat(name.trade_price)\n      };\n    });\n    return coinStateDatas;\n  },\n  binanceNames: names => {\n    const data = {};\n    names.forEach(name => {\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      }\n    });\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      data[name + \"_KRW\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      if (name === 'XVS') {\n        console.log('XVS', names[name]);\n      }\n\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = pricereturnFloat(name.closePrice);\n      var sortOrder = [];\n      var cal, calper;\n\n      if (coinStateDatas[shortSym]) {\n        Object.keys(coinStateDatas[shortSym]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === \"KRW\") {\n        if (sortOrder[0] === 'upbitSym') {\n          calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice,\n          bithumbKRW_start_per: calper\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice,\n          calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].bithumbPrice) * parseFloat(nowPrice)).toFixed(1)\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = pricereturnFloat(name.trade_price);\n      var sortOrder = [];\n      var cal, calper; //CoinMarketData[shortSym] === \n\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          if (!coin.upbitWWithdraw) console.log(\"err\", coin.symbol, shortSym);\n        }\n      });\n\n      if (coinStateDatas[shortSym]) {\n        Object.keys(coinStateDatas[shortSym]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0] && !sortOrder[1]) {\n          sortOrder.splice(0, 2);\n        } else if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        };\n      } else if (moneySym === \"USDT\") {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n        if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitUSDT') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[1] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else {\n          calper = \"Prepare\";\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice,\n          upbitUSDT_start_per: calper,\n          calKoupbitUSDT: cal\n        };\n      } else if (moneySym === \"BTC\") {\n        var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n        cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n        if (sortOrder[0] === 'upbitBTC') {\n          calper = 'prepare';\n        } else if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice,\n          //!\n          calKoupbitBTC: cal,\n          upbitBTC_start_per: calper\n        };\n      }\n\n      if (coinStateDatas['BTC'].upbitPrice) {\n        //@\n        var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n        coinStateDatas['USDT'] = { ...coinStateDatas['USDT'],\n          upbitUSDT: 'USDTKRW',\n          upbitUSDTPrice: upbitusdtkrw\n        };\n      }\n    }); //✅ binance\n\n    three_names.forEach(name => {\n      let nowPrice = pricereturnFloat(name.price);\n      var sortOrder = [];\n      var len, cal, calper, coin;\n      let moneySym;\n      let exceptionArr = ['VENUSDT', 'VENBTC',, 'MBLBTC', 'TUSDBTC', 'DAIBTC', 'REPBUSD', 'STORJBUSD', 'DENTBTC', 'MFTBTC', 'SUNBTC', 'BTTBTC', 'COCOSBTC', 'PAXBTC', 'PAXUSDT', 'PAXBUSD', 'BCHSVBTC', 'BCHSVUSDT', 'BCCBTC', 'BCCUSDT', 'HOTBTC', 'BCHABCBTC', 'BCHABCUSDT', 'BCHABCBUSD', 'STORMBTC', 'STORMUSDT', 'LENDBTC', 'LENDUSDT', 'LENDBUSD', 'ERDBTC', 'ERDUSDT', 'ERDBUSD', 'MCOBTC', 'MCOUSDT', 'STRATBTC', 'STRATUSDT', 'STRATBUSD', 'VTHOBUSD', 'DCRBUSD', 'NPXSBTC', 'NPXSUSDT', 'BLZBUSD', 'WNXMBUSD', 'AIONBUSD', 'KMDBUSD', 'XZCBT', 'XZCUSDT', 'IRISBUSD', 'HCBTC', 'HCUSDT', 'KEYBTC', 'KEYUSDT', 'TROYBTC', 'SUSDBTC', 'TRUBUSD', 'BOOTBTC', 'BOTBUSD', 'PXGBUSD', 'BTSBUSD'];\n      let exceptionflag = false;\n      exceptionArr.map(symbolName => {\n        if (name.symbol === symbolName) {\n          exceptionflag = true;\n          return;\n        }\n      });\n      if (exceptionflag === true) return coinStateDatas;\n\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        len = name.symbol.indexOf('BTC');\n        moneySym = 'BTC';\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        len = name.symbol.indexOf('USDT');\n        moneySym = 'USDT';\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        len = name.symbol.indexOf('BUSD');\n        moneySym = 'BUSD';\n      }\n\n      coin = name.symbol.slice(0, len);\n\n      if (coinStateDatas[coin]) {\n        Object.keys(coinStateDatas[coin]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0] && !sortOrder[1]) {\n          sortOrder.splice(0, 2);\n        } else if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === 'BTC') {\n        cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBTCSym: name.symbol,\n            binanBTCPrice: nowPrice,\n            calKobinanBTC: cal,\n            binBTC_start_per: calper\n          };\n        }\n      } else if (moneySym === 'USDT') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanUSDTSym: name.symbol,\n            binanUSDTPrice: nowPrice,\n            calKoUSDT: cal,\n            binUSDT_start_per: calper\n          };\n        }\n      } else if (moneySym === 'BUSD') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBNBSym: name.symbol,\n            binanBNBPrice: nowPrice,\n            calKoBUSD: cal,\n            binBUSD_start_per: calper\n          };\n        }\n      } //📌 EXCEPTION\n\n\n      if (name.symbol === 'BTCBUSD') {\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanBNBSym: name.symbol,\n          binanBNBPrice: nowPrice\n        };\n      } else if (name.symbol === 'BTCUSDT') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanUSDTSym: name.symbol,\n          binanUSDTPrice: nowPrice,\n          calKoUSDT: cal,\n          per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n        };\n      }\n    }); //✅ Max per search\n\n    Object.keys(coinStateDatas).forEach(coin => {\n      var read = coinStateDatas[coin];\n      var keyread = Object.keys(read);\n      var maxPer = 0.0;\n      var minPer = 0.0;\n      keyread.forEach(name => {\n        var per;\n\n        if (name === 'bithumbKRW_start_per') {\n          per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n        } else if (name === 'binBUSD_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n        } else if (name === 'upbitBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n        } else if (name === 'upbitUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n        } else if (name === 'BTCper') {\n          per = parseFloat(coinStateDatas[coin].BTCper);\n        } else if (name === 'binUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n        } else if (name === 'binBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n        }\n\n        if (per > maxPer) {\n          maxPer = per;\n        }\n\n        if (per < minPer) {\n          minPer = per;\n        }\n      });\n      coinStateDatas[coin] = { ...coinStateDatas[coin],\n        totalPer: maxPer,\n        totalminPer: minPer\n      };\n    }); //📦 v2\n\n    Object.keys(coinStateDatas).forEach(coin => {\n      var read = coinStateDatas[coin];\n      var keyread = Object.keys(read);\n      var maxPer = 0.0;\n      var minPer = Number.MAX_SAFE_INTEGER;\n      keyread.forEach(name => {\n        var price;\n\n        if (name === 'upbitPrice') {\n          price = parseFloat(coinStateDatas[coin].upbitPrice);\n        } else if (name === 'calKoupbitBTC') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n        } else if (name === 'calKobithumbBTC') {\n          price = parseFloat(coinStateDatas[coin].calKobithumbBTC);\n        } else if (name === 'calKobinanBTC') {\n          price = parseFloat(coinStateDatas[coin].calKobinanBTC);\n        } else if (name === 'calKoupbitUSDT') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitUSDT);\n        } else if (name === 'calKoUSDT') {\n          price = parseFloat(coinStateDatas[coin].calKoUSDT);\n        } else if (name === 'calKoBUSD') {\n          price = parseFloat(coinStateDatas[coin].calKoBUSD);\n        } else if (name === 'calKoupbitBTC') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n        }\n\n        if (price > maxPer) {\n          maxPer = price;\n        }\n\n        if (price < minPer) {\n          minPer = price;\n        }\n      });\n      var result = 0.0;\n      result = ((maxPer - minPer) / minPer * 100).toFixed(1);\n      coinStateDatas[coin] = { ...coinStateDatas[coin],\n        testper: result\n      };\n    });\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: (names, state) => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n\n      if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name\n        };\n      } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name\n        };\n      }\n    });\n    data['USDT'] = { ...data['USDT'],\n      upbitUSDTPrice: (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1),\n      upbitUSDT: 'USDTKRW'\n    };\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name,\n          imgsrc: imgsrc,\n          calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: names[name].korean,\n          upbitBTC: name,\n          imgsrc: imgsrc,\n          calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: names[name].korean,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: names[name].korean,\n          bithumbBTC: name,\n          calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    });\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/Lib/utils.js"],"names":["CoinMarketData","pricereturnFloat","price","data","parseFloat","toFixed","coinListDataUtils","upbitAllNames","names","forEach","name","market","korean","korean_name","upbitPriceNames","state","coinStateDatas","Coin","upbitTotalNames","trade_price","binanceNames","symbol","lastIndexOf","bithumbKRWNames","Object","keys","closing_price","bithumbBTCNames","bithumbTotalNames","console","log","coinReadDataUtils","mixExchangeUpdates","one_names","two_names","three_names","marketNames","shortSym","split","moneySym","nowPrice","closePrice","sortOrder","cal","calper","filter","list","splice","upbitPrice","bithumbPrice","bithumbKRW_start_per","bithumbBTCPrice","calKobithumbBTC","code","find","coin","upbitWWithdraw","upbitUSDTPrice","calKoupbitBTC","upbitUSDT_start_per","calKoupbitUSDT","origin","upbitBTCPrice","upbitBTC_start_per","upbitusdtkrw","upbitUSDT","len","exceptionArr","exceptionflag","map","symbolName","indexOf","slice","binanBTCSym","binanBTCPrice","calKobinanBTC","binBTC_start_per","binanUSDTSym","binanUSDTPrice","calKoUSDT","binUSDT_start_per","binanBNBSym","binanBNBPrice","calKoBUSD","binBUSD_start_per","per","read","keyread","maxPer","minPer","BTCper","totalPer","totalminPer","Number","MAX_SAFE_INTEGER","result","testper","upbitInitNames","upbitSym","imgsrc","upbitBTC","bithumbInitNames","bithumbSym","bithumbBTC"],"mappings":"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","sourcesContent":["import CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = (price) => {\n    let data = parseFloat(price);\n    if (data < 1.0) {\n        return data.toFixed(8);\n    }\n    else {\n        return data.toFixed(1);\n    }\n}\n\nconst coinListDataUtils = {\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n            };\n        })\n        return data;\n    },\n    upbitPriceNames: (names, state) => {\n        const coinStateDatas = state.Coin.upbitTotalNames.data;\n        names.forEach(name => {\n            coinStateDatas[name.market] = {\n                korean: pricereturnFloat(name.trade_price),\n            };\n        })\n        return coinStateDatas;\n    },\n\n    binanceNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            }\n        })\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            data[name + \"_KRW\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n        Object.keys(names).forEach(name => {\n            if (name === 'XVS') {\n                console.log('XVS', names[name]);\n            }\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //✅ bithumb\n        two_names.forEach(name => {\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = pricereturnFloat(name.closePrice);\n            var sortOrder = [];\n            var cal, calper;\n\n            if (coinStateDatas[shortSym]) {\n                Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n            if (moneySym === \"KRW\") {\n                if (sortOrder[0] === 'upbitSym') {\n                    calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2)\n                }\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice,\n                    bithumbKRW_start_per: calper\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice,\n                    calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].bithumbPrice) * parseFloat(nowPrice)).toFixed(1)\n                }\n            }\n        });\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = pricereturnFloat(name.trade_price);\n            var sortOrder = [];\n            var cal, calper;\n\n            //CoinMarketData[shortSym] === \n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    if (!coin.upbitWWithdraw)\n                        console.log(\"err\", coin.symbol, shortSym);\n                }\n            })\n\n            if (coinStateDatas[shortSym]) {\n                Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0] && !sortOrder[1]) {\n                    sortOrder.splice(0, 2);\n                }\n                else if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n            } else if (moneySym === \"USDT\") {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitUSDT') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else if (sortOrder[1] === 'upbitBTC') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else {\n                    calper = \"Prepare\";\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice,\n\n                    upbitUSDT_start_per: calper,\n                    calKoupbitUSDT: cal\n                }\n            } else if (moneySym === \"BTC\") {\n                var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n                cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n                if (sortOrder[0] === 'upbitBTC') {\n                    calper = 'prepare';\n\n                } else if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice,\n                    //!\n                    calKoupbitBTC: cal,\n                    upbitBTC_start_per: calper\n                }\n            }\n\n            if (coinStateDatas['BTC'].upbitPrice) {\n                //@\n                var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n\n                coinStateDatas['USDT'] = {\n                    ...coinStateDatas['USDT'],\n\n                    upbitUSDT: 'USDTKRW',\n                    upbitUSDTPrice: upbitusdtkrw\n                }\n            }\n        });\n\n\n        //✅ binance\n        three_names.forEach(name => {\n            let nowPrice = pricereturnFloat(name.price);\n            var sortOrder = [];\n            var len, cal, calper, coin;\n            let moneySym;\n            let exceptionArr = ['VENUSDT', 'VENBTC', , 'MBLBTC',\n                'TUSDBTC', 'DAIBTC', 'REPBUSD', 'STORJBUSD', 'DENTBTC', 'MFTBTC',\n                'SUNBTC', 'BTTBTC', 'COCOSBTC', 'PAXBTC', 'PAXUSDT', 'PAXBUSD',\n                'BCHSVBTC', 'BCHSVUSDT', 'BCCBTC', 'BCCUSDT', 'HOTBTC', 'BCHABCBTC',\n                'BCHABCUSDT', 'BCHABCBUSD', 'STORMBTC', 'STORMUSDT', 'LENDBTC', 'LENDUSDT', 'LENDBUSD',\n                'ERDBTC', 'ERDUSDT', 'ERDBUSD', 'MCOBTC', 'MCOUSDT', 'STRATBTC', 'STRATUSDT', 'STRATBUSD',\n                'VTHOBUSD', 'DCRBUSD', 'NPXSBTC', 'NPXSUSDT', 'BLZBUSD', 'WNXMBUSD', 'AIONBUSD', 'KMDBUSD',\n                'XZCBT', 'XZCUSDT', 'IRISBUSD', 'HCBTC', 'HCUSDT', 'KEYBTC', 'KEYUSDT', 'TROYBTC', 'SUSDBTC',\n                'TRUBUSD', 'BOOTBTC', 'BOTBUSD', 'PXGBUSD', 'BTSBUSD',\n            ];\n            let exceptionflag = false;\n            exceptionArr.map((symbolName) => {\n                if (name.symbol === symbolName) {\n                    exceptionflag = true\n                    return;\n                }\n            })\n            if (exceptionflag === true)\n                return coinStateDatas;\n\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                len = name.symbol.indexOf('BTC');\n                moneySym = 'BTC';\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                len = name.symbol.indexOf('USDT');\n                moneySym = 'USDT';\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                len = name.symbol.indexOf('BUSD');\n                moneySym = 'BUSD';\n            }\n            coin = name.symbol.slice(0, len);\n\n            if (coinStateDatas[coin]) {\n                Object.keys(coinStateDatas[coin]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0] && !sortOrder[1]) {\n                    sortOrder.splice(0, 2);\n                }\n                else if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n            if (moneySym === 'BTC') {\n                cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBTCSym: name.symbol,\n                        binanBTCPrice: nowPrice,\n                        calKobinanBTC: cal,\n                        binBTC_start_per: calper\n                    }\n                }\n            } else if (moneySym === 'USDT') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanUSDTSym: name.symbol,\n                        binanUSDTPrice: nowPrice,\n                        calKoUSDT: cal,\n                        binUSDT_start_per: calper,\n                    }\n                }\n            } else if (moneySym === 'BUSD') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBNBSym: name.symbol,\n                        binanBNBPrice: nowPrice,\n                        calKoBUSD: cal,\n                        binBUSD_start_per: calper,\n                    }\n                }\n            }\n            //📌 EXCEPTION\n            if (name.symbol === 'BTCBUSD') {\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanBNBSym: name.symbol,\n                    binanBNBPrice: nowPrice\n                }\n            } else if (name.symbol === 'BTCUSDT') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanUSDTSym: name.symbol,\n                    binanUSDTPrice: nowPrice,\n                    calKoUSDT: cal,\n                    per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n                }\n            }\n        });\n\n        //✅ Max per search\n        Object.keys(coinStateDatas).forEach((coin) => {\n            var read = coinStateDatas[coin];\n            var keyread = Object.keys(read);\n            var maxPer = 0.0;\n            var minPer = 0.0;\n            keyread.forEach((name) => {\n                var per;\n                if (name === 'bithumbKRW_start_per') {\n                    per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n                }\n                else if (name === 'binBUSD_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n                } else if (name === 'upbitBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n                } else if (name === 'upbitUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n                } else if (name === 'BTCper') {\n                    per = parseFloat(coinStateDatas[coin].BTCper);\n                } else if (name === 'binUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n                }\n                else if (name === 'binBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n                }\n                if (per > maxPer) {\n                    maxPer = per;\n                }\n                if (per < minPer) {\n                    minPer = per;\n                }\n            })\n            coinStateDatas[coin] = {\n                ...coinStateDatas[coin],\n                totalPer: maxPer,\n                totalminPer: minPer\n            }\n        });\n\n        //📦 v2\n        Object.keys(coinStateDatas).forEach((coin) => {\n            var read = coinStateDatas[coin];\n            var keyread = Object.keys(read);\n            var maxPer = 0.0;\n            var minPer = Number.MAX_SAFE_INTEGER;\n            keyread.forEach((name) => {\n                var price;\n                if (name === 'upbitPrice') {\n                    price = parseFloat(coinStateDatas[coin].upbitPrice);\n                }\n                else if (name === 'calKoupbitBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n                }\n                else if (name === 'calKobithumbBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKobithumbBTC);\n                } else if (name === 'calKobinanBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKobinanBTC);\n                } else if (name === 'calKoupbitUSDT') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitUSDT);\n                } else if (name === 'calKoUSDT') {\n                    price = parseFloat(coinStateDatas[coin].calKoUSDT);\n                } else if (name === 'calKoBUSD') {\n                    price = parseFloat(coinStateDatas[coin].calKoBUSD);\n                }\n                else if (name === 'calKoupbitBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n                }\n\n                if (price > maxPer) {\n                    maxPer = price;\n                }\n                if (price < minPer) {\n                    minPer = price;\n                }\n            })\n\n            var result = 0.0;\n            result = ((maxPer - minPer) / minPer * 100).toFixed(1);\n\n            coinStateDatas[coin] = {\n                ...coinStateDatas[coin],\n                testper: result\n            }\n        });\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names, state) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n\n            if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                }\n            } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                }\n            }\n        })\n        data['USDT'] = {\n            ...data['USDT'],\n            upbitUSDTPrice: (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1),\n            upbitUSDT: 'USDTKRW',\n        }\n\n        Object.keys(names).forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n\n\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc,\n                    calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n                }\n            } else if (moneySym === \"BTC\") {\n\n\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: names[name].korean,\n                    upbitBTC: name,\n                    imgsrc: imgsrc,\n                    calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: names[name].korean,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: names[name].korean,\n                    bithumbBTC: name,\n                    calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        })\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}