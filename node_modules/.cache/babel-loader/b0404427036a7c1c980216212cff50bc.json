{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const res = yield call(api, action.payload); //console.log(post);\n\n    try {\n      //const res = yield call(api, action.payload);\n      const state = yield select(); //console.log(action.payload);\n\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data, state)\n      }); // yield put(finishLoading(type));\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      }); // yield put(finishLoading(type));\n\n      throw e;\n    }\n  };\n}; // requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    //console.log(state, action);\n    switch (action.type) {\n      case SUCCESS:\n        //console.log(15);\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\n\nconst createSocket = () => {\n  const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n}; // 소켓 연결용\n\n\nconst connectSocekt = (socket, connectType, action, buffer) => {\n  //console.log(action.payload);\n  return eventChannel(emit => {\n    socket.onopen = () => {\n      socket.send(JSON.stringify([{\n        ticket: \"coinbread-clone\"\n      }, {\n        type: connectType,\n        codes: action.payload\n      }]));\n    };\n\n    socket.onmessage = evt => {\n      const enc = new encoding.TextDecoder(\"utf-8\"); // const arr = new Uint8Array(evt.data);\n\n      const data = JSON.parse(enc.decode(evt.data)); //console.log(data);\n\n      emit(data);\n    };\n\n    socket.onerror = evt => {\n      emit(evt);\n      emit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const client = yield call(createSocket); //console.log(connectType, action);\n\n    const clientChannel = yield call(connectSocekt, client, connectType, action, buffers.expanding(500));\n\n    try {\n      while (true) {\n        const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n\n        const state = yield select();\n\n        if (datas.length) {\n          const sortedObj = {};\n          datas.forEach(data => {\n            if (sortedObj[data.code]) {\n              // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n              sortedObj[data.code] = sortedObj[data.code].timestamp > data.timestamp ? sortedObj[data.code] : data;\n            } else {\n              sortedObj[data.code] = data; // 새로운 데이터면 그냥 넣음\n            }\n          });\n          const sortedData = Object.keys(sortedObj).map(data => sortedObj[data]); //console.log(\"11\", sortedObj);\n          //console.log(sortedData);\n\n          yield put({\n            type: SUCCESS,\n            payload: dataMaker({ ...sortedData,\n              sortedData\n            }, state)\n          });\n        }\n\n        yield delay(500); // 500ms 동안 대기\n      }\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n    } finally {\n      clientChannel.close(); // emit(END) 접근시 소켓 닫기\n    }\n  };\n};\n\nexport { createRequestSaga, requestActions, createConnectSocketSaga };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","w3cwebsocket","W3CWebSocket","buffers","eventChannel","END","encoding","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","res","payload","state","data","e","requestActions","key","reducerUtils","success","error","createSocket","client","binaryType","connectSocekt","socket","connectType","buffer","emit","onopen","send","JSON","stringify","ticket","codes","onmessage","evt","enc","TextDecoder","parse","decode","onerror","unsubscribe","close","none","createConnectSocketSaga","clientChannel","expanding","datas","length","sortedObj","forEach","code","timestamp","sortedData","Object","keys","map"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,KAAnC,QAAgD,oBAAhD;AACA,SAASC,YAAY,IAAIC,YAAzB,QAA6C,WAA7C;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,GAAhC,QAA2C,YAA3C;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,GAAP,EAAYC,SAAZ,KAA0B;AAChD,QAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;AACA,QAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;AAEA,SAAO,WAAWK,MAAM,GAAG,EAApB,EAAwB;AAC3B,UAAMC,GAAG,GAAG,MAAMlB,IAAI,CAACa,GAAD,EAAMI,MAAM,CAACE,OAAb,CAAtB,CAD2B,CAE3B;;AACA,QAAI;AACA;AACA,YAAMC,KAAK,GAAG,MAAMlB,MAAM,EAA1B,CAFA,CAGA;;AACA,YAAMD,GAAG,CAAC;AAAEW,QAAAA,IAAI,EAAEG,OAAR;AAAiBI,QAAAA,OAAO,EAAEL,SAAS,CAACI,GAAG,CAACG,IAAL,EAAWD,KAAX;AAAnC,OAAD,CAAT,CAJA,CAKA;AACH,KAND,CAME,OAAOE,CAAP,EAAU;AACR,YAAMrB,GAAG,CAAC;AAAEW,QAAAA,IAAI,EAAEI,KAAR;AAAeG,QAAAA,OAAO,EAAEG;AAAxB,OAAD,CAAT,CADQ,CAER;;AACA,YAAMA,CAAN;AACH;AACJ,GAdD;AAeH,CAnBD,C,CAoBA;;;AACA,MAAMC,cAAc,GAAG,CAACX,IAAD,EAAOY,GAAP,KAAe;AAClC,QAAM,CAACT,OAAD,EAAUC,KAAV,IAAmB,CAAE,GAAEJ,IAAK,UAAT,EAAqB,GAAEA,IAAK,QAA5B,CAAzB;AAEA,SAAO,CAACQ,KAAD,EAAQH,MAAR,KAAmB;AACtB;AACA,YAAQA,MAAM,CAACL,IAAf;AACI,WAAKG,OAAL;AACI;AACA,eAAOU,YAAY,CAACC,OAAb,CAAqBN,KAArB,EAA4BH,MAAM,CAACE,OAAnC,EAA4CK,GAA5C,CAAP;;AACJ,WAAKR,KAAL;AACI,eAAOS,YAAY,CAACE,KAAb,CAAmBP,KAAnB,EAA0BH,MAAM,CAACE,OAAjC,EAA0CK,GAA1C,CAAP;;AACJ;AACI,eAAOJ,KAAP;AAPR;AASH,GAXD;AAYH,CAfD;;AAiBA,MAAMK,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CAACN,KAAD,EAAQD,OAAR,EAAiBK,GAAjB,KAAyB;AAC9B,WAAO,EACH,GAAGJ,KADA;AAEH,OAACI,GAAD,GAAO;AACHH,QAAAA,IAAI,EAAEF,OADH;AAEHQ,QAAAA,KAAK,EAAE;AAFJ;AAFJ,KAAP;AAOH,GATgB;AAUjBA,EAAAA,KAAK,EAAE,CAACP,KAAD,EAAQO,KAAR,EAAeH,GAAf,MAAwB,EAC3B,GAAGJ,KADwB;AAE3B,KAACI,GAAD,GAAO,EACH,GAAGJ,KAAK,CAACI,GAAD,CADL;AAEHG,MAAAA,KAAK,EAAEA;AAFJ;AAFoB,GAAxB;AAVU,CAArB;;AAmBA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAMC,MAAM,GAAG,IAAIvB,YAAJ,CAAiB,kCAAjB,CAAf;AACAuB,EAAAA,MAAM,CAACC,UAAP,GAAoB,aAApB;AAEA,SAAOD,MAAP;AACH,CALD,C,CAQA;;;AACA,MAAME,aAAa,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBhB,MAAtB,EAA8BiB,MAA9B,KAAyC;AAC3D;AACA,SAAO1B,YAAY,CAAE2B,IAAD,IAAU;AAC1BH,IAAAA,MAAM,CAACI,MAAP,GAAgB,MAAM;AAClBJ,MAAAA,MAAM,CAACK,IAAP,CACIC,IAAI,CAACC,SAAL,CAAe,CACX;AAAEC,QAAAA,MAAM,EAAE;AAAV,OADW,EAEX;AAAE5B,QAAAA,IAAI,EAAEqB,WAAR;AAAqBQ,QAAAA,KAAK,EAAExB,MAAM,CAACE;AAAnC,OAFW,CAAf,CADJ;AAMH,KAPD;;AASAa,IAAAA,MAAM,CAACU,SAAP,GAAoBC,GAAD,IAAS;AACxB,YAAMC,GAAG,GAAG,IAAIlC,QAAQ,CAACmC,WAAb,CAAyB,OAAzB,CAAZ,CADwB,CAExB;;AACA,YAAMxB,IAAI,GAAGiB,IAAI,CAACQ,KAAL,CAAWF,GAAG,CAACG,MAAJ,CAAWJ,GAAG,CAACtB,IAAf,CAAX,CAAb,CAHwB,CAIxB;;AACAc,MAAAA,IAAI,CAACd,IAAD,CAAJ;AACH,KAND;;AAQAW,IAAAA,MAAM,CAACgB,OAAP,GAAkBL,GAAD,IAAS;AACtBR,MAAAA,IAAI,CAACQ,GAAD,CAAJ;AACAR,MAAAA,IAAI,CAAC1B,GAAD,CAAJ;AACH,KAHD;;AAKA,UAAMwC,WAAW,GAAG,MAAM;AACtBjB,MAAAA,MAAM,CAACkB,KAAP;AACH,KAFD;;AAIA,WAAOD,WAAP;AACH,GA5BkB,EA4BhBf,MAAM,IAAI3B,OAAO,CAAC4C,IAAR,EA5BM,CAAnB;AA6BH,CA/BD;;AAiCA,MAAMC,uBAAuB,GAAG,CAACxC,IAAD,EAAOqB,WAAP,EAAoBnB,SAApB,KAAkC;AAC9D,QAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;AACA,QAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;AAEA,SAAO,WAAWK,MAAM,GAAG,EAApB,EAAwB;AAC3B,UAAMY,MAAM,GAAG,MAAM7B,IAAI,CAAC4B,YAAD,CAAzB,CAD2B,CAG3B;;AACA,UAAMyB,aAAa,GAAG,MAAMrD,IAAI,CAC5B+B,aAD4B,EAE5BF,MAF4B,EAG5BI,WAH4B,EAI5BhB,MAJ4B,EAK5BV,OAAO,CAAC+C,SAAR,CAAkB,GAAlB,CAL4B,CAAhC;;AAQA,QAAI;AACA,aAAO,IAAP,EAAa;AACT,cAAMC,KAAK,GAAG,MAAMpD,KAAK,CAACkD,aAAD,CAAzB,CADS,CACiC;;AAC1C,cAAMjC,KAAK,GAAG,MAAMlB,MAAM,EAA1B;;AAEA,YAAIqD,KAAK,CAACC,MAAV,EAAkB;AACd,gBAAMC,SAAS,GAAG,EAAlB;AACAF,UAAAA,KAAK,CAACG,OAAN,CAAerC,IAAD,IAAU;AACpB,gBAAIoC,SAAS,CAACpC,IAAI,CAACsC,IAAN,CAAb,EAA0B;AACtB;AACAF,cAAAA,SAAS,CAACpC,IAAI,CAACsC,IAAN,CAAT,GACIF,SAAS,CAACpC,IAAI,CAACsC,IAAN,CAAT,CAAqBC,SAArB,GAAiCvC,IAAI,CAACuC,SAAtC,GACMH,SAAS,CAACpC,IAAI,CAACsC,IAAN,CADf,GAEMtC,IAHV;AAIH,aAND,MAMO;AAEHoC,cAAAA,SAAS,CAACpC,IAAI,CAACsC,IAAN,CAAT,GAAuBtC,IAAvB,CAFG,CAE0B;AAChC;AACJ,WAXD;AAaA,gBAAMwC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,GAAvB,CACd3C,IAAD,IAAUoC,SAAS,CAACpC,IAAD,CADJ,CAAnB,CAfc,CAkBd;AACA;;AACA,gBAAMpB,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEG,OAAR;AAAiBI,YAAAA,OAAO,EAAEL,SAAS,CAAC,EAAE,GAAG+C,UAAL;AAAiBA,cAAAA;AAAjB,aAAD,EAAgCzC,KAAhC;AAAnC,WAAD,CAAT;AACH;;AACD,cAAMhB,KAAK,CAAC,GAAD,CAAX,CA1BS,CA0BS;AACrB;AACJ,KA7BD,CA6BE,OAAOkB,CAAP,EAAU;AACR,YAAMrB,GAAG,CAAC;AAAEW,QAAAA,IAAI,EAAEI,KAAR;AAAeG,QAAAA,OAAO,EAAEG;AAAxB,OAAD,CAAT;AACH,KA/BD,SA+BU;AACN+B,MAAAA,aAAa,CAACH,KAAd,GADM,CACiB;AAC1B;AACJ,GA9CD;AA+CH,CAnDD;;AAsDA,SACIvC,iBADJ,EAEIY,cAFJ,EAGI6B,uBAHJ","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        const res = yield call(api, action.payload);\n        //console.log(post);\n        try {\n            //const res = yield call(api, action.payload);\n            const state = yield select();\n            //console.log(action.payload);\n            yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            // yield put(finishLoading(type));\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            // yield put(finishLoading(type));\n            throw e;\n        }\n    };\n};\n// requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n    return (state, action) => {\n        //console.log(state, action);\n        switch (action.type) {\n            case SUCCESS:\n                //console.log(15);\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\nconst createSocket = () => {\n    const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\n\n\n// 소켓 연결용\nconst connectSocekt = (socket, connectType, action, buffer) => {\n    //console.log(action.payload);\n    return eventChannel((emit) => {\n        socket.onopen = () => {\n            socket.send(\n                JSON.stringify([\n                    { ticket: \"coinbread-clone\" },\n                    { type: connectType, codes: action.payload },\n                ])\n            );\n        };\n\n        socket.onmessage = (evt) => {\n            const enc = new encoding.TextDecoder(\"utf-8\");\n            // const arr = new Uint8Array(evt.data);\n            const data = JSON.parse(enc.decode(evt.data));\n            //console.log(data);\n            emit(data);\n        };\n\n        socket.onerror = (evt) => {\n            emit(evt);\n            emit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        const client = yield call(createSocket);\n\n        //console.log(connectType, action);\n        const clientChannel = yield call(\n            connectSocekt,\n            client,\n            connectType,\n            action,\n            buffers.expanding(500)\n        );\n\n        try {\n            while (true) {\n                const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n                const state = yield select();\n\n                if (datas.length) {\n                    const sortedObj = {};\n                    datas.forEach((data) => {\n                        if (sortedObj[data.code]) {\n                            // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                            sortedObj[data.code] =\n                                sortedObj[data.code].timestamp > data.timestamp\n                                    ? sortedObj[data.code]\n                                    : data;\n                        } else {\n\n                            sortedObj[data.code] = data; // 새로운 데이터면 그냥 넣음\n                        }\n                    });\n\n                    const sortedData = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );\n                    //console.log(\"11\", sortedObj);\n                    //console.log(sortedData);\n                    yield put({ type: SUCCESS, payload: dataMaker({ ...sortedData, sortedData }, state) });\n                }\n                yield delay(500); // 500ms 동안 대기\n            }\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n        } finally {\n            clientChannel.close(); // emit(END) 접근시 소켓 닫기\n        }\n    };\n};\n\n\nexport {\n    createRequestSaga,\n    requestActions,\n    createConnectSocketSaga,\n}"]},"metadata":{},"sourceType":"module"}