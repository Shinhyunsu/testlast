{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\nimport { throttle } from \"lodash\";\nimport { coinReadDataUtils } from \"./utils\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    /*var res;\n    var ress;\n    if (type === \"GET_BITHUMB_MARKET_NAMES\") {\n        res = yield call(bithumbcoinApi.getKRWMarketCodes);\n        ress = yield call(bithumbcoinApi.getBTCMarketCodes);\n    }*/\n    //✅ 업비트\n    const res = yield call(api, action.payload);\n\n    try {\n      const state = yield select();\n      if (type === \"GET_UPBIT_MARKET_NAMES\") yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data, state)\n      });else if (type === \"GET_BITHUMB_MARKET_KRW_NAMES\" || type === \"GET_BITHUMB_MARKET_BTC_NAMES\") yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data.data, state)\n      });\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n      throw e;\n    }\n  };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    try {\n      const state = yield select();\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(action.payload, state)\n      });\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n      throw e;\n    }\n  };\n}; // requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    //console.log(state, action);\n    switch (action.type) {\n      case SUCCESS:\n        //console.log(15);\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\n\nconst createUpbitSocket = () => {\n  const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n};\n\nconst createBithumbSocket = () => {\n  const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n}; // 소켓 연결용\n\n\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n  //console.log(\"action\", action);\n  return eventChannel(emit => {\n    socket.onopen = () => {\n      //if (type === \"CONNECT_UPBIT_SOCKET\") {\n      socket.send(JSON.stringify([{\n        ticket: \"coinbread-clone\"\n      }, {\n        type: connectType,\n        codes: action\n      }])); //} \n\n      /*else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n          socket.send(\n              JSON.stringify(\n                  { type: connectType, symbols: action.payload, tickTypes: [\"MID\"] }\n              )\n          );\n      }*/\n    };\n\n    socket.onmessage = evt => {\n      //upbit\n      //console.log(\"upbit\", evt);\n      //if (type === \"CONNECT_UPBIT_SOCKET\") {\n      const enc = new encoding.TextDecoder(\"utf-8\");\n      const data = JSON.parse(enc.decode(evt.data));\n      emit(data); //} \n\n      /*else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n          emit(JSON.parse(evt.data));\n      }*/\n    };\n\n    socket.onerror = evt => {\n      emit(evt);\n      emit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst bitconnectSocekt = (socket, connectType, type, action, buffer) => {\n  //console.log(type);\n  return eventChannel(eemit => {\n    socket.onopen = () => {\n      socket.send(JSON.stringify({\n        type: connectType,\n        symbols: action,\n        tickTypes: [\"MID\"]\n      }));\n    };\n\n    socket.onmessage = evt => {\n      //console.log(evt.data);\n      eemit(JSON.parse(evt.data));\n    };\n\n    socket.onerror = evt => {\n      eemit(evt);\n      eemit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const state = yield select();\n    const upbitTotalNames = Object.keys(state.Coin.upbitTotalNames.data);\n    const bithumbTotalNames = Object.keys(state.Coin.bithumbTotalNames.data);\n    var client;\n    var bitclient;\n    var clientChannel; //✅ new\n\n    var bitclientChannel; //if (type === \"CONNECT_UPBIT_SOCKET\")\n\n    client = yield call(createUpbitSocket); //else if (type === \"CONNECT_BITHUMB_SOCKET\")\n\n    bitclient = yield call(createBithumbSocket); //console.log(upbitTotalNames);\n\n    clientChannel = yield call(connectSocekt, client, connectType, type, upbitTotalNames, buffers.expanding(500)); //✅ new\n\n    bitclientChannel = yield call(bitconnectSocekt, bitclient, connectType, type, bithumbTotalNames, buffers.expanding(500));\n\n    try {\n      while (true) {\n        const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n\n        const bitdatas = yield flush(bitclientChannel);\n        var sortedDATA;\n        var sortedData;\n\n        if (datas.length) {\n          var sortedObj = {};\n          datas.forEach(data => {\n            if (sortedObj[data.code]) {\n              // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n              sortedObj[data.code] = sortedObj[data.code].timestamp > data.timestamp ? sortedObj[data.code] : data;\n            } else {\n              sortedObj[data.code] = data;\n            } //console.log(data.code, \"|\", data);\n\n\n            sortedObj[data.code] = data;\n          });\n          sortedDATA = Object.keys(sortedObj).map(data => sortedObj[data]);\n          yield put({\n            type: SUCCESS,\n            payload: dataMaker(sortedDATA, state)\n          });\n        }\n\n        if (bitdatas.length) {\n          var sortedObj = {};\n          bitdatas.forEach(data => {\n            //console.log(data);\n\n            /* if (sortedObj[data.content]) {\n                 sortedObj[data.content] =\n                     sortedObj[data.content].time > data.time\n                         ? sortedObj[data.content]\n                         : data;\n             } else {\n                 sortedObj[data.content] = data;\n             }*/\n            //if(data.content)\n            var readData = JSON.parse(data.content);\n            console.log(readData, \"|\", data); //sortedObj[data.content.symbol] = data;\n          }); //console.log(\"3\", sortedObj);\n\n          /*sortedData = Object.keys(sortedObj).map(\n              (data) => sortedObj[data]\n          );*/\n\n          yield put({\n            type: SUCCESS,\n            payload: coinReadDataUtils.bithumbUpdates(sortedData, state)\n          }); //yield put({ type: SUCCESS, payload: coinListDataUtils.mixExchangeUpdates(sortedDATA, sortedData, state) });\n          //console.log(sortedData);\n        }\n\n        yield delay(500); // 500ms 동안 대기\n      }\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n    } finally {\n      clientChannel.close();\n    }\n  };\n};\n\nconst bitcreateConnectSocketSaga = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`; //console.log(\"11\");\n\n  return function* (action = {}) {\n    console.log(\"afsdf\");\n    /*var client;\n    var clientChannel;\n    if (type === \"CONNECT_UPBIT_SOCKET\")\n        client = yield call(createUpbitSocket);\n    else if (type === \"CONNECT_BITHUMB_SOCKET\")\n        client = yield call(createBithumbSocket);\n     clientChannel = yield call(\n        bitconnectSocekt,\n        client,\n        connectType,\n        type,\n        action,\n        buffers.expanding(500)\n    );\n     try {\n        while (true) {\n            const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n            const state = yield select();\n             if (datas.length) {\n                const sortedObj = {};\n                datas.forEach((data) => {\n                    if (type === \"CONNECT_UPBIT_SOCKET\") {\n                        if (sortedObj[data.code]) {\n                            // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                            sortedObj[data.code] =\n                                sortedObj[data.code].timestamp > data.timestamp\n                                    ? sortedObj[data.code]\n                                    : data;\n                        } else {\n                            sortedObj[data.code] = data;\n                        }\n                        sortedObj[data.code] = data;\n                    }\n                    else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n                        console.log(\"check\");\n                        if (sortedObj[data.content]) {\n                            sortedObj[data.content] =\n                                sortedObj[data.content].time > data.time\n                                    ? sortedObj[data.content]\n                                    : data;\n                        } else {\n                            sortedObj[data.content] = data;\n                        }\n                        sortedObj[data.content] = data;\n                    }\n                });\n                 const sortedData = Object.keys(sortedObj).map(\n                    (data) => sortedObj[data]\n                );\n                 yield put({ type: SUCCESS, payload: dataMaker(sortedData, state) });\n            }\n             yield delay(500); // 500ms 동안 대기\n        }\n    } catch (e) {\n        yield put({ type: ERROR, payload: e });\n    } finally {\n        clientChannel.close();\n    }*/\n    //};\n  };\n};\n\nconst connectBithumbSocketThunk = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  const throttleDispatch = throttle((dispatch, state, data) => {\n    dispatch({\n      type: SUCCESS,\n      payload: dataMaker(data, state)\n    });\n  }, 500);\n  return (action = {}) => (dispatch, getState) => {\n    const clientt = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n    clientt.binaryType = \"arraybuffer\";\n    console.log(\"645\");\n\n    clientt.onopen = () => {\n      clientt.send(JSON.stringify({\n        type: connectType,\n        symbols: action.payload,\n        tickTypes: [\"MID\"]\n      }));\n    };\n\n    clientt.onmessage = evt => {\n      /*const enc = new encoding.TextDecoder(\"utf-8\");\n      const arr = new Uint8Array(evt.data);\n      const data = JSON.parse(enc.decode(arr));\n      const state = getState();*/\n      console.log(evt); // dispatch({ type: SUCCESS, payload: dataMaker(data, state) });\n      //throttleDispatch(dispatch, state, data);\n    };\n\n    clientt.onerror = e => {\n      dispatch({\n        type: ERROR,\n        payload: e\n      });\n    };\n  };\n};\n\nexport { createRequestSaga, requestActions, createConnectSocketSaga, createInitRequestSaga, connectBithumbSocketThunk, bitcreateConnectSocketSaga };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","w3cwebsocket","W3CWebSocket","buffers","eventChannel","END","encoding","throttle","coinReadDataUtils","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","res","payload","state","data","e","createInitRequestSaga","requestActions","key","reducerUtils","success","error","createUpbitSocket","client","binaryType","createBithumbSocket","connectSocekt","socket","connectType","buffer","emit","onopen","send","JSON","stringify","ticket","codes","onmessage","evt","enc","TextDecoder","parse","decode","onerror","unsubscribe","close","none","bitconnectSocekt","eemit","symbols","tickTypes","createConnectSocketSaga","upbitTotalNames","Object","keys","Coin","bithumbTotalNames","bitclient","clientChannel","bitclientChannel","expanding","datas","bitdatas","sortedDATA","sortedData","length","sortedObj","forEach","code","timestamp","map","readData","content","console","log","bithumbUpdates","bitcreateConnectSocketSaga","connectBithumbSocketThunk","throttleDispatch","dispatch","getState","clientt"],"mappings":"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","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nimport { throttle } from \"lodash\";\nimport { coinReadDataUtils } from \"./utils\";\n\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        /*var res;\n        var ress;\n        if (type === \"GET_BITHUMB_MARKET_NAMES\") {\n            res = yield call(bithumbcoinApi.getKRWMarketCodes);\n            ress = yield call(bithumbcoinApi.getBTCMarketCodes);\n        }*/\n\n        //✅ 업비트\n        const res = yield call(api, action.payload);\n\n\n\n        try {\n            const state = yield select();\n            if (type === \"GET_UPBIT_MARKET_NAMES\")\n                yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            else if (type === \"GET_BITHUMB_MARKET_KRW_NAMES\" || type === \"GET_BITHUMB_MARKET_BTC_NAMES\")\n                yield put({ type: SUCCESS, payload: dataMaker(res.data.data, state) });\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            throw e;\n        }\n    };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        try {\n            const state = yield select();\n            yield put({ type: SUCCESS, payload: dataMaker(action.payload, state) });\n\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            throw e;\n        }\n    };\n};\n\n// requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n    return (state, action) => {\n        //console.log(state, action);\n        switch (action.type) {\n            case SUCCESS:\n                //console.log(15);\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\nconst createUpbitSocket = () => {\n    const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\nconst createBithumbSocket = () => {\n    const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\n\n\n// 소켓 연결용\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n    //console.log(\"action\", action);\n    return eventChannel((emit) => {\n        socket.onopen = () => {\n            //if (type === \"CONNECT_UPBIT_SOCKET\") {\n            socket.send(\n                JSON.stringify([\n                    { ticket: \"coinbread-clone\" },\n                    { type: connectType, codes: action },\n                ])\n            );\n            //} \n            /*else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n                socket.send(\n                    JSON.stringify(\n                        { type: connectType, symbols: action.payload, tickTypes: [\"MID\"] }\n                    )\n                );\n            }*/\n        };\n        socket.onmessage = (evt) => {\n            //upbit\n            //console.log(\"upbit\", evt);\n            //if (type === \"CONNECT_UPBIT_SOCKET\") {\n            const enc = new encoding.TextDecoder(\"utf-8\");\n            const data = JSON.parse(enc.decode(evt.data));\n            emit(data);\n            //} \n            /*else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n                emit(JSON.parse(evt.data));\n            }*/\n        };\n\n        socket.onerror = (evt) => {\n            emit(evt);\n            emit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst bitconnectSocekt = (socket, connectType, type, action, buffer) => {\n    //console.log(type);\n    return eventChannel((eemit) => {\n        socket.onopen = () => {\n            socket.send(\n                JSON.stringify(\n                    { type: connectType, symbols: action, tickTypes: [\"MID\"] }\n                )\n            );\n        };\n        socket.onmessage = (evt) => {\n            //console.log(evt.data);\n            eemit(JSON.parse(evt.data));\n        };\n\n        socket.onerror = (evt) => {\n            eemit(evt);\n            eemit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n\n\n    return function* (action = {}) {\n        const state = yield select();\n\n\n        const upbitTotalNames = Object.keys(state.Coin.upbitTotalNames.data);\n        const bithumbTotalNames = Object.keys(state.Coin.bithumbTotalNames.data);\n\n        var client;\n        var bitclient;\n        var clientChannel;\n        //✅ new\n        var bitclientChannel;\n\n        //if (type === \"CONNECT_UPBIT_SOCKET\")\n        client = yield call(createUpbitSocket);\n        //else if (type === \"CONNECT_BITHUMB_SOCKET\")\n        bitclient = yield call(createBithumbSocket);\n        //console.log(upbitTotalNames);\n        clientChannel = yield call(\n            connectSocekt,\n            client,\n            connectType,\n            type,\n            upbitTotalNames,\n            buffers.expanding(500)\n        );\n\n        //✅ new\n        bitclientChannel = yield call(\n            bitconnectSocekt,\n            bitclient,\n            connectType,\n            type,\n            bithumbTotalNames,\n            buffers.expanding(500)\n        );\n\n        try {\n            while (true) {\n                const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n                const bitdatas = yield flush(bitclientChannel);\n\n                var sortedDATA;\n                var sortedData;\n\n                if (datas.length) {\n                    var sortedObj = {};\n                    datas.forEach((data) => {\n                        if (sortedObj[data.code]) {\n                            // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                            sortedObj[data.code] =\n                                sortedObj[data.code].timestamp > data.timestamp\n                                    ? sortedObj[data.code]\n                                    : data;\n                        } else {\n                            sortedObj[data.code] = data;\n                        }\n                        //console.log(data.code, \"|\", data);\n                        sortedObj[data.code] = data;\n                    });\n                    sortedDATA = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );\n                    yield put({ type: SUCCESS, payload: dataMaker(sortedDATA, state) });\n                }\n                if (bitdatas.length) {\n\n                    var sortedObj = {};\n                    bitdatas.forEach((data) => {\n                        //console.log(data);\n                        /* if (sortedObj[data.content]) {\n                             sortedObj[data.content] =\n                                 sortedObj[data.content].time > data.time\n                                     ? sortedObj[data.content]\n                                     : data;\n                         } else {\n                             sortedObj[data.content] = data;\n                         }*/\n                        //if(data.content)\n                        var readData = JSON.parse(data.content);\n                        console.log(readData, \"|\", data);\n                        //sortedObj[data.content.symbol] = data;\n                    });\n                    //console.log(\"3\", sortedObj);\n                    /*sortedData = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );*/\n\n                    yield put({ type: SUCCESS, payload: coinReadDataUtils.bithumbUpdates(sortedData, state) });\n                    //yield put({ type: SUCCESS, payload: coinListDataUtils.mixExchangeUpdates(sortedDATA, sortedData, state) });\n                    //console.log(sortedData);\n                }\n\n\n\n\n                yield delay(500); // 500ms 동안 대기\n            }\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n        } finally {\n            clientChannel.close();\n        }\n    };\n};\n\n\nconst bitcreateConnectSocketSaga = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n    //console.log(\"11\");\n\n    return function* (action = {}) {\n\n        console.log(\"afsdf\");\n        /*var client;\n        var clientChannel;\n        if (type === \"CONNECT_UPBIT_SOCKET\")\n            client = yield call(createUpbitSocket);\n        else if (type === \"CONNECT_BITHUMB_SOCKET\")\n            client = yield call(createBithumbSocket);\n\n        clientChannel = yield call(\n            bitconnectSocekt,\n            client,\n            connectType,\n            type,\n            action,\n            buffers.expanding(500)\n        );\n\n        try {\n            while (true) {\n                const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n                const state = yield select();\n\n                if (datas.length) {\n                    const sortedObj = {};\n                    datas.forEach((data) => {\n                        if (type === \"CONNECT_UPBIT_SOCKET\") {\n                            if (sortedObj[data.code]) {\n                                // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                                sortedObj[data.code] =\n                                    sortedObj[data.code].timestamp > data.timestamp\n                                        ? sortedObj[data.code]\n                                        : data;\n                            } else {\n                                sortedObj[data.code] = data;\n                            }\n                            sortedObj[data.code] = data;\n                        }\n                        else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n                            console.log(\"check\");\n                            if (sortedObj[data.content]) {\n                                sortedObj[data.content] =\n                                    sortedObj[data.content].time > data.time\n                                        ? sortedObj[data.content]\n                                        : data;\n                            } else {\n                                sortedObj[data.content] = data;\n                            }\n                            sortedObj[data.content] = data;\n                        }\n                    });\n\n                    const sortedData = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );\n\n                    yield put({ type: SUCCESS, payload: dataMaker(sortedData, state) });\n                }\n\n                yield delay(500); // 500ms 동안 대기\n            }\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n        } finally {\n            clientChannel.close();\n        }*/\n        //};\n    }\n};\n\n\nconst connectBithumbSocketThunk = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    const throttleDispatch = throttle((dispatch, state, data) => {\n        dispatch({ type: SUCCESS, payload: dataMaker(data, state) });\n    }, 500);\n\n    return (action = {}) => (dispatch, getState) => {\n        const clientt = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n        clientt.binaryType = \"arraybuffer\";\n        console.log(\"645\");\n        clientt.onopen = () => {\n            clientt.send(JSON.stringify(\n                { type: connectType, symbols: action.payload, tickTypes: [\"MID\"] }\n            ));\n        };\n\n        clientt.onmessage = (evt) => {\n            /*const enc = new encoding.TextDecoder(\"utf-8\");\n            const arr = new Uint8Array(evt.data);\n            const data = JSON.parse(enc.decode(arr));\n            const state = getState();*/\n            console.log(evt);\n            // dispatch({ type: SUCCESS, payload: dataMaker(data, state) });\n            //throttleDispatch(dispatch, state, data);\n\n        };\n\n        clientt.onerror = (e) => {\n            dispatch({ type: ERROR, payload: e });\n        };\n    };\n};\n\n\nexport {\n    createRequestSaga,\n    requestActions,\n    createConnectSocketSaga,\n    createInitRequestSaga,\n    connectBithumbSocketThunk,\n    bitcreateConnectSocketSaga\n}"]},"metadata":{},"sourceType":"module"}