{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    console.log(\"123123\");\n    yield put(type);\n\n    try {\n      const res = yield call(api, action.payload);\n      const state = yield select();\n      console.log(res); // yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n      // yield put(finishLoading(type));\n    } catch (e) {\n      //yield put({ type: ERROR, payload: e });\n      // yield put(finishLoading(type));\n      throw e;\n    }\n  };\n};\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case SUCCESS:\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\nexport { createRequestSaga, requestActions };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","console","log","res","payload","state","e","requestActions","key","reducerUtils","success","error","data"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,KAAnC,QAAgD,oBAAhD;;AAGA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,GAAP,EAAYC,SAAZ,KAA0B;AAChD,QAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;AACA,QAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;AAEA,SAAO,WAAWK,MAAM,GAAG,EAApB,EAAwB;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMZ,GAAG,CAACK,IAAD,CAAT;;AACA,QAAI;AACA,YAAMQ,GAAG,GAAG,MAAMd,IAAI,CAACO,GAAD,EAAMI,MAAM,CAACI,OAAb,CAAtB;AACA,YAAMC,KAAK,GAAG,MAAMd,MAAM,EAA1B;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ,EAHA,CAIA;AACA;AACH,KAND,CAME,OAAOG,CAAP,EAAU;AACR;AACA;AACA,YAAMA,CAAN;AACH;AACJ,GAdD;AAeH,CAnBD;;AAqBA,MAAMC,cAAc,GAAG,CAACZ,IAAD,EAAOa,GAAP,KAAe;AAClC,QAAM,CAACV,OAAD,EAAUC,KAAV,IAAmB,CAAE,GAAEJ,IAAK,UAAT,EAAqB,GAAEA,IAAK,QAA5B,CAAzB;AACA,SAAO,CAACU,KAAD,EAAQL,MAAR,KAAmB;AACtB,YAAQA,MAAM,CAACL,IAAf;AACI,WAAKG,OAAL;AACI,eAAOW,YAAY,CAACC,OAAb,CAAqBL,KAArB,EAA4BL,MAAM,CAACI,OAAnC,EAA4CI,GAA5C,CAAP;;AACJ,WAAKT,KAAL;AACI,eAAOU,YAAY,CAACE,KAAb,CAAmBN,KAAnB,EAA0BL,MAAM,CAACI,OAAjC,EAA0CI,GAA1C,CAAP;;AACJ;AACI,eAAOH,KAAP;AANR;AAQH,GATD;AAUH,CAZD;;AAeA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CAACL,KAAD,EAAQD,OAAR,EAAiBI,GAAjB,KAAyB;AAC9B,WAAO,EACH,GAAGH,KADA;AAEH,OAACG,GAAD,GAAO;AACHI,QAAAA,IAAI,EAAER,OADH;AAEHO,QAAAA,KAAK,EAAE;AAFJ;AAFJ,KAAP;AAOH,GATgB;AAUjBA,EAAAA,KAAK,EAAE,CAACN,KAAD,EAAQM,KAAR,EAAeH,GAAf,MAAwB,EAC3B,GAAGH,KADwB;AAE3B,KAACG,GAAD,GAAO,EACH,GAAGH,KAAK,CAACG,GAAD,CADL;AAEHG,MAAAA,KAAK,EAAEA;AAFJ;AAFoB,GAAxB;AAVU,CAArB;AAqBA,SACIjB,iBADJ,EAEIa,cAFJ","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\n\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        console.log(\"123123\");\n        yield put(type);\n        try {\n            const res = yield call(api, action.payload);\n            const state = yield select();\n            console.log(res);\n            // yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            // yield put(finishLoading(type));\n        } catch (e) {\n            //yield put({ type: ERROR, payload: e });\n            // yield put(finishLoading(type));\n            throw e;\n        }\n    };\n};\n\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return (state, action) => {\n        switch (action.type) {\n            case SUCCESS:\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\n\n\nexport {\n    createRequestSaga,\n    requestActions,\n}"]},"metadata":{},"sourceType":"module"}