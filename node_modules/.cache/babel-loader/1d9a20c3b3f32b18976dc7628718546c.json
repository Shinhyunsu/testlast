{"ast":null,"code":"import CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = price => {\n  let data = parseFloat(price);\n\n  if (data < 1.0) {\n    return data.toFixed(8);\n  } else {\n    return data.toFixed(1);\n  }\n};\n\nconst coinListDataUtils = {\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name\n      };\n    });\n    return data;\n  },\n  upbitPriceNames: (names, state) => {\n    const coinStateDatas = state.Coin.upbitTotalNames.data;\n    names.forEach(name => {\n      if (name.market === 'DGB') {\n        console.log('dgb', pricereturnFloat(name.trade_price));\n      }\n\n      coinStateDatas[name.market] = {\n        korean: pricereturnFloat(name.trade_price)\n      };\n    });\n    return coinStateDatas;\n  },\n  binanceNames: names => {\n    const data = {};\n    names.forEach(name => {\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      }\n    });\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      data[name + \"_KRW\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      var sortOrder = [];\n      if (typeof nowPrice === 'string') nowPrice = pricereturnFloat(nowPrice);\n\n      if (coinStateDatas[shortSym]) {\n        Object.keys(coinStateDatas[shortSym]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === \"KRW\") {\n        if (sortOrder[0] === 'upbitSym') {\n          var calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice,\n          bithumbKRW_start_per: calper\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n      var sortOrder = [];\n      if (typeof nowPrice === 'string') nowPrice = pricereturnFloat(nowPrice);\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        };\n      } else if (moneySym === \"USDT\") {\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        var calper;\n\n        if (coinStateDatas[shortSym]) {\n          Object.keys(coinStateDatas[shortSym]).filter(list => {\n            if (list === 'upbitSym') {\n              sortOrder[0] = 'upbitSym';\n              return sortOrder;\n            } else if (list === 'upbitUSDT') {\n              sortOrder[1] = 'upbitUSDT';\n              return sortOrder;\n            } else if (list === 'upbitBTC') {\n              sortOrder[2] = 'upbitBTC';\n              return sortOrder;\n            }\n          });\n\n          if (!sortOrder[0]) {\n            sortOrder.splice(0, 1);\n          } else if (!sortOrder[1]) {\n            sortOrder.splice(1, 1);\n          }\n        }\n\n        if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitUSDT') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[1] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else {\n          calper = \"Prepare\";\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice,\n          upbitUSDT_start_per: calper,\n          calKoupbitUSDT: cal\n        };\n      } else if (moneySym === \"BTC\") {\n        var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n        var cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n        if (coinStateDatas[shortSym]) {\n          Object.keys(coinStateDatas[shortSym]).filter(list => {\n            if (list === 'upbitSym') {\n              sortOrder[0] = 'upbitSym';\n              return sortOrder;\n            } else if (list === 'upbitUSDT') {\n              sortOrder[1] = 'upbitUSDT';\n              return sortOrder;\n            } else if (list === 'upbitBTC') {\n              sortOrder[2] = 'upbitBTC';\n              return sortOrder;\n            }\n          });\n\n          if (!sortOrder[0] && !sortOrder[1]) {\n            sortOrder.splice(0, 2);\n          } else if (!sortOrder[0]) {\n            sortOrder.splice(0, 1);\n          } else if (!sortOrder[1]) {\n            sortOrder.splice(1, 1);\n          }\n        }\n\n        if (sortOrder[0] === 'upbitBTC') {\n          var calper = 'prepare'; //\n        } else if (sortOrder[0] === 'upbitSym') {\n          var calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice,\n          //!\n          calKoupbitBTC: cal,\n          upbitBTC_start_per: calper\n        };\n      }\n\n      if (coinStateDatas['BTC'].upbitPrice) {\n        //@\n        var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n        coinStateDatas['USDT'] = { ...coinStateDatas['USDT'],\n          upbitUSDT: 'USDTKRW',\n          upbitUSDTPrice: upbitusdtkrw\n        };\n      }\n    }); //✅ binance\n\n    three_names.forEach(name => {\n      let nowPrice = name.price;\n      var sortOrder = [];\n      if (name.symbol === 'MBLBTC' || name.symbol === 'TUSDBTC' || name.symbol === 'DAIBTC' || name.symbol === 'REPBUSD' || name.symbol === 'STORJBUSD' || name.symbol === 'DENTBTC' || name.symbol === 'MFTBTC' || name.symbol === 'SUNBTC' || name.symbol === 'BTTBTC') return coinStateDatas;\n      if (typeof nowPrice === 'string') nowPrice = pricereturnFloat(nowPrice);\n\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        var len = name.symbol.indexOf('BTC');\n        var coin = name.symbol.slice(0, len);\n        var cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1);\n\n        if (coinStateDatas[coin]) {\n          Object.keys(coinStateDatas[coin]).filter(list => {\n            if (list === 'upbitSym') {\n              sortOrder[0] = 'upbitSym';\n              return sortOrder;\n            } else if (list === 'upbitUSDT') {\n              sortOrder[1] = 'upbitUSDT';\n              return sortOrder;\n            } else if (list === 'upbitBTC') {\n              sortOrder[2] = 'upbitBTC';\n              return sortOrder;\n            }\n          });\n\n          if (!sortOrder[0] && !sortOrder[1]) {\n            sortOrder.splice(0, 2);\n          } else if (!sortOrder[0]) {\n            sortOrder.splice(0, 1);\n          } else if (!sortOrder[1]) {\n            sortOrder.splice(1, 1);\n          }\n        }\n\n        var calper;\n\n        if (sortOrder[0] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === \"upbitUSDT\") {\n          //calper = \"prepare\";\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBTCSym: name.symbol,\n            binanBTCPrice: nowPrice,\n            calKobinanBTC: cal,\n            binBTC_start_per: calper\n          };\n        }\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        var len = name.symbol.indexOf('USDT');\n        var coin = name.symbol.slice(0, len);\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        var calper;\n\n        if (coinStateDatas[coin]) {\n          Object.keys(coinStateDatas[coin]).filter(list => {\n            if (list === 'upbitSym') {\n              sortOrder[0] = 'upbitSym';\n              return sortOrder;\n            } else if (list === 'upbitUSDT') {\n              sortOrder[1] = 'upbitUSDT';\n              return sortOrder;\n            } else if (list === 'upbitBTC') {\n              sortOrder[2] = 'upbitBTC';\n              return sortOrder;\n            }\n          });\n\n          if (!sortOrder[0] && !sortOrder[1]) {\n            sortOrder.splice(0, 2);\n          } else if (!sortOrder[0]) {\n            sortOrder.splice(0, 1);\n          } else if (!sortOrder[1]) {\n            sortOrder.splice(1, 1);\n          }\n        }\n\n        if (sortOrder[0] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === \"upbitUSDT\") {\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanUSDTSym: name.symbol,\n            binanUSDTPrice: nowPrice,\n            calKoUSDT: cal,\n            //(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n            binUSDT_start_per: calper\n          };\n        }\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        var len = name.symbol.indexOf('BUSD');\n        var coin = name.symbol.slice(0, len);\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        var calper;\n\n        if (coinStateDatas[coin]) {\n          Object.keys(coinStateDatas[coin]).filter(list => {\n            if (list === 'upbitSym') {\n              sortOrder[0] = 'upbitSym';\n              return sortOrder;\n            } else if (list === 'upbitUSDT') {\n              sortOrder[1] = 'upbitUSDT';\n              return sortOrder;\n            } else if (list === 'upbitBTC') {\n              sortOrder[2] = 'upbitBTC';\n              return sortOrder;\n            }\n          });\n\n          if (!sortOrder[0] && !sortOrder[1]) {\n            sortOrder.splice(0, 2);\n          } else if (!sortOrder[0]) {\n            sortOrder.splice(0, 1);\n          } else if (!sortOrder[1]) {\n            sortOrder.splice(1, 1);\n          }\n        }\n\n        if (sortOrder[0] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === \"upbitUSDT\") {\n          calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBNBSym: name.symbol,\n            binanBNBPrice: nowPrice,\n            calKoBUSD: cal,\n            //(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n            binBUSD_start_per: calper //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n          };\n        }\n      }\n\n      if (name.symbol === 'BTCBUSD') {\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanBNBSym: name.symbol,\n          binanBNBPrice: nowPrice\n        };\n      } else if (name.symbol === 'BTCUSDT') {\n        var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanUSDTSym: name.symbol,\n          binanUSDTPrice: nowPrice,\n          calKoUSDT: cal,\n          per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n        };\n      }\n    }); //✅ Max per search\n\n    Object.keys(coinStateDatas).forEach(coin => {\n      var read = coinStateDatas[coin];\n      var keyread = Object.keys(read); // bithumbKRW_start_per\n      // binBUSD_start_per\n      // upbitBTC_start_per\n      // upbitUSDT_start_per\n      // BTCper\n      // binUSDT_start_per\n\n      var maxPer = 0.0;\n      var minPer = 0.0;\n      keyread.forEach(name => {\n        var per;\n\n        if (name === 'bithumbKRW_start_per') {\n          per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n        } else if (name === 'binBUSD_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n        } else if (name === 'upbitBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n        } else if (name === 'upbitUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n        } else if (name === 'BTCper') {\n          per = parseFloat(coinStateDatas[coin].BTCper);\n        } else if (name === 'binUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n        } else if (name === 'binBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n        }\n\n        if (per > maxPer) {\n          maxPer = per;\n        }\n\n        if (per < minPer) {\n          minPer = per;\n        }\n      });\n      coinStateDatas[coin] = { ...coinStateDatas[coin],\n        totalPer: maxPer,\n        totalminPer: minPer\n      };\n    });\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: (names, state) => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n\n      if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name\n        };\n      } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name\n        };\n      }\n    });\n    var upbitusdtkrw = (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1);\n    data['USDT'] = { ...data['USDT'],\n      upbitUSDTPrice: upbitusdtkrw,\n      upbitUSDT: 'USDTKRW'\n    };\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name,\n          imgsrc: imgsrc,\n          calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: names[name].korean,\n          upbitBTC: name,\n          imgsrc: imgsrc,\n          calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: names[name].korean,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: names[name].korean,\n          bithumbBTC: name,\n          calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    });\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/Lib/utils.js"],"names":["CoinMarketData","pricereturnFloat","price","data","parseFloat","toFixed","coinListDataUtils","upbitAllNames","names","forEach","name","market","korean","korean_name","upbitPriceNames","state","coinStateDatas","Coin","upbitTotalNames","console","log","trade_price","binanceNames","symbol","lastIndexOf","bithumbKRWNames","Object","keys","closing_price","bithumbBTCNames","bithumbTotalNames","coinReadDataUtils","mixExchangeUpdates","one_names","two_names","three_names","marketNames","shortSym","split","moneySym","nowPrice","closePrice","sortOrder","filter","list","splice","calper","upbitPrice","bithumbPrice","bithumbKRW_start_per","bithumbBTCPrice","code","cal","upbitUSDTPrice","calKoupbitBTC","upbitUSDT_start_per","calKoupbitUSDT","origin","upbitBTCPrice","upbitBTC_start_per","upbitusdtkrw","upbitUSDT","len","indexOf","coin","slice","binanBTCSym","binanBTCPrice","calKobinanBTC","binBTC_start_per","binanUSDTSym","binanUSDTPrice","calKoUSDT","binUSDT_start_per","binanBNBSym","binanBNBPrice","calKoBUSD","binBUSD_start_per","per","read","keyread","maxPer","minPer","BTCper","totalPer","totalminPer","upbitInitNames","upbitSym","imgsrc","find","upbitBTC","bithumbInitNames","bithumbSym","bithumbBTC","calKobithumbBTC"],"mappings":"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","sourcesContent":["import CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = (price) => {\n    let data = parseFloat(price);\n    if (data < 1.0) {\n        return data.toFixed(8);\n    }\n    else {\n        return data.toFixed(1);\n    }\n}\n\nconst coinListDataUtils = {\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n            };\n        })\n        return data;\n    },\n    upbitPriceNames: (names, state) => {\n        const coinStateDatas = state.Coin.upbitTotalNames.data;\n        names.forEach(name => {\n            if (name.market === 'DGB') {\n                console.log('dgb', pricereturnFloat(name.trade_price));\n            }\n            coinStateDatas[name.market] = {\n                korean: pricereturnFloat(name.trade_price),\n            };\n        })\n        return coinStateDatas;\n    },\n\n    binanceNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            }\n        })\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            data[name + \"_KRW\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n        Object.keys(names).forEach(name => {\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //✅ bithumb\n        two_names.forEach(name => {\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n            var sortOrder = [];\n            if (typeof (nowPrice) === 'string')\n                nowPrice = pricereturnFloat(nowPrice);\n\n            if (coinStateDatas[shortSym]) {\n                Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n            if (moneySym === \"KRW\") {\n                if (sortOrder[0] === 'upbitSym') {\n                    var calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2)\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice,\n                    bithumbKRW_start_per: calper\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        });\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n            var sortOrder = [];\n            if (typeof (nowPrice) === 'string')\n                nowPrice = pricereturnFloat(nowPrice);\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n            } else if (moneySym === \"USDT\") {\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                var calper;\n                if (coinStateDatas[shortSym]) {\n                    Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                        if (list === 'upbitSym') {\n                            sortOrder[0] = 'upbitSym';\n                            return sortOrder;\n                        } else if (list === 'upbitUSDT') {\n                            sortOrder[1] = 'upbitUSDT';\n                            return sortOrder;\n                        }\n                        else if (list === 'upbitBTC') {\n                            sortOrder[2] = 'upbitBTC';\n                            return sortOrder;\n                        }\n                    })\n                    if (!sortOrder[0]) {\n                        sortOrder.splice(0, 1);\n                    }\n                    else if (!sortOrder[1]) {\n                        sortOrder.splice(1, 1);\n                    }\n                }\n\n                if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitUSDT') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else if (sortOrder[1] === 'upbitBTC') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else {\n                    calper = \"Prepare\";\n                }\n\n\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice,\n\n                    upbitUSDT_start_per: calper,\n                    calKoupbitUSDT: cal\n                }\n            } else if (moneySym === \"BTC\") {\n                var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n                var cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n\n                if (coinStateDatas[shortSym]) {\n                    Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                        if (list === 'upbitSym') {\n                            sortOrder[0] = 'upbitSym';\n                            return sortOrder;\n                        } else if (list === 'upbitUSDT') {\n                            sortOrder[1] = 'upbitUSDT';\n                            return sortOrder;\n                        }\n                        else if (list === 'upbitBTC') {\n                            sortOrder[2] = 'upbitBTC';\n                            return sortOrder;\n                        }\n                    })\n                    if (!sortOrder[0] && !sortOrder[1]) {\n                        sortOrder.splice(0, 2);\n                    }\n                    else if (!sortOrder[0]) {\n                        sortOrder.splice(0, 1);\n                    }\n                    else if (!sortOrder[1]) {\n                        sortOrder.splice(1, 1);\n                    }\n                }\n\n                if (sortOrder[0] === 'upbitBTC') {\n                    var calper = 'prepare';\n                    //\n                } else if (sortOrder[0] === 'upbitSym') {\n                    var calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n                }\n\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice,\n                    //!\n                    calKoupbitBTC: cal,\n                    upbitBTC_start_per: calper\n                }\n            }\n\n            if (coinStateDatas['BTC'].upbitPrice) {\n                //@\n                var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n\n                coinStateDatas['USDT'] = {\n                    ...coinStateDatas['USDT'],\n\n                    upbitUSDT: 'USDTKRW',\n                    upbitUSDTPrice: upbitusdtkrw\n                }\n            }\n        });\n\n\n        //✅ binance\n        three_names.forEach(name => {\n            let nowPrice = name.price;\n            var sortOrder = [];\n\n            if (name.symbol === 'MBLBTC' || name.symbol === 'TUSDBTC' || name.symbol === 'DAIBTC' || name.symbol === 'REPBUSD' || name.symbol === 'STORJBUSD' || name.symbol === 'DENTBTC' || name.symbol === 'MFTBTC' || name.symbol === 'SUNBTC' || name.symbol === 'BTTBTC')\n                return coinStateDatas;\n            if (typeof (nowPrice) === 'string')\n                nowPrice = pricereturnFloat(nowPrice);\n\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                var len = name.symbol.indexOf('BTC');\n                var coin = name.symbol.slice(0, len);\n                var cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (coinStateDatas[coin]) {\n                    Object.keys(coinStateDatas[coin]).filter((list) => {\n                        if (list === 'upbitSym') {\n                            sortOrder[0] = 'upbitSym';\n                            return sortOrder;\n                        } else if (list === 'upbitUSDT') {\n                            sortOrder[1] = 'upbitUSDT';\n                            return sortOrder;\n                        }\n                        else if (list === 'upbitBTC') {\n                            sortOrder[2] = 'upbitBTC';\n                            return sortOrder;\n                        }\n                    })\n                    if (!sortOrder[0] && !sortOrder[1]) {\n                        sortOrder.splice(0, 2);\n                    }\n                    else if (!sortOrder[0]) {\n                        sortOrder.splice(0, 1);\n                    }\n                    else if (!sortOrder[1]) {\n                        sortOrder.splice(1, 1);\n                    }\n                }\n                var calper;\n                if (sortOrder[0] === 'upbitBTC') {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                }\n                else if (sortOrder[0] === \"upbitUSDT\") {\n                    //calper = \"prepare\";\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n                }\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBTCSym: name.symbol,\n                        binanBTCPrice: nowPrice,\n                        calKobinanBTC: cal,\n                        binBTC_start_per: calper\n                    }\n                }\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                var len = name.symbol.indexOf('USDT');\n\n                var coin = name.symbol.slice(0, len);\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                var calper;\n                if (coinStateDatas[coin]) {\n                    Object.keys(coinStateDatas[coin]).filter((list) => {\n                        if (list === 'upbitSym') {\n                            sortOrder[0] = 'upbitSym';\n                            return sortOrder;\n                        } else if (list === 'upbitUSDT') {\n                            sortOrder[1] = 'upbitUSDT';\n                            return sortOrder;\n                        }\n                        else if (list === 'upbitBTC') {\n                            sortOrder[2] = 'upbitBTC';\n                            return sortOrder;\n                        }\n                    })\n                    if (!sortOrder[0] && !sortOrder[1]) {\n                        sortOrder.splice(0, 2);\n                    }\n                    else if (!sortOrder[0]) {\n                        sortOrder.splice(0, 1);\n                    }\n                    else if (!sortOrder[1]) {\n                        sortOrder.splice(1, 1);\n                    }\n                }\n\n                if (sortOrder[0] === 'upbitBTC') {\n\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                }\n                else if (sortOrder[0] === \"upbitUSDT\") {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n                }\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanUSDTSym: name.symbol,\n                        binanUSDTPrice: nowPrice,\n                        calKoUSDT: cal,//(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                        binUSDT_start_per: calper,\n                    }\n                }\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                var len = name.symbol.indexOf('BUSD');\n                var coin = name.symbol.slice(0, len);\n\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                var calper;\n                if (coinStateDatas[coin]) {\n                    Object.keys(coinStateDatas[coin]).filter((list) => {\n                        if (list === 'upbitSym') {\n                            sortOrder[0] = 'upbitSym';\n                            return sortOrder;\n                        } else if (list === 'upbitUSDT') {\n                            sortOrder[1] = 'upbitUSDT';\n                            return sortOrder;\n                        }\n                        else if (list === 'upbitBTC') {\n                            sortOrder[2] = 'upbitBTC';\n                            return sortOrder;\n                        }\n                    })\n                    if (!sortOrder[0] && !sortOrder[1]) {\n                        sortOrder.splice(0, 2);\n                    }\n                    else if (!sortOrder[0]) {\n                        sortOrder.splice(0, 1);\n                    }\n                    else if (!sortOrder[1]) {\n                        sortOrder.splice(1, 1);\n                    }\n                }\n\n                if (sortOrder[0] === 'upbitBTC') {\n\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                }\n                else if (sortOrder[0] === \"upbitUSDT\") {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n                }\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBNBSym: name.symbol,\n                        binanBNBPrice: nowPrice,\n                        calKoBUSD: cal,//(parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                        binBUSD_start_per: calper,\n                        //calKoUSDT: (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                    }\n                }\n            }\n\n            if (name.symbol === 'BTCBUSD') {\n\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanBNBSym: name.symbol,\n                    binanBNBPrice: nowPrice\n\n                }\n            } else if (name.symbol === 'BTCUSDT') {\n                var cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanUSDTSym: name.symbol,\n                    binanUSDTPrice: nowPrice,\n                    calKoUSDT: cal,\n                    per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n                }\n            }\n        });\n\n        //✅ Max per search\n        Object.keys(coinStateDatas).forEach((coin) => {\n            var read = coinStateDatas[coin];\n            var keyread = Object.keys(read);\n\n            // bithumbKRW_start_per\n            // binBUSD_start_per\n            // upbitBTC_start_per\n            // upbitUSDT_start_per\n            // BTCper\n            // binUSDT_start_per\n\n            var maxPer = 0.0;\n            var minPer = 0.0;\n            keyread.forEach((name) => {\n                var per;\n                if (name === 'bithumbKRW_start_per') {\n                    per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n                }\n                else if (name === 'binBUSD_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n                } else if (name === 'upbitBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n                } else if (name === 'upbitUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n                } else if (name === 'BTCper') {\n                    per = parseFloat(coinStateDatas[coin].BTCper);\n                } else if (name === 'binUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n                }\n                else if (name === 'binBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n                }\n                if (per > maxPer) {\n                    maxPer = per;\n                }\n                if (per < minPer) {\n                    minPer = per;\n                }\n            })\n            coinStateDatas[coin] = {\n                ...coinStateDatas[coin],\n                totalPer: maxPer,\n                totalminPer: minPer\n            }\n        });\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names, state) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n\n            if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                }\n            } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                }\n            }\n        })\n\n        var upbitusdtkrw = (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1);\n\n        data['USDT'] = {\n            ...data['USDT'],\n            upbitUSDTPrice: upbitusdtkrw,\n            upbitUSDT: 'USDTKRW',\n        }\n\n        Object.keys(names).forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n\n\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc,\n                    calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n                }\n            } else if (moneySym === \"BTC\") {\n\n\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: names[name].korean,\n                    upbitBTC: name,\n                    imgsrc: imgsrc,\n                    calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: names[name].korean,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: names[name].korean,\n                    bithumbBTC: name,\n                    calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        })\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}