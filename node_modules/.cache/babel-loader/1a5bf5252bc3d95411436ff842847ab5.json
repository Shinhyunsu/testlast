{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const res = yield call(api, action.payload); //console.log(post);\n\n    try {\n      //const res = yield call(api, action.payload);\n      const state = yield select();\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data, state)\n      }); // yield put(finishLoading(type));\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      }); // yield put(finishLoading(type));\n\n      throw e;\n    }\n  };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    try {\n      const state = yield select();\n      const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(marketNames, state)\n      });\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n      throw e;\n    }\n  };\n}; // requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    //console.log(state, action);\n    switch (action.type) {\n      case SUCCESS:\n        //console.log(15);\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\n\nconst createUpbitSocket = () => {\n  const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n};\n\nconst createBithumbSocket = () => {\n  const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n}; // 소켓 연결용\n\n\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n  //console.log(type);\n  return eventChannel(emit => {\n    socket.onopen = () => {\n      if (type === \"CONNECT_UPBIT_SOCKET\") {\n        socket.send(JSON.stringify([{\n          ticket: \"coinbread-clone\"\n        }, {\n          type: connectType,\n          codes: action.payload\n        }]));\n      } else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n        socket.send(JSON.stringify([{\n          type: connectType,\n          symbols: [\"BTC_KRWW\"],\n          tickTypes: [\"MID\"]\n        }]));\n      }\n    };\n\n    socket.onmessage = evt => {\n      //upbit\n\n      /*const enc = new encoding.TextDecoder(\"utf-8\");\n      const data = JSON.parse(enc.decode(evt.data));\n      emit(data);*/\n      console.log(eve.data);\n    };\n\n    socket.onerror = evt => {\n      emit(evt);\n      emit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    var client;\n    var clientChannel;\n    if (type === \"CONNECT_UPBIT_SOCKET\") client = yield call(createUpbitSocket);else if (type === \"CONNECT_BITHUMB_SOCKET\") client = yield call(createBithumbSocket);\n    clientChannel = yield call(connectSocekt, client, connectType, type, action, buffers.expanding(500));\n\n    try {\n      while (true) {\n        const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n\n        const state = yield select();\n\n        if (datas.length) {\n          const sortedObj = {};\n          datas.forEach(data => {\n            if (sortedObj[data.code]) {\n              // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n              sortedObj[data.code] = sortedObj[data.code].timestamp > data.timestamp ? sortedObj[data.code] : data;\n            } else {\n              sortedObj[data.code] = data;\n            }\n\n            sortedObj[data.code] = data;\n          });\n          const sortedData = Object.keys(sortedObj).map(data => sortedObj[data]);\n          yield put({\n            type: SUCCESS,\n            payload: dataMaker(sortedData, state)\n          });\n        }\n\n        yield delay(500); // 500ms 동안 대기\n      }\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      });\n    } finally {\n      clientChannel.close();\n    }\n  };\n};\n\nexport { createRequestSaga, requestActions, createConnectSocketSaga, createInitRequestSaga };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","w3cwebsocket","W3CWebSocket","buffers","eventChannel","END","encoding","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","res","payload","state","data","e","createInitRequestSaga","marketNames","Object","keys","Coin","upbitTotalNames","requestActions","key","reducerUtils","success","error","createUpbitSocket","client","binaryType","createBithumbSocket","connectSocekt","socket","connectType","buffer","emit","onopen","send","JSON","stringify","ticket","codes","symbols","tickTypes","onmessage","evt","console","log","eve","onerror","unsubscribe","close","none","createConnectSocketSaga","clientChannel","expanding","datas","length","sortedObj","forEach","code","timestamp","sortedData","map"],"mappings":"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","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\nimport encoding from \"text-encoding\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        const res = yield call(api, action.payload);\n        //console.log(post);\n        try {\n            //const res = yield call(api, action.payload);\n            const state = yield select();\n            yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            // yield put(finishLoading(type));\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            // yield put(finishLoading(type));\n            throw e;\n        }\n    };\n};\n\nconst createInitRequestSaga = (type, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        try {\n            const state = yield select();\n            const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n\n            yield put({ type: SUCCESS, payload: dataMaker(marketNames, state) });\n\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            throw e;\n        }\n    };\n};\n\n// requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n    return (state, action) => {\n        //console.log(state, action);\n        switch (action.type) {\n            case SUCCESS:\n                //console.log(15);\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\nconst createUpbitSocket = () => {\n    const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\nconst createBithumbSocket = () => {\n    const client = new W3CWebSocket(\"wss://pubwss.bithumb.com/pub/ws\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\n\n\n// 소켓 연결용\nconst connectSocekt = (socket, connectType, type, action, buffer) => {\n    //console.log(type);\n    return eventChannel((emit) => {\n        socket.onopen = () => {\n            if (type === \"CONNECT_UPBIT_SOCKET\") {\n                socket.send(\n                    JSON.stringify([\n                        { ticket: \"coinbread-clone\" },\n                        { type: connectType, codes: action.payload },\n                    ])\n                );\n            } else if (type === \"CONNECT_BITHUMB_SOCKET\") {\n                socket.send(\n                    JSON.stringify([\n                        { type: connectType, symbols: [\"BTC_KRWW\"], tickTypes: [\"MID\"] },\n                    ])\n                );\n            }\n        };\n        socket.onmessage = (evt) => {\n            //upbit\n            /*const enc = new encoding.TextDecoder(\"utf-8\");\n            const data = JSON.parse(enc.decode(evt.data));\n            emit(data);*/\n\n            console.log(eve.data);\n        };\n\n        socket.onerror = (evt) => {\n            emit(evt);\n            emit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\nconst createConnectSocketSaga = (type, connectType, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        var client;\n        var clientChannel;\n        if (type === \"CONNECT_UPBIT_SOCKET\")\n            client = yield call(createUpbitSocket);\n        else if (type === \"CONNECT_BITHUMB_SOCKET\")\n            client = yield call(createBithumbSocket);\n\n        clientChannel = yield call(\n            connectSocekt,\n            client,\n            connectType,\n            type,\n            action,\n            buffers.expanding(500)\n        );\n\n        try {\n            while (true) {\n                const datas = yield flush(clientChannel); // 버퍼 데이터 가져오기\n                const state = yield select();\n\n                if (datas.length) {\n                    const sortedObj = {};\n                    datas.forEach((data) => {\n                        if (sortedObj[data.code]) {\n                            // 버퍼에 있는 데이터중 시간이 가장 최근인 데이터만 남김\n                            sortedObj[data.code] =\n                                sortedObj[data.code].timestamp > data.timestamp\n                                    ? sortedObj[data.code]\n                                    : data;\n                        } else {\n                            sortedObj[data.code] = data;\n                        }\n                        sortedObj[data.code] = data;\n                    });\n\n                    const sortedData = Object.keys(sortedObj).map(\n                        (data) => sortedObj[data]\n                    );\n                    yield put({ type: SUCCESS, payload: dataMaker(sortedData, state) });\n                }\n                yield delay(500); // 500ms 동안 대기\n            }\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n        } finally {\n            clientChannel.close();\n        }\n    };\n};\n\n\nexport {\n    createRequestSaga,\n    requestActions,\n    createConnectSocketSaga,\n    createInitRequestSaga,\n}"]},"metadata":{},"sourceType":"module"}