{"ast":null,"code":"import axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = price => {\n  let data = parseFloat(price);\n\n  if (data < 1.0) {\n    return data.toFixed(8);\n  } else {\n    return data.toFixed(1);\n  }\n};\n\nconst coinListDataUtils = {\n  kucoinAllNames: names => {\n    names.forEach(coinlist => {\n      var coinName = coinlist.symbol.split('-')[0];\n      var type = coinlist.symbol.split('-')[1];\n      var newCoin = false;\n\n      if (type !== 'ETH') {\n        CoinMarketData.find(name => {\n          if (name.symbol === coinName) {\n            newCoin = true;\n          }\n        });\n\n        if (newCoin === false) {\n          console.log(coinName, type);\n        }\n      }\n    });\n  },\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name\n      };\n    });\n    return data;\n  },\n  upbitPriceNames: (names, state) => {\n    const coinStateDatas = state.Coin.upbitTotalNames.data;\n    names.forEach(name => {\n      coinStateDatas[name.market] = {\n        korean: pricereturnFloat(name.trade_price)\n      };\n    });\n    return coinStateDatas;\n  },\n  binanceNames: names => {\n    const data = {};\n    names.forEach(name => {\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        data[name.symbol] = {\n          korean: name.price\n        };\n      }\n    });\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {};\n    Object.keys(names).forEach(name => {\n      data[name + \"_KRW\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: pricereturnFloat(names[name].closing_price)\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    const TOPmarketNames = state.Coin.TOPmarketNames;\n    const TOPmarketString = state.Coin.TOPmarketString; //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = pricereturnFloat(name.closePrice);\n      var sortOrder = [];\n      var cal, calper;\n\n      if (coinStateDatas[shortSym]) {\n        Object.keys(coinStateDatas[shortSym]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === \"KRW\") {\n        if (sortOrder[0] === 'upbitSym') {\n          calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice,\n          bithumbKRW_start_per: calper\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice,\n          calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].bithumbPrice) * parseFloat(nowPrice)).toFixed(1)\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = pricereturnFloat(name.trade_price);\n      var sortOrder = [];\n      var cal, calper;\n\n      if (coinStateDatas[shortSym]) {\n        Object.keys(coinStateDatas[shortSym]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0] && !sortOrder[1]) {\n          sortOrder.splice(0, 2);\n        } else if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        };\n      } else if (moneySym === \"USDT\") {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n        if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        } else if (sortOrder[0] === 'upbitUSDT') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else if (sortOrder[1] === 'upbitBTC') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2);\n        } else {\n          calper = \"Prepare\";\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice,\n          upbitUSDT_start_per: calper,\n          calKoupbitUSDT: cal\n        };\n      } else if (moneySym === \"BTC\") {\n        var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n        cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n        if (sortOrder[0] === 'upbitBTC') {\n          calper = 'prepare';\n        } else if (sortOrder[0] === 'upbitSym') {\n          calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n        }\n\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice,\n          //!\n          calKoupbitBTC: cal,\n          upbitBTC_start_per: calper\n        };\n      }\n\n      if (coinStateDatas['BTC'].upbitPrice) {\n        //@\n        var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n        coinStateDatas['USDT'] = { ...coinStateDatas['USDT'],\n          upbitUSDT: 'USDTKRW',\n          upbitUSDTPrice: upbitusdtkrw\n        };\n      }\n    }); //✅ binance\n\n    three_names.forEach(name => {\n      let nowPrice = pricereturnFloat(name.price);\n      var sortOrder = [];\n      var len, cal, calper, coin;\n      let moneySym;\n      let exceptionArr = ['VENUSDT', 'VENBTC',, 'MBLBTC', 'TUSDBTC', 'DAIBTC', 'REPBUSD', 'STORJBUSD', 'DENTBTC', 'MFTBTC', 'SUNBTC', 'BTTBTC', 'COCOSBTC', 'PAXBTC', 'PAXUSDT', 'PAXBUSD', 'BCHSVBTC', 'BCHSVUSDT', 'BCCBTC', 'BCCUSDT', 'HOTBTC', 'BCHABCBTC', 'BCHABCUSDT', 'BCHABCBUSD', 'STORMBTC', 'STORMUSDT', 'LENDBTC', 'LENDUSDT', 'LENDBUSD', 'ERDBTC', 'ERDUSDT', 'ERDBUSD', 'MCOBTC', 'MCOUSDT', 'STRATBTC', 'STRATUSDT', 'STRATBUSD', 'VTHOBUSD', 'DCRBUSD', 'NPXSBTC', 'NPXSUSDT', 'BLZBUSD', 'WNXMBUSD', 'AIONBUSD', 'KMDBUSD', 'XZCBT', 'XZCUSDT', 'IRISBUSD', 'HCBTC', 'HCUSDT', 'KEYBTC', 'KEYUSDT', 'TROYBTC', 'SUSDBTC', 'TRUBUSD', 'BOOTBTC', 'BOTBUSD', 'PXGBUSD', 'BTSBUSD', 'RENBTCBTC', 'RENBTCETH'];\n      let exceptionflag = false;\n      exceptionArr.map(symbolName => {\n        if (name.symbol === symbolName) {\n          exceptionflag = true;\n          return;\n        }\n      });\n      if (exceptionflag === true) return coinStateDatas;\n\n      if (name.symbol.lastIndexOf('BTC') !== -1) {\n        len = name.symbol.indexOf('BTC');\n        moneySym = 'BTC';\n      } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n        len = name.symbol.indexOf('USDT');\n        moneySym = 'USDT';\n      } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n        len = name.symbol.indexOf('BUSD');\n        moneySym = 'BUSD';\n      }\n\n      coin = name.symbol.slice(0, len);\n\n      if (coinStateDatas[coin]) {\n        Object.keys(coinStateDatas[coin]).filter(list => {\n          if (list === 'upbitSym') {\n            sortOrder[0] = 'upbitSym';\n            return sortOrder;\n          } else if (list === 'upbitUSDT') {\n            sortOrder[1] = 'upbitUSDT';\n            return sortOrder;\n          } else if (list === 'upbitBTC') {\n            sortOrder[2] = 'upbitBTC';\n            return sortOrder;\n          }\n        });\n\n        if (!sortOrder[0] && !sortOrder[1]) {\n          sortOrder.splice(0, 2);\n        } else if (!sortOrder[0]) {\n          sortOrder.splice(0, 1);\n        } else if (!sortOrder[1]) {\n          sortOrder.splice(1, 1);\n        }\n      }\n\n      if (moneySym === 'BTC') {\n        cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBTCSym: name.symbol,\n            binanBTCPrice: nowPrice,\n            calKobinanBTC: cal,\n            binBTC_start_per: calper\n          };\n        }\n      } else if (moneySym === 'USDT') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanUSDTSym: name.symbol,\n            binanUSDTPrice: nowPrice,\n            calKoUSDT: cal,\n            binUSDT_start_per: calper\n          };\n        }\n      } else if (moneySym === 'BUSD') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        if (sortOrder[0] === 'upbitBTC') calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2);else if (sortOrder[0] === \"upbitUSDT\") calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2);else if (sortOrder[0] === 'upbitSym') calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2);\n\n        if (coin !== \"\") {\n          coinStateDatas[coin] = { ...coinStateDatas[coin],\n            binanBNBSym: name.symbol,\n            binanBNBPrice: nowPrice,\n            calKoBUSD: cal,\n            binBUSD_start_per: calper\n          };\n        }\n      } //📌 EXCEPTION\n\n\n      if (name.symbol === 'BTCBUSD') {\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanBNBSym: name.symbol,\n          binanBNBPrice: nowPrice\n        };\n      } else if (name.symbol === 'BTCUSDT') {\n        cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n        coinStateDatas['BTC'] = { ...coinStateDatas['BTC'],\n          binanUSDTSym: name.symbol,\n          binanUSDTPrice: nowPrice,\n          calKoUSDT: cal,\n          per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n        };\n      }\n    }); //✅ Max per search\n\n    Object.keys(coinStateDatas).forEach(coin => {\n      var read = coinStateDatas[coin];\n      var keyread = Object.keys(read);\n      var maxPer = 0.0;\n      var minPer = 0.0;\n      keyread.forEach(name => {\n        var per;\n\n        if (name === 'bithumbKRW_start_per') {\n          per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n        } else if (name === 'binBUSD_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n        } else if (name === 'upbitBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n        } else if (name === 'upbitUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n        } else if (name === 'BTCper') {\n          per = parseFloat(coinStateDatas[coin].BTCper);\n        } else if (name === 'binUSDT_start_per') {\n          per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n        } else if (name === 'binBTC_start_per') {\n          per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n        }\n\n        if (per > maxPer) {\n          maxPer = per;\n        }\n\n        if (per < minPer) {\n          minPer = per;\n        }\n      });\n      coinStateDatas[coin] = { ...coinStateDatas[coin],\n        totalPer: maxPer,\n        totalminPer: minPer\n      };\n    }); //📦 v2\n\n    Object.keys(coinStateDatas).forEach(coin => {\n      var read = coinStateDatas[coin];\n      var keyread = Object.keys(read);\n      var maxPer = 0.0;\n      var minPer = Number.MAX_SAFE_INTEGER;\n      var sortExchange = [];\n      var exchange;\n      var lastminExchange, lastmaxExchange;\n      keyread.forEach(name => {\n        var price;\n\n        if (name === 'upbitPrice') {\n          price = parseFloat(coinStateDatas[coin].upbitPrice);\n          sortExchange.push('upbit');\n          exchange = 'upbitWithdraw';\n        } else if (name === 'bithumbPrice') {\n          price = parseFloat(coinStateDatas[coin].bithumbPrice);\n          sortExchange.push('bithumb');\n          exchange = 'bithumbWithdraw';\n        } else if (name === 'calKoupbitBTC') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n          sortExchange.push('upbit');\n          exchange = 'upbitWithdraw';\n        } else if (name === 'calKobithumbBTC') {\n          price = parseFloat(coinStateDatas[coin].calKobithumbBTC); //ok\n\n          sortExchange.push('bithumb');\n          exchange = 'bithumbWithdraw';\n        } else if (name === 'calKobinanBTC') {\n          price = parseFloat(coinStateDatas[coin].calKobinanBTC);\n          sortExchange.push('binance');\n          exchange = 'binanceWithdraw';\n        } else if (name === 'calKoupbitUSDT') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitUSDT);\n          sortExchange.push('upbit');\n        } else if (name === 'calKoUSDT') {\n          price = parseFloat(coinStateDatas[coin].calKoUSDT);\n          sortExchange.push('binance');\n          exchange = 'binanceWithdraw';\n        } else if (name === 'calKoBUSD') {\n          price = parseFloat(coinStateDatas[coin].calKoBUSD);\n          sortExchange.push('binance');\n          exchange = 'binanceWithdraw';\n        } else if (name === 'calKoupbitBTC') {\n          price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n          sortExchange.push('upbit');\n          exchange = 'upbitWithdraw';\n        }\n\n        if (price > maxPer) {\n          maxPer = price;\n          lastmaxExchange = exchange;\n        }\n\n        if (price < minPer) {\n          minPer = price;\n          lastminExchange = exchange;\n        }\n      });\n      sortExchange = Array.from(new Set(sortExchange));\n      /*\n      if (coin === 'MKR') {\n          console.log('MKR price check', minPer, maxPer, lastminExchange, lastmaxExchange);\n      }\n      */\n\n      var result = 0.0;\n\n      if (sortExchange.length <= 1) {\n        minPer = 0;\n        maxPer = 0;\n        result = 0;\n      } else {\n        CoinMarketData.find(name => {\n          if (name.symbol === coin) {\n            if (lastminExchange === 'bithumbWithdraw' && lastmaxExchange === 'bithumbWithdraw') {\n              minPer = 0;\n              maxPer = 0;\n              result = 0;\n              return;\n            } else if (lastminExchange === 'upbitWithdraw') {\n              if (name.upbitWithdraw !== 'NO') minPer = parseFloat(name.upbitWithdraw) * parseFloat(minPer) + minPer;else {\n                minPer = 0;\n                maxPer = 0;\n                result = 0;\n                return;\n              }\n            } else if (lastminExchange === 'bithumbWithdraw') {\n              minPer = parseFloat(name.bithumbWithdraw) * parseFloat(minPer) + minPer;\n            } else if (lastminExchange === 'binanceWithdraw') {\n              if (name.upbitWithdraw !== 'NO') minPer = parseFloat(name.binanceWithdraw) * parseFloat(minPer) + minPer;else {\n                minPer = 0;\n                maxPer = 0;\n                result = 0;\n                return;\n              }\n            }\n          }\n        });\n        if (!(minPer <= 0 || maxPer === 0)) result = ((maxPer - minPer) / minPer * 100).toFixed(1);else {\n          result = 0;\n        }\n      }\n\n      coinStateDatas[coin] = { ...coinStateDatas[coin],\n        testper: result,\n        symbol: coin\n      };\n    }); //!\n\n    TOPmarketNames.splice(0);\n    var coinStateCount = 0;\n    var coinStringMake = \"\";\n    Object.keys(coinStateDatas).forEach(coinOne => {\n      if (coinStateDatas[coinOne].testper > 0) {\n        coinStringMake += coinOne + \",\";\n        var dataFactory = [];\n        var keyread = Object.keys(coinStateDatas[coinOne]);\n        var arrCount = 0;\n        keyread.forEach(name => {\n          if (name === 'upbitPrice') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].upbitSym,\n              'exchange': 'upbit',\n              'OriginPrice': coinStateDatas[coinOne].upbitPrice,\n              'KrwPrice': coinStateDatas[coinOne].upbitPrice\n            };\n            arrCount++;\n          } else if (name === 'bithumbSym') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].bithumbSym,\n              'exchange': 'bithumb',\n              'OriginPrice': coinStateDatas[coinOne].bithumbPrice,\n              'KrwPrice': coinStateDatas[coinOne].bithumbPrice\n            };\n            arrCount++;\n          } else if (name === 'calKoupbitBTC') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].upbitBTC,\n              'exchange': 'upbit',\n              'OriginPrice': coinStateDatas[coinOne].upbitBTCPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKoupbitBTC\n            };\n            arrCount++;\n          } else if (name === 'calKobithumbBTC') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].bithumbBTC,\n              'exchange': 'bithumb',\n              'OriginPrice': coinStateDatas[coinOne].bithumbBTCPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKobinanBTC\n            };\n            arrCount++;\n          } else if (name === 'calKoupbitUSDT') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].upbitUSDT,\n              'exchange': 'upbit',\n              'OriginPrice': coinStateDatas[coinOne].upbitUSDTPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKoupbitUSDT\n            };\n            arrCount++;\n          } else if (name === 'calKobinanBTC') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].binanBTCSym,\n              'exchange': 'binance',\n              'OriginPrice': coinStateDatas[coinOne].binanBTCPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKobinanBTC\n            };\n            arrCount++;\n          } else if (name === 'calKoUSDT') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].binanUSDTSym,\n              'exchange': 'binance',\n              'OriginPrice': coinStateDatas[coinOne].binanUSDTPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKoUSDT\n            };\n            arrCount++;\n          } else if (name === 'calKoBUSD') {\n            dataFactory[arrCount] = {\n              'MainSym': coinOne,\n              'sym': coinStateDatas[coinOne].binanBNBSym,\n              'exchange': 'binance',\n              'OriginPrice': coinStateDatas[coinOne].binanBNBPrice,\n              'KrwPrice': coinStateDatas[coinOne].calKoBUSD\n            };\n            arrCount++;\n          }\n        }); //console.log('before', dataFactory); //1 2 3 4 5 \n\n        dataFactory = dataFactory.sort((next, prev) => {\n          if (parseFloat(next.KrwPrice) > parseFloat(prev.KrwPrice)) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n        TOPmarketNames[coinStateCount] = dataFactory; //coinStateDatas[coinOne]\n\n        coinStateCount++;\n      }\n    });\n    TOPmarketString[0] = {\n      'ALL': coinStringMake\n    };\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: (names, state) => {\n    var stringdd = \"\";\n    CoinMarketData.find(name => {\n      stringdd += name.symbol + \" \";\n    });\n    const data = {};\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n\n      if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name\n        };\n      } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name\n        };\n      }\n    });\n    data['USDT'] = { ...data['USDT'],\n      upbitUSDTPrice: (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1),\n      upbitUSDT: 'USDTKRW'\n    };\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: names[name].korean,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: names[name].korean,\n          upbitUSDT: name,\n          imgsrc: imgsrc,\n          calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: names[name].korean,\n          upbitBTC: name,\n          imgsrc: imgsrc,\n          calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    Object.keys(names).forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: names[name].korean,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: names[name].korean,\n          bithumbBTC: name,\n          calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n        };\n      }\n    }); //!\n\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/Lib/utils.js"],"names":["axios","CoinMarketData","pricereturnFloat","price","data","parseFloat","toFixed","coinListDataUtils","kucoinAllNames","names","forEach","coinlist","coinName","symbol","split","type","newCoin","find","name","console","log","upbitAllNames","market","korean","korean_name","upbitPriceNames","state","coinStateDatas","Coin","upbitTotalNames","trade_price","binanceNames","lastIndexOf","bithumbKRWNames","Object","keys","closing_price","bithumbBTCNames","bithumbTotalNames","coinReadDataUtils","mixExchangeUpdates","one_names","two_names","three_names","marketNames","TOPmarketNames","TOPmarketString","shortSym","moneySym","nowPrice","closePrice","sortOrder","cal","calper","filter","list","splice","upbitPrice","bithumbPrice","bithumbKRW_start_per","bithumbBTCPrice","calKobithumbBTC","code","upbitUSDTPrice","calKoupbitBTC","upbitUSDT_start_per","calKoupbitUSDT","origin","upbitBTCPrice","upbitBTC_start_per","upbitusdtkrw","upbitUSDT","len","coin","exceptionArr","exceptionflag","map","symbolName","indexOf","slice","binanBTCSym","binanBTCPrice","calKobinanBTC","binBTC_start_per","binanUSDTSym","binanUSDTPrice","calKoUSDT","binUSDT_start_per","binanBNBSym","binanBNBPrice","calKoBUSD","binBUSD_start_per","per","read","keyread","maxPer","minPer","BTCper","totalPer","totalminPer","Number","MAX_SAFE_INTEGER","sortExchange","exchange","lastminExchange","lastmaxExchange","push","Array","from","Set","result","length","upbitWithdraw","bithumbWithdraw","binanceWithdraw","testper","coinStateCount","coinStringMake","coinOne","dataFactory","arrCount","upbitSym","bithumbSym","upbitBTC","bithumbBTC","sort","next","prev","KrwPrice","upbitInitNames","stringdd","imgsrc","bithumbInitNames"],"mappings":"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","sourcesContent":["\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst pricereturnFloat = (price) => {\n    let data = parseFloat(price);\n    if (data < 1.0) {\n        return data.toFixed(8);\n    }\n    else {\n        return data.toFixed(1);\n    }\n}\n\nconst coinListDataUtils = {\n    kucoinAllNames: (names) => {\n        names.forEach(coinlist => {\n            var coinName = coinlist.symbol.split('-')[0];\n            var type = coinlist.symbol.split('-')[1];\n\n            var newCoin = false;\n            if (type !== 'ETH') {\n                CoinMarketData.find((name) => {\n                    if (name.symbol === coinName) {\n                        newCoin = true;\n                    }\n                });\n                if (newCoin === false) {\n                    console.log(coinName, type);\n                }\n            }\n        });\n    },\n\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n            };\n        })\n        return data;\n    },\n    upbitPriceNames: (names, state) => {\n        const coinStateDatas = state.Coin.upbitTotalNames.data;\n        names.forEach(name => {\n            coinStateDatas[name.market] = {\n                korean: pricereturnFloat(name.trade_price),\n            };\n        })\n        return coinStateDatas;\n    },\n\n    binanceNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                data[name.symbol] = {\n                    korean: name.price\n                };\n            }\n        })\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        Object.keys(names).forEach(name => {\n            data[name + \"_KRW\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n        Object.keys(names).forEach(name => {\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: pricereturnFloat(names[name].closing_price),\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    mixExchangeUpdates: (one_names, two_names, three_names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        const TOPmarketNames = state.Coin.TOPmarketNames;\n        const TOPmarketString = state.Coin.TOPmarketString;\n        //✅ bithumb\n        two_names.forEach(name => {\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = pricereturnFloat(name.closePrice);\n            var sortOrder = [];\n            var cal, calper;\n\n            if (coinStateDatas[shortSym]) {\n                Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n            if (moneySym === \"KRW\") {\n\n                if (sortOrder[0] === 'upbitSym') {\n                    calper = ((nowPrice - parseFloat(coinStateDatas[shortSym].upbitPrice)) / nowPrice * 100).toFixed(2)\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice,\n                    bithumbKRW_start_per: calper\n                }\n\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice,\n                    calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].bithumbPrice) * parseFloat(nowPrice)).toFixed(1)\n                }\n            }\n        });\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = pricereturnFloat(name.trade_price);\n            var sortOrder = [];\n            var cal, calper;\n\n            if (coinStateDatas[shortSym]) {\n                Object.keys(coinStateDatas[shortSym]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0] && !sortOrder[1]) {\n                    sortOrder.splice(0, 2);\n                }\n                else if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n            } else if (moneySym === \"USDT\") {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2)\n                } else if (sortOrder[0] === 'upbitUSDT') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else if (sortOrder[1] === 'upbitBTC') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].calKoupbitBTC)) / cal * 100).toFixed(2)\n                } else {\n                    calper = \"Prepare\";\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice,\n\n                    upbitUSDT_start_per: calper,\n                    calKoupbitUSDT: cal\n                }\n            } else if (moneySym === \"BTC\") {\n                var origin = parseFloat(coinStateDatas['BTC'].upbitPrice);\n                cal = (origin * parseFloat(nowPrice)).toFixed(2);\n\n                if (sortOrder[0] === 'upbitBTC') {\n                    calper = 'prepare';\n\n                } else if (sortOrder[0] === 'upbitSym') {\n                    calper = ((cal - parseFloat(coinStateDatas[shortSym].upbitPrice)) / cal * 100).toFixed(2);\n                }\n\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice,\n                    //!\n                    calKoupbitBTC: cal,\n                    upbitBTC_start_per: calper\n                }\n            }\n\n            if (coinStateDatas['BTC'].upbitPrice) {\n                //@\n                var upbitusdtkrw = (coinStateDatas['BTC'].upbitPrice / coinStateDatas['BTC'].upbitUSDTPrice).toFixed(1);\n\n                coinStateDatas['USDT'] = {\n                    ...coinStateDatas['USDT'],\n\n                    upbitUSDT: 'USDTKRW',\n                    upbitUSDTPrice: upbitusdtkrw\n                }\n            }\n        });\n\n\n        //✅ binance\n        three_names.forEach(name => {\n            let nowPrice = pricereturnFloat(name.price);\n            var sortOrder = [];\n            var len, cal, calper, coin;\n            let moneySym;\n            let exceptionArr = ['VENUSDT', 'VENBTC', , 'MBLBTC',\n                'TUSDBTC', 'DAIBTC', 'REPBUSD', 'STORJBUSD', 'DENTBTC', 'MFTBTC',\n                'SUNBTC', 'BTTBTC', 'COCOSBTC', 'PAXBTC', 'PAXUSDT', 'PAXBUSD',\n                'BCHSVBTC', 'BCHSVUSDT', 'BCCBTC', 'BCCUSDT', 'HOTBTC', 'BCHABCBTC',\n                'BCHABCUSDT', 'BCHABCBUSD', 'STORMBTC', 'STORMUSDT', 'LENDBTC', 'LENDUSDT', 'LENDBUSD',\n                'ERDBTC', 'ERDUSDT', 'ERDBUSD', 'MCOBTC', 'MCOUSDT', 'STRATBTC', 'STRATUSDT', 'STRATBUSD',\n                'VTHOBUSD', 'DCRBUSD', 'NPXSBTC', 'NPXSUSDT', 'BLZBUSD', 'WNXMBUSD', 'AIONBUSD', 'KMDBUSD',\n                'XZCBT', 'XZCUSDT', 'IRISBUSD', 'HCBTC', 'HCUSDT', 'KEYBTC', 'KEYUSDT', 'TROYBTC', 'SUSDBTC',\n                'TRUBUSD', 'BOOTBTC', 'BOTBUSD', 'PXGBUSD', 'BTSBUSD', 'RENBTCBTC', 'RENBTCETH'\n            ];\n            let exceptionflag = false;\n            exceptionArr.map((symbolName) => {\n                if (name.symbol === symbolName) {\n                    exceptionflag = true\n                    return;\n                }\n            })\n            if (exceptionflag === true)\n                return coinStateDatas;\n\n            if (name.symbol.lastIndexOf('BTC') !== -1) {\n                len = name.symbol.indexOf('BTC');\n                moneySym = 'BTC';\n            } else if (name.symbol.lastIndexOf('USDT') !== -1) {\n                len = name.symbol.indexOf('USDT');\n                moneySym = 'USDT';\n            } else if (name.symbol.lastIndexOf('BUSD') !== -1) {\n                len = name.symbol.indexOf('BUSD');\n                moneySym = 'BUSD';\n            }\n            coin = name.symbol.slice(0, len);\n\n            if (coinStateDatas[coin]) {\n                Object.keys(coinStateDatas[coin]).filter((list) => {\n                    if (list === 'upbitSym') {\n                        sortOrder[0] = 'upbitSym';\n                        return sortOrder;\n                    } else if (list === 'upbitUSDT') {\n                        sortOrder[1] = 'upbitUSDT';\n                        return sortOrder;\n                    }\n                    else if (list === 'upbitBTC') {\n                        sortOrder[2] = 'upbitBTC';\n                        return sortOrder;\n                    }\n                })\n                if (!sortOrder[0] && !sortOrder[1]) {\n                    sortOrder.splice(0, 2);\n                }\n                else if (!sortOrder[0]) {\n                    sortOrder.splice(0, 1);\n                }\n                else if (!sortOrder[1]) {\n                    sortOrder.splice(1, 1);\n                }\n            }\n\n            if (moneySym === 'BTC') {\n                cal = (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(nowPrice)).toFixed(1)\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBTCSym: name.symbol,\n                        binanBTCPrice: nowPrice,\n                        calKobinanBTC: cal,\n                        binBTC_start_per: calper\n                    }\n                }\n            } else if (moneySym === 'USDT') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanUSDTSym: name.symbol,\n                        binanUSDTPrice: nowPrice,\n                        calKoUSDT: cal,\n                        binUSDT_start_per: calper,\n                    }\n                }\n            } else if (moneySym === 'BUSD') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1);\n\n                if (sortOrder[0] === 'upbitBTC')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitBTC)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === \"upbitUSDT\")\n                    calper = ((cal - parseFloat(coinStateDatas[coin].calKoupbitUSDT)) / cal * 100).toFixed(2)\n                else if (sortOrder[0] === 'upbitSym')\n                    calper = ((cal - parseFloat(coinStateDatas[coin].upbitPrice)) / cal * 100).toFixed(2)\n\n                if (coin !== \"\") {\n                    coinStateDatas[coin] = {\n                        ...coinStateDatas[coin],\n                        binanBNBSym: name.symbol,\n                        binanBNBPrice: nowPrice,\n                        calKoBUSD: cal,\n                        binBUSD_start_per: calper,\n                    }\n                }\n            }\n            //📌 EXCEPTION\n            if (name.symbol === 'BTCBUSD') {\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanBNBSym: name.symbol,\n                    binanBNBPrice: nowPrice\n                }\n            } else if (name.symbol === 'BTCUSDT') {\n                cal = (parseFloat(coinStateDatas['USDT'].upbitUSDTPrice) * parseFloat(nowPrice)).toFixed(1)\n                coinStateDatas['BTC'] = {\n                    ...coinStateDatas['BTC'],\n                    binanUSDTSym: name.symbol,\n                    binanUSDTPrice: nowPrice,\n                    calKoUSDT: cal,\n                    per: ((cal - parseFloat(coinStateDatas['BTC'].upbitPrice)) / cal * 100).toFixed(2)\n                }\n            }\n        });\n\n        //✅ Max per search\n        Object.keys(coinStateDatas).forEach((coin) => {\n            var read = coinStateDatas[coin];\n            var keyread = Object.keys(read);\n            var maxPer = 0.0;\n            var minPer = 0.0;\n            keyread.forEach((name) => {\n                var per;\n                if (name === 'bithumbKRW_start_per') {\n                    per = parseFloat(coinStateDatas[coin].bithumbKRW_start_per);\n                }\n                else if (name === 'binBUSD_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBUSD_start_per);\n                } else if (name === 'upbitBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitBTC_start_per);\n                } else if (name === 'upbitUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].upbitUSDT_start_per);\n                } else if (name === 'BTCper') {\n                    per = parseFloat(coinStateDatas[coin].BTCper);\n                } else if (name === 'binUSDT_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binUSDT_start_per);\n                }\n                else if (name === 'binBTC_start_per') {\n                    per = parseFloat(coinStateDatas[coin].binBTC_start_per);\n                }\n                if (per > maxPer) {\n                    maxPer = per;\n                }\n                if (per < minPer) {\n                    minPer = per;\n                }\n            })\n            coinStateDatas[coin] = {\n                ...coinStateDatas[coin],\n                totalPer: maxPer,\n                totalminPer: minPer\n            }\n        });\n\n        //📦 v2\n        Object.keys(coinStateDatas).forEach((coin) => {\n            var read = coinStateDatas[coin];\n            var keyread = Object.keys(read);\n            var maxPer = 0.0;\n            var minPer = Number.MAX_SAFE_INTEGER;\n            var sortExchange = [];\n            var exchange;\n            var lastminExchange, lastmaxExchange;\n\n            keyread.forEach((name) => {\n                var price;\n                if (name === 'upbitPrice') {\n                    price = parseFloat(coinStateDatas[coin].upbitPrice);\n                    sortExchange.push('upbit');\n                    exchange = 'upbitWithdraw';\n                }\n                else if (name === 'bithumbPrice') {\n                    price = parseFloat(coinStateDatas[coin].bithumbPrice);\n                    sortExchange.push('bithumb');\n                    exchange = 'bithumbWithdraw';\n                }\n                else if (name === 'calKoupbitBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n                    sortExchange.push('upbit');\n                    exchange = 'upbitWithdraw';\n                }\n                else if (name === 'calKobithumbBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKobithumbBTC);\n                    //ok\n                    sortExchange.push('bithumb');\n                    exchange = 'bithumbWithdraw';\n                } else if (name === 'calKobinanBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKobinanBTC);\n                    sortExchange.push('binance');\n                    exchange = 'binanceWithdraw';\n                } else if (name === 'calKoupbitUSDT') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitUSDT);\n                    sortExchange.push('upbit');\n                } else if (name === 'calKoUSDT') {\n                    price = parseFloat(coinStateDatas[coin].calKoUSDT);\n                    sortExchange.push('binance');\n                    exchange = 'binanceWithdraw';\n                } else if (name === 'calKoBUSD') {\n                    price = parseFloat(coinStateDatas[coin].calKoBUSD);\n                    sortExchange.push('binance');\n                    exchange = 'binanceWithdraw';\n                }\n                else if (name === 'calKoupbitBTC') {\n                    price = parseFloat(coinStateDatas[coin].calKoupbitBTC);\n                    sortExchange.push('upbit');\n                    exchange = 'upbitWithdraw';\n                }\n\n                if (price > maxPer) {\n                    maxPer = price;\n                    lastmaxExchange = exchange;\n                }\n                if (price < minPer) {\n                    minPer = price;\n                    lastminExchange = exchange;\n                }\n            })\n            sortExchange = Array.from(new Set(sortExchange));\n            /*\n            if (coin === 'MKR') {\n                console.log('MKR price check', minPer, maxPer, lastminExchange, lastmaxExchange);\n            }\n            */\n\n            var result = 0.0;\n            if (sortExchange.length <= 1) {\n                minPer = 0;\n                maxPer = 0;\n                result = 0;\n            }\n            else {\n                CoinMarketData.find((name) => {\n                    if (name.symbol === coin) {\n                        if (lastminExchange === 'bithumbWithdraw' && lastmaxExchange === 'bithumbWithdraw') {\n                            minPer = 0;\n                            maxPer = 0;\n                            result = 0;\n                            return;\n                        }\n                        else if (lastminExchange === 'upbitWithdraw') {\n                            if (name.upbitWithdraw !== 'NO')\n                                minPer = (parseFloat(name.upbitWithdraw) * parseFloat(minPer)) + minPer;\n                            else {\n                                minPer = 0;\n                                maxPer = 0;\n                                result = 0;\n                                return;\n                            }\n                        } else if (lastminExchange === 'bithumbWithdraw') {\n                            minPer = (parseFloat(name.bithumbWithdraw) * parseFloat(minPer)) + minPer;\n                        }\n                        else if (lastminExchange === 'binanceWithdraw') {\n                            if (name.upbitWithdraw !== 'NO')\n                                minPer = (parseFloat(name.binanceWithdraw) * parseFloat(minPer)) + minPer;\n                            else {\n                                minPer = 0;\n                                maxPer = 0;\n                                result = 0;\n                                return;\n                            }\n                        }\n                    }\n                })\n                if (!(minPer <= 0 || maxPer === 0))\n                    result = ((maxPer - minPer) / minPer * 100).toFixed(1);\n                else {\n                    result = 0;\n                }\n            }\n            coinStateDatas[coin] = {\n                ...coinStateDatas[coin],\n                testper: result,\n                symbol: coin,\n            }\n        });\n\n        //!\n        TOPmarketNames.splice(0);\n        var coinStateCount = 0;\n        var coinStringMake = \"\";\n        Object.keys(coinStateDatas).forEach((coinOne) => {\n            if (coinStateDatas[coinOne].testper > 0) {\n                coinStringMake += coinOne + \",\";\n                var dataFactory = [];\n                var keyread = Object.keys(coinStateDatas[coinOne])\n                var arrCount = 0;\n                keyread.forEach((name) => {\n                    if (name === 'upbitPrice') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].upbitSym,\n                            'exchange': 'upbit',\n                            'OriginPrice': coinStateDatas[coinOne].upbitPrice,\n                            'KrwPrice': coinStateDatas[coinOne].upbitPrice\n\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'bithumbSym') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].bithumbSym,\n                            'exchange': 'bithumb',\n                            'OriginPrice': coinStateDatas[coinOne].bithumbPrice,\n                            'KrwPrice': coinStateDatas[coinOne].bithumbPrice\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKoupbitBTC') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].upbitBTC,\n                            'exchange': 'upbit',\n                            'OriginPrice': coinStateDatas[coinOne].upbitBTCPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKoupbitBTC\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKobithumbBTC') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].bithumbBTC,\n                            'exchange': 'bithumb',\n                            'OriginPrice': coinStateDatas[coinOne].bithumbBTCPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKobinanBTC\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKoupbitUSDT') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].upbitUSDT,\n                            'exchange': 'upbit',\n                            'OriginPrice': coinStateDatas[coinOne].upbitUSDTPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKoupbitUSDT\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKobinanBTC') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].binanBTCSym,\n                            'exchange': 'binance',\n                            'OriginPrice': coinStateDatas[coinOne].binanBTCPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKobinanBTC\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKoUSDT') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].binanUSDTSym,\n                            'exchange': 'binance',\n                            'OriginPrice': coinStateDatas[coinOne].binanUSDTPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKoUSDT\n                        }\n                        arrCount++;\n                    }\n                    else if (name === 'calKoBUSD') {\n                        dataFactory[arrCount] = {\n                            'MainSym': coinOne,\n                            'sym': coinStateDatas[coinOne].binanBNBSym,\n                            'exchange': 'binance',\n                            'OriginPrice': coinStateDatas[coinOne].binanBNBPrice,\n                            'KrwPrice': coinStateDatas[coinOne].calKoBUSD\n                        }\n                        arrCount++;\n                    }\n\n                });\n                //console.log('before', dataFactory); //1 2 3 4 5 \n                dataFactory = dataFactory.sort((next, prev) => {\n\n                    if (parseFloat(next.KrwPrice) > parseFloat(prev.KrwPrice)) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                })\n\n                TOPmarketNames[coinStateCount] = dataFactory;//coinStateDatas[coinOne]\n                coinStateCount++;\n            }\n        })\n        TOPmarketString[0] = { 'ALL': coinStringMake }\n\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names, state) => {\n\n        var stringdd = \"\";\n        CoinMarketData.find((name) => {\n            stringdd += name.symbol + \" \"\n        });\n        const data = {};\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n\n            if (shortSym === \"BTC\" && moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                }\n            } else if (shortSym === \"BTC\" && moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                }\n            }\n        })\n        data['USDT'] = {\n            ...data['USDT'],\n            upbitUSDTPrice: (data['BTC'].upbitPrice / data['BTC'].upbitUSDTPrice).toFixed(1),\n            upbitUSDT: 'USDTKRW',\n        }\n\n        Object.keys(names).forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: names[name].korean,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n\n\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: names[name].korean,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc,\n                    calKoupbitUSDT: (parseFloat(data['USDT'].upbitUSDTPrice) * parseFloat(names[name].korean)).toFixed(1)\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: names[name].korean,\n                    upbitBTC: name,\n                    imgsrc: imgsrc,\n                    calKoupbitBTC: (parseFloat(data['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n\n        Object.keys(names).forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: names[name].korean,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: names[name].korean,\n                    bithumbBTC: name,\n                    calKobithumbBTC: (parseFloat(coinStateDatas['BTC'].upbitPrice) * parseFloat(names[name].korean)).toFixed(2)\n                }\n            }\n        })\n\n\n        //!\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}