{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport jsonGeckoData from \"../Api/geckoallcoin.json\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  }\n};\nconst coinReadDataUtils = {\n  updates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(coinStateDatas);\n\n    names.forEach(name => {\n      //const newData = { ...coinStateDatas };\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.trade_price.toFixed(8);\n      } //console.log(\"1\", shortSym, \"2\", coinStateDatas[shortSym]);\n      //if (shortSym === coinStateDatas[shortSym]) {\n\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        }; //return coinStateDatas;\n      } //console.log(\"success\", name.code, name.trade_price, coinStateDatas);\n      //}\n\n    });\n    return coinStateDatas;\n  },\n  initNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let geckoSymbol = jsonGeckoData.find(gecko => {\n        if (gecko.symbol === shortSym.toLowerCase()) {\n          return gecko;\n        } //\n\n      });\n\n      if (geckoSymbol) {\n        let StringSymbole = JSON.stringify(JSON.parse(geckoSymbol));\n        console.log(StringSymbole);\n\n        if (moneySym === \"KRW\") {\n          data[shortSym] = { ...data[shortSym],\n            upbitPrice: 0.0,\n            upbitSym: name,\n            totalNameSym: geckoSymbol\n          };\n        } else if (moneySym === \"USDT\") {\n          data[shortSym] = { ...data[shortSym],\n            upbitUSDTPrice: 0.0,\n            upbitUSDT: name,\n            totalNameSym: geckoSymbol\n          };\n        } else if (moneySym === \"BTC\") {\n          data[shortSym] = { ...data[shortSym],\n            upbitBTCPrice: 0.0,\n            upbitBTC: name,\n            totalNameSym: geckoSymbol\n          };\n        }\n      }\n    });\n    return data;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","jsonGeckoData","coinListDataUtils","marketNames","names","data","forEach","name","shortSym","market","split","moneySym","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","korean","korean_name","english","english_name","coinReadDataUtils","updates","state","coinStateDatas","Coin","code","nowPrice","trade_price","toFixed","upbitPrice","upbitUSDTPrice","upbitBTCPrice","initNames","geckoSymbol","find","gecko","symbol","toLowerCase","StringSymbole","JSON","stringify","parse","console","log","totalNameSym"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\n\nimport jsonGeckoData from \"../Api/geckoallcoin.json\";\n\nconst coinListDataUtils = {\n    marketNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    }\n};\n\nconst coinReadDataUtils = {\n    updates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(coinStateDatas);\n        names.forEach(name => {\n            //const newData = { ...coinStateDatas };\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (nowPrice < 1.0) {\n                nowPrice = name.trade_price.toFixed(8);\n            }\n\n            //console.log(\"1\", shortSym, \"2\", coinStateDatas[shortSym]);\n            //if (shortSym === coinStateDatas[shortSym]) {\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n                //return coinStateDatas;\n            }\n            //console.log(\"success\", name.code, name.trade_price, coinStateDatas);\n            //}\n        });\n        return coinStateDatas;\n    },\n    initNames: (names) => {\n        const data = {};\n\n        names.forEach(name => {\n\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n\n            let geckoSymbol = jsonGeckoData.find((gecko) => {\n                if (gecko.symbol === shortSym.toLowerCase()) {\n                    return gecko;\n                }\n                //\n            });\n            if (geckoSymbol) {\n\n                let StringSymbole = JSON.stringify(JSON.parse(geckoSymbol));\n                console.log(StringSymbole);\n\n                if (moneySym === \"KRW\") {\n                    data[shortSym] = {\n                        ...data[shortSym],\n                        upbitPrice: 0.0,\n                        upbitSym: name,\n                        totalNameSym: geckoSymbol,\n                    }\n                } else if (moneySym === \"USDT\") {\n                    data[shortSym] = {\n                        ...data[shortSym],\n                        upbitUSDTPrice: 0.0,\n                        upbitUSDT: name,\n                        totalNameSym: geckoSymbol,\n                    }\n                } else if (moneySym === \"BTC\") {\n                    data[shortSym] = {\n                        ...data[shortSym],\n                        upbitBTCPrice: 0.0,\n                        upbitBTC: name,\n                        totalNameSym: geckoSymbol,\n                    }\n                }\n            }\n        });\n        return data;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}