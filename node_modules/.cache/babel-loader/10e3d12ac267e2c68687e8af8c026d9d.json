{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  },\n  stateInit: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  }\n};\nconst coinReadDataUtils = {\n  marketNames: (names, state) => {\n    //const coindData = state.Coin.marketNames.data;\n    //const newData = { ...coindData };\n    const data = {};\n    console.log(\"asf\");\n    names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: name.trade_price\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: name.trade_price\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: name.trade_price\n        };\n      }\n    });\n    return data;\n  }\n  /*,\n  updates: (names, state) => {\n     const candleStateDatas = state.Coin.marketNames.data;\n     console.log(candleStateDatas);\n     //const newData = { ...candleStateDatas };\n  }*/\n\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","coinListDataUtils","marketNames","names","data","forEach","name","shortSym","market","split","moneySym","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","korean","korean_name","english","english_name","stateInit","coinReadDataUtils","state","console","log","code","upbitPrice","trade_price","upbitUSDTPrice","upbitBTCPrice"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,KAA9C,QAA2D,oBAA3D;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,WAAW,EAAGC,KAAD,IAAW;AACpB,UAAMC,IAAI,GAAG,EAAb;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAClB,UAAIC,QAAQ,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAf;AACA,UAAIC,QAAQ,GAAGJ,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAf;;AAEA,UAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACpBN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEbI,UAAAA,QAAQ,EAAEL,IAAI,CAACE;AAFF,SAAjB;AAIH,OALD,MAKO,IAAIE,QAAQ,KAAK,MAAjB,EAAyB;AAC5BN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEbK,UAAAA,SAAS,EAAEN,IAAI,CAACE;AAFH,SAAjB;AAIH,OALM,MAKA,IAAIE,QAAQ,KAAK,KAAjB,EAAwB;AAC3BN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEbM,UAAAA,QAAQ,EAAEP,IAAI,CAACE;AAFF,SAAjB;AAIH;AACJ,KApBD;AAqBA,WAAOJ,IAAP;AACH,GAzBqB;AA0BtBU,EAAAA,aAAa,EAAGX,KAAD,IAAW;AACtB,UAAMC,IAAI,GAAG,EAAb;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAClBF,MAAAA,IAAI,CAACE,IAAI,CAACE,MAAN,CAAJ,GAAoB;AAChBO,QAAAA,MAAM,EAAET,IAAI,CAACU,WADG;AAEhBC,QAAAA,OAAO,EAAEX,IAAI,CAACY;AAFE,OAApB;AAIH,KALD;AAMA,WAAOd,IAAP;AACH,GAnCqB;AAoCtBe,EAAAA,SAAS,EAAGhB,KAAD,IAAW;AAClB,UAAMC,IAAI,GAAG,EAAb;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAClBF,MAAAA,IAAI,CAACE,IAAI,CAACE,MAAN,CAAJ,GAAoB;AAChBO,QAAAA,MAAM,EAAET,IAAI,CAACU,WADG;AAEhBC,QAAAA,OAAO,EAAEX,IAAI,CAACY;AAFE,OAApB;AAIH,KALD;AAMA,WAAOd,IAAP;AACH;AA7CqB,CAA1B;AAgDA,MAAMgB,iBAAiB,GAAG;AACtBlB,EAAAA,WAAW,EAAE,CAACC,KAAD,EAAQkB,KAAR,KAAkB;AAC3B;AACA;AACA,UAAMjB,IAAI,GAAG,EAAb;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACApB,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAElB,UAAIC,QAAQ,GAAGD,IAAI,CAACkB,IAAL,CAAUf,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAf;AACA,UAAIC,QAAQ,GAAGJ,IAAI,CAACkB,IAAL,CAAUf,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAf;;AAEA,UAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACpBN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEbkB,UAAAA,UAAU,EAAEnB,IAAI,CAACoB;AAFJ,SAAjB;AAIH,OALD,MAKO,IAAIhB,QAAQ,KAAK,MAAjB,EAAyB;AAC5BN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEboB,UAAAA,cAAc,EAAErB,IAAI,CAACoB;AAFR,SAAjB;AAIH,OALM,MAKA,IAAIhB,QAAQ,KAAK,KAAjB,EAAwB;AAC3BN,QAAAA,IAAI,CAACG,QAAD,CAAJ,GAAiB,EACb,GAAGH,IAAI,CAACG,QAAD,CADM;AAEbqB,UAAAA,aAAa,EAAEtB,IAAI,CAACoB;AAFP,SAAjB;AAIH;AACJ,KArBD;AAuBA,WAAOtB,IAAP;AACH;AAAA;AACL;AACA;AACA;AACA;AACA;;AAnC0B,CAA1B;AAuCA,SACIH,iBADJ,EAEImB,iBAFJ","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\n\nconst coinListDataUtils = {\n    marketNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    },\n    stateInit: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    }\n};\n\nconst coinReadDataUtils = {\n    marketNames: (names, state) => {\n        //const coindData = state.Coin.marketNames.data;\n        //const newData = { ...coindData };\n        const data = {};\n        console.log(\"asf\");\n        names.forEach(name => {\n\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: name.trade_price\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: name.trade_price\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: name.trade_price\n                }\n            }\n        });\n\n        return data;\n    }/*,\n    updates: (names, state) => {\n        const candleStateDatas = state.Coin.marketNames.data;\n        console.log(candleStateDatas);\n        //const newData = { ...candleStateDatas };\n    }*/\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}