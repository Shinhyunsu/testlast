{"ast":null,"code":"import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\nconst coinListDataUtils = {\n  marketNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.market.split(\"-\")[1];\n      let moneySym = name.market.split(\"-\")[0];\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitSym: name.market\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDT: name.market\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTC: name.market\n        };\n      }\n    });\n    return data;\n  },\n  upbitAllNames: names => {\n    const data = {};\n    names.forEach(name => {\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  },\n  bithumbKRWNames: names => {\n    const data = {}; //console.log(Object.keys(names));\n\n    Object.keys(names).forEach(name => {\n      data[name + \"_KRW\"] = {\n        korean: \"\",\n        english: \"\"\n      };\n    });\n    return data;\n  },\n  bithumbBTCNames: (names, state) => {\n    const coinStateDatas = state.Coin.bithumbTotalNames.data;\n    Object.keys(names).forEach(name => {\n      coinStateDatas[name + \"_BTC\"] = {\n        korean: \"\",\n        english: \"\"\n      };\n    });\n    return coinStateDatas;\n  }\n};\nconst coinReadDataUtils = {\n  upbitUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(\"name\", names);\n\n    names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.trade_price.toFixed(8);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  bithumbUpdates: (names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data;\n    names.forEach(name => {\n      let shortSym = name.symbol.split(\"_\")[0];\n      let moneySym = name.symbol.split(\"_\")[1];\n      let nowPrice = name.closePrice;\n      console.log(shortSym, moneySym, nowPrice);\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.content.closePrice.toFixed(8);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n  },\n  //✅\n  mixExchangeUpdates: (one_names, two_names, state) => {\n    const coinStateDatas = state.Coin.marketNames.data; //console.log(\"names\", names);\n    //✅ bithumb\n\n    two_names.forEach(name => {\n      let shortSym = name.content.symbol.split(\"-\")[0];\n      let moneySym = name.content.symbol.split(\"-\")[1];\n      let nowPrice = name.content.closePrice;\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.content.closePrice.toFixed(8);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: nowPrice\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: nowPrice\n        };\n      }\n    }); //✅ upbit\n\n    one_names.forEach(name => {\n      let shortSym = name.code.split(\"-\")[1];\n      let moneySym = name.code.split(\"-\")[0];\n      let nowPrice = name.trade_price;\n\n      if (nowPrice < 1.0) {\n        nowPrice = name.trade_price.toFixed(8);\n      }\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"USDT\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitUSDTPrice: nowPrice\n        }; //return coinStateDatas;\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          upbitBTCPrice: nowPrice\n        };\n      }\n    });\n    return coinStateDatas;\n    return coinStateDatas;\n  },\n  //\n  upbitInitNames: names => {\n    const data = {};\n    names.forEach(name => {\n      let shortSym = name.split(\"-\")[1];\n      let moneySym = name.split(\"-\")[0];\n      let imgsrc = \"\";\n      CoinMarketData.find(coin => {\n        if (coin.symbol === shortSym) {\n          imgsrc = coin.imgsrc;\n        }\n      });\n\n      if (moneySym === \"KRW\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitPrice: 0.0,\n          upbitSym: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"USDT\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitUSDTPrice: 0.0,\n          upbitUSDT: name,\n          imgsrc: imgsrc\n        };\n      } else if (moneySym === \"BTC\") {\n        data[shortSym] = { ...data[shortSym],\n          upbitBTCPrice: 0.0,\n          upbitBTC: name,\n          imgsrc: imgsrc\n        };\n      }\n    });\n    return data;\n  },\n  bithumbInitNames: (names, state) => {\n    // const data = {};\n    const coinStateDatas = state.Coin.marketNames.data;\n    names.forEach(name => {\n      let shortSym = name.split(\"_\")[0];\n      let moneySym = name.split(\"_\")[1];\n\n      if (moneySym === \"KRW\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbPrice: 0.0,\n          bithumbSym: name\n        };\n      } else if (moneySym === \"BTC\") {\n        coinStateDatas[shortSym] = { ...coinStateDatas[shortSym],\n          bithumbBTCPrice: 0.0,\n          bithumbBTC: name\n        };\n      }\n    });\n    return coinStateDatas;\n  }\n};\nexport { coinListDataUtils, coinReadDataUtils };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/utils.js"],"names":["takeEvery","call","put","select","flush","delay","axios","CoinMarketData","coinListDataUtils","marketNames","names","data","forEach","name","shortSym","market","split","moneySym","upbitSym","upbitUSDT","upbitBTC","upbitAllNames","korean","korean_name","english","english_name","bithumbKRWNames","Object","keys","bithumbBTCNames","state","coinStateDatas","Coin","bithumbTotalNames","coinReadDataUtils","upbitUpdates","code","nowPrice","trade_price","toFixed","upbitPrice","upbitUSDTPrice","upbitBTCPrice","bithumbUpdates","symbol","closePrice","console","log","content","bithumbPrice","bithumbBTCPrice","mixExchangeUpdates","one_names","two_names","upbitInitNames","imgsrc","find","coin","bithumbInitNames","bithumbSym","bithumbBTC"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport CoinMarketData from \"../Api/CoinMarketData.json\";\n\nconst coinListDataUtils = {\n    marketNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.market.split(\"-\")[1];\n            let moneySym = name.market.split(\"-\")[0];\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitSym: name.market\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDT: name.market\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTC: name.market\n                }\n            }\n        });\n        return data;\n    },\n    upbitAllNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            data[name.market] = {\n                korean: name.korean_name,\n                english: name.english_name,\n            };\n        })\n        return data;\n    },\n    bithumbKRWNames: (names) => {\n        const data = {};\n        //console.log(Object.keys(names));\n        Object.keys(names).forEach(name => {\n            data[name + \"_KRW\"] = {\n                korean: \"\",\n                english: \"\",\n            };\n        })\n\n        return data;\n    },\n    bithumbBTCNames: (names, state) => {\n        const coinStateDatas = state.Coin.bithumbTotalNames.data;\n\n        Object.keys(names).forEach(name => {\n            coinStateDatas[name + \"_BTC\"] = {\n                korean: \"\",\n                english: \"\",\n            };\n        })\n        return coinStateDatas;\n    }\n};\n\nconst coinReadDataUtils = {\n    upbitUpdates: (names, state) => {\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(\"name\", names);\n        names.forEach(name => {\n\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (nowPrice < 1.0) {\n                nowPrice = name.trade_price.toFixed(8);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n    },\n    bithumbUpdates: (names, state) => {\n\n        const coinStateDatas = state.Coin.marketNames.data;\n        names.forEach(name => {\n\n            let shortSym = name.symbol.split(\"_\")[0];\n            let moneySym = name.symbol.split(\"_\")[1];\n            let nowPrice = name.closePrice;\n            console.log(shortSym, moneySym, nowPrice)\n            if (nowPrice < 1.0) {\n                nowPrice = name.content.closePrice.toFixed(8);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        })\n        return coinStateDatas;\n    },\n    //✅\n    mixExchangeUpdates: (one_names, two_names, state) => {\n\n        const coinStateDatas = state.Coin.marketNames.data;\n        //console.log(\"names\", names);\n        //✅ bithumb\n        two_names.forEach(name => {\n            let shortSym = name.content.symbol.split(\"-\")[0];\n            let moneySym = name.content.symbol.split(\"-\")[1];\n            let nowPrice = name.content.closePrice;\n\n            if (nowPrice < 1.0) {\n                nowPrice = name.content.closePrice.toFixed(8);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: nowPrice\n                }\n            }\n            else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: nowPrice\n                }\n            }\n        })\n        //✅ upbit\n        one_names.forEach(name => {\n            let shortSym = name.code.split(\"-\")[1];\n            let moneySym = name.code.split(\"-\")[0];\n            let nowPrice = name.trade_price;\n\n            if (nowPrice < 1.0) {\n                nowPrice = name.trade_price.toFixed(8);\n            }\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"USDT\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitUSDTPrice: nowPrice\n                }\n                //return coinStateDatas;\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    upbitBTCPrice: nowPrice\n                }\n            }\n        });\n        return coinStateDatas;\n\n\n        return coinStateDatas;\n    },\n    //\n    upbitInitNames: (names) => {\n        const data = {};\n        names.forEach(name => {\n            let shortSym = name.split(\"-\")[1];\n            let moneySym = name.split(\"-\")[0];\n            let imgsrc = \"\";\n            CoinMarketData.find((coin) => {\n                if (coin.symbol === shortSym) {\n                    imgsrc = coin.imgsrc;\n                }\n            })\n            if (moneySym === \"KRW\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitPrice: 0.0,\n                    upbitSym: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"USDT\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitUSDTPrice: 0.0,\n                    upbitUSDT: name,\n                    imgsrc: imgsrc\n                }\n            } else if (moneySym === \"BTC\") {\n                data[shortSym] = {\n                    ...data[shortSym],\n                    upbitBTCPrice: 0.0,\n                    upbitBTC: name,\n                    imgsrc: imgsrc\n                }\n            }\n        });\n        return data;\n    },\n    bithumbInitNames: (names, state) => {\n        // const data = {};\n        const coinStateDatas = state.Coin.marketNames.data;\n        names.forEach(name => {\n            let shortSym = name.split(\"_\")[0];\n            let moneySym = name.split(\"_\")[1];\n\n            if (moneySym === \"KRW\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbPrice: 0.0,\n                    bithumbSym: name,\n                }\n            } else if (moneySym === \"BTC\") {\n                coinStateDatas[shortSym] = {\n                    ...coinStateDatas[shortSym],\n                    bithumbBTCPrice: 0.0,\n                    bithumbBTC: name,\n                }\n            }\n        })\n\n\n        return coinStateDatas;\n    }\n};\n\n\nexport {\n    coinListDataUtils,\n    coinReadDataUtils\n}"]},"metadata":{},"sourceType":"module"}