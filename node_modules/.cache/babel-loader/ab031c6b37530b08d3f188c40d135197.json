{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getMarketNameSaga = createRequestSaga(GET_MARKET_NAMES, coinApi.getMarketCodes, coinListDataUtils.marketNames);\n/*\nconst createRequestSaga = (type, api) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        // yield put(startLoading(type));\n        const res = yield call(api, action.payload);\n        console.log(res);\n        // yield put(finishLoading(type));\n    }\n};\n*/\n\nfunction* startInitSaga() {\n  //yield delay(2000);\n  // yield put(getMarketNameSaga());\n  //yield takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n  //console.log(13);\n  //console.log(\"2020\");\n  yield getMarketNameSaga();\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga); // yield takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n}\n\nconst initialState = {\n  selectedMarket: \"KRW-BTC\",\n  selectedTimeType: \"minutes\",\n  selectedTimeCount: 5,\n  selectedAskBidOrder: \"bid\",\n  orderPrice: 0,\n  orderAmount: 0,\n  orderTotalPrice: 0,\n  searchCoin: \"\",\n  marketNames: {\n    error: false,\n    data: {\n      \"KRW-BTC\": \"비트코인\"\n    }\n  },\n  candle: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        candles: [// { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n        ],\n        tradePrice24Hour: 0,\n        volume24Hour: 0,\n        changeRate24Hour: 0\n      }\n    }\n  },\n  orderbook: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        total_bid_size: 0,\n        total_ask_size: 0,\n        orderbook_units: []\n      }\n    }\n  },\n  tradeList: {\n    error: false,\n    data: {}\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MARKET_NAMES_SUCCESS:\n    case GET_MARKET_NAMES_ERROR:\n      return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n    case START_INIT:\n      //console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, getMarketNameSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","coinApi","createRequestSaga","requestActions","coinListDataUtils","START_INIT","START_INIT_ASYNC","GET_MARKET_NAMES","GET_MARKET_NAMES_SUCCESS","GET_MARKET_NAMES_ERROR","startInitAsync","type","startInit","getMarketNameSaga","getMarketCodes","marketNames","startInitSaga","coinSaga","initialState","selectedMarket","selectedTimeType","selectedTimeCount","selectedAskBidOrder","orderPrice","orderAmount","orderTotalPrice","searchCoin","error","data","candle","candles","tradePrice24Hour","volume24Hour","changeRate24Hour","orderbook","total_bid_size","total_ask_size","orderbook_units","tradeList","coinReducer","state","action"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\n\n\n\n\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getMarketNameSaga = createRequestSaga(\n    GET_MARKET_NAMES,\n    coinApi.getMarketCodes,\n    coinListDataUtils.marketNames\n);\n\n\n\n\n\n/*\nconst createRequestSaga = (type, api) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        // yield put(startLoading(type));\n        const res = yield call(api, action.payload);\n        console.log(res);\n        // yield put(finishLoading(type));\n    }\n};\n*/\nfunction* startInitSaga() {\n    //yield delay(2000);\n    // yield put(getMarketNameSaga());\n    //yield takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n    //console.log(13);\n\n    //console.log(\"2020\");\n    yield getMarketNameSaga();\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n    // yield takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n}\n\n\nconst initialState = {\n    selectedMarket: \"KRW-BTC\",\n    selectedTimeType: \"minutes\",\n    selectedTimeCount: 5,\n    selectedAskBidOrder: \"bid\",\n    orderPrice: 0,\n    orderAmount: 0,\n    orderTotalPrice: 0,\n    searchCoin: \"\",\n    marketNames: {\n        error: false,\n        data: {\n            \"KRW-BTC\": \"비트코인\",\n        },\n    },\n    candle: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                candles: [\n                    // { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n                ],\n                tradePrice24Hour: 0,\n                volume24Hour: 0,\n                changeRate24Hour: 0,\n            },\n        },\n    },\n    orderbook: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                total_bid_size: 0,\n                total_ask_size: 0,\n                orderbook_units: [],\n            },\n        },\n    },\n    tradeList: {\n        error: false,\n        data: {},\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_MARKET_NAMES_SUCCESS:\n        case GET_MARKET_NAMES_ERROR:\n            return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n        case START_INIT:\n            //console.log(12);\n            return state + 1;\n        default:\n            return state;\n\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    getMarketNameSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}