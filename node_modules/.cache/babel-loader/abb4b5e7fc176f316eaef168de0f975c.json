{"ast":null,"code":"var _jsxFileName = \"/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport CoinContainer from \"./container/CoinContainer\";\nimport { startInit } from './Reducer/coinReducer';\nimport \"./App.css\";\nimport { authService } from \"fbase\";\nimport { doc, collection, getFirestore, getDocs, updateDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(startInit());\n  }, [dispatch]);\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(async () => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        const authCheck = async () => {\n          const ipData = await fetch('https://geolocation-db.com/json/');\n          const locationIp = await ipData.json();\n          const ipv4 = locationIp.IPv4;\n          const db = await getFirestore();\n          const querySnapshot = await getDocs(collection(db, \"users\"));\n          let check = \"\";\n          let checkID = \"\";\n          querySnapshot.forEach(docc => {\n            if (docc.data().useremail === user.email) {\n              check = \"emailOK\";\n\n              if (docc.data().ipaddress === ipv4) {\n                check = \"ipOK\";\n              } else if (docc.data().ipaddress === 'init') {\n                check = \"NEW\";\n                checkID = docc.id;\n              } else {\n                check = \"FAIL\";\n              }\n            }\n          });\n          if (check === 'ipOK') setIsLoggedIn(true);else if (check === 'NEW') {\n            const washingtonRef = doc(db, \"users\", checkID);\n            await updateDoc(washingtonRef, {\n              ipaddress: ipv4\n            });\n          } else if (check === 'FAIL') setIsLoggedIn(false);\n        };\n\n        authCheck();\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setInit(true);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CoinContainer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n/*\n\n<>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} /> : 'Initializing....'}\n      <footer>&copy; Crypto {new Date().getFullYear()} </footer>\n    </>\n\n*/\n\n\n_s(App, \"/U3k1HS0pIEEQVaxvF2NP94eomg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice_ver2.0/src/App.js"],"names":["React","useEffect","useState","useDispatch","CoinContainer","startInit","authService","doc","collection","getFirestore","getDocs","updateDoc","App","dispatch","init","setInit","isLoggedIn","setIsLoggedIn","onAuthStateChanged","user","authCheck","ipData","fetch","locationIp","json","ipv4","IPv4","db","querySnapshot","check","checkID","forEach","docc","data","useremail","email","ipaddress","id","washingtonRef"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport CoinContainer from \"./container/CoinContainer\";\nimport { startInit } from './Reducer/coinReducer';\nimport \"./App.css\";\nimport { authService } from \"fbase\";\nimport { doc, collection, getFirestore, getDocs, updateDoc } from \"firebase/firestore\"\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(startInit());\n\n  }, [dispatch]);\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(async () => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n\n        const authCheck = async () => {\n\n          const ipData = await fetch('https://geolocation-db.com/json/');\n          const locationIp = await ipData.json();\n          const ipv4 = locationIp.IPv4;\n          const db = await getFirestore();\n          const querySnapshot = await getDocs(collection(db, \"users\"));\n          let check = \"\"; let checkID = \"\";\n          querySnapshot.forEach((docc) => {\n            if (docc.data().useremail === user.email) {\n              check = \"emailOK\";\n              if (docc.data().ipaddress === ipv4) {\n                check = \"ipOK\";\n              }\n              else if (docc.data().ipaddress === 'init') {\n                check = \"NEW\";\n                checkID = docc.id;\n              } else {\n                check = \"FAIL\";\n              }\n            }\n\n          });\n\n          if (check === 'ipOK')\n            setIsLoggedIn(true);\n          else if (check === 'NEW') {\n\n            const washingtonRef = doc(db, \"users\", checkID);\n            await updateDoc(washingtonRef, {\n              ipaddress: ipv4\n            });\n\n          } else if (check === 'FAIL')\n            setIsLoggedIn(false);\n\n        }\n        authCheck();\n\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n\n  return (\n    <CoinContainer />\n  );\n}\n/*\n\n<>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} /> : 'Initializing....'}\n      <footer>&copy; Crypto {new Date().getFullYear()} </footer>\n    </>\n\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}