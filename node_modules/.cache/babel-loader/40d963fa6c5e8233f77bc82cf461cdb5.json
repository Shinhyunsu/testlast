{"ast":null,"code":"import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    const res = yield call(api, action.payload); //console.log(post);\n\n    try {\n      //const res = yield call(api, action.payload);\n      const state = yield select(); //console.log(action.payload);\n\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data, state)\n      }); // yield put(finishLoading(type));\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      }); // yield put(finishLoading(type));\n\n      throw e;\n    }\n  };\n}; // requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n\nconst requestActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    //console.log(state, action);\n    switch (action.type) {\n      case SUCCESS:\n        //console.log(15);\n        return reducerUtils.success(state, action.payload, key);\n\n      case ERROR:\n        return reducerUtils.error(state, action.payload, key);\n\n      default:\n        return state;\n    }\n  };\n};\n\nconst reducerUtils = {\n  success: (state, payload, key) => {\n    return { ...state,\n      [key]: {\n        data: payload,\n        error: false\n      }\n    };\n  },\n  error: (state, error, key) => ({ ...state,\n    [key]: { ...state[key],\n      error: error\n    }\n  })\n};\n\nconst createSocket = () => {\n  const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n  client.binaryType = \"arraybuffer\";\n  return client;\n};\n\nconst connectSocekt = (socket, connectType, action, buffer) => {\n  return eventChannel(emit => {\n    socket.onopen = () => {\n      socket.send(JSON.stringify([{\n        ticket: \"downbit-clone\"\n      }, {\n        type: connectType,\n        codes: action.payload\n      }]));\n    };\n\n    socket.onmessage = evt => {\n      const enc = new encoding.TextDecoder(\"utf-8\"); // const arr = new Uint8Array(evt.data);\n\n      const data = JSON.parse(enc.decode(evt.data));\n      emit(data);\n    };\n\n    socket.onerror = evt => {\n      emit(evt);\n      emit(END);\n    };\n\n    const unsubscribe = () => {\n      socket.close();\n    };\n\n    return unsubscribe;\n  }, buffer || buffers.none());\n};\n\nexport { createRequestSaga, requestActions };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Lib/asyncUtil.js"],"names":["call","put","select","flush","delay","w3cwebsocket","W3CWebSocket","buffers","eventChannel","END","createRequestSaga","type","api","dataMaker","SUCCESS","ERROR","action","res","payload","state","data","e","requestActions","key","reducerUtils","success","error","createSocket","client","binaryType","connectSocekt","socket","connectType","buffer","emit","onopen","send","JSON","stringify","ticket","codes","onmessage","evt","enc","encoding","TextDecoder","parse","decode","onerror","unsubscribe","close","none"],"mappings":"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","sourcesContent":["import { call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { buffers, eventChannel, END } from \"redux-saga\";\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        const res = yield call(api, action.payload);\n        //console.log(post);\n        try {\n            //const res = yield call(api, action.payload);\n            const state = yield select();\n            //console.log(action.payload);\n            yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            // yield put(finishLoading(type));\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            // yield put(finishLoading(type));\n            throw e;\n        }\n    };\n};\n// requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\nconst requestActions = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n    return (state, action) => {\n        //console.log(state, action);\n        switch (action.type) {\n            case SUCCESS:\n                //console.log(15);\n                return reducerUtils.success(state, action.payload, key);\n            case ERROR:\n                return reducerUtils.error(state, action.payload, key);\n            default:\n                return state;\n        }\n    };\n};\n\nconst reducerUtils = {\n    success: (state, payload, key) => {\n        return {\n            ...state,\n            [key]: {\n                data: payload,\n                error: false,\n            },\n        };\n    },\n    error: (state, error, key) => ({\n        ...state,\n        [key]: {\n            ...state[key],\n            error: error,\n        },\n    }),\n};\n\nconst createSocket = () => {\n    const client = new W3CWebSocket(\"wss://api.upbit.com/websocket/v1\");\n    client.binaryType = \"arraybuffer\";\n\n    return client;\n};\n\nconst connectSocekt = (socket, connectType, action, buffer) => {\n    return eventChannel((emit) => {\n        socket.onopen = () => {\n            socket.send(\n                JSON.stringify([\n                    { ticket: \"downbit-clone\" },\n                    { type: connectType, codes: action.payload },\n                ])\n            );\n        };\n\n        socket.onmessage = (evt) => {\n            const enc = new encoding.TextDecoder(\"utf-8\");\n            // const arr = new Uint8Array(evt.data);\n            const data = JSON.parse(enc.decode(evt.data));\n\n            emit(data);\n        };\n\n        socket.onerror = (evt) => {\n            emit(evt);\n            emit(END);\n        };\n\n        const unsubscribe = () => {\n            socket.close();\n        };\n\n        return unsubscribe;\n    }, buffer || buffers.none());\n};\n\n\n\n\nexport {\n    createRequestSaga,\n    requestActions,\n}"]},"metadata":{},"sourceType":"module"}