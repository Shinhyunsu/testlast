{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getMarketNameSaga = createRequestSaga(GET_MARKET_NAMES, coinApi.getMarketCodes, coinListDataUtils.marketNames);\n\nfunction* startInitSaga() {\n  yield getMarketNameSaga();\n  const marketNames = Object.keys(state.Coin.marketNames.data);\n  console.log(marketNames);\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  selectedMarket: \"KRW-BTC\",\n  selectedTimeType: \"minutes\",\n  selectedTimeCount: 5,\n  selectedAskBidOrder: \"bid\",\n  orderPrice: 0,\n  orderAmount: 0,\n  orderTotalPrice: 0,\n  searchCoin: \"\",\n  marketNames: {\n    error: false,\n    data: {\n      \"KRW-BTC\": \"비트코인\"\n    }\n  },\n  candle: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        candles: [// { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n        ],\n        tradePrice24Hour: 0,\n        volume24Hour: 0,\n        changeRate24Hour: 0\n      }\n    }\n  },\n  orderbook: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        total_bid_size: 0,\n        total_ask_size: 0,\n        orderbook_units: []\n      }\n    }\n  },\n  tradeList: {\n    error: false,\n    data: {}\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MARKET_NAMES_SUCCESS:\n    case GET_MARKET_NAMES_ERROR:\n      //return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n      return state;\n\n    case START_INIT:\n      //console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, getMarketNameSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","coinApi","createRequestSaga","requestActions","coinListDataUtils","START_INIT","START_INIT_ASYNC","GET_MARKET_NAMES","GET_MARKET_NAMES_SUCCESS","GET_MARKET_NAMES_ERROR","startInitAsync","type","startInit","getMarketNameSaga","getMarketCodes","marketNames","startInitSaga","Object","keys","state","Coin","data","console","log","coinSaga","initialState","selectedMarket","selectedTimeType","selectedTimeCount","selectedAskBidOrder","orderPrice","orderAmount","orderTotalPrice","searchCoin","error","candle","candles","tradePrice24Hour","volume24Hour","changeRate24Hour","orderbook","total_bid_size","total_ask_size","orderbook_units","tradeList","coinReducer","action"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,KAA9C,QAA2D,oBAA3D;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,kBAAlD;AACA,SAASC,iBAAT,QAAkC,cAAlC;AAMA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,wBAAwB,GAAG,0BAAjC;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;;AAIA,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEL;AAAR,CAAP,CAAvB;;AACA,MAAMM,SAAS,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEN;AAAR,CAAP,CAAlB;;AAGA,MAAMQ,iBAAiB,GAAGX,iBAAiB,CACvCK,gBADuC,EAEvCN,OAAO,CAACa,cAF+B,EAGvCV,iBAAiB,CAACW,WAHqB,CAA3C;;AAOA,UAAUC,aAAV,GAA0B;AACtB,QAAMH,iBAAiB,EAAvB;AAEA,QAAME,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYC,KAAK,CAACC,IAAN,CAAWL,WAAX,CAAuBM,IAAnC,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ;AACH;;AACD,UAAUS,QAAV,GAAqB;AACjB,QAAM7B,SAAS,CAACU,UAAD,EAAaW,aAAb,CAAf;AAEH;;AAGD,MAAMS,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,SADC;AAEjBC,EAAAA,gBAAgB,EAAE,SAFD;AAGjBC,EAAAA,iBAAiB,EAAE,CAHF;AAIjBC,EAAAA,mBAAmB,EAAE,KAJJ;AAKjBC,EAAAA,UAAU,EAAE,CALK;AAMjBC,EAAAA,WAAW,EAAE,CANI;AAOjBC,EAAAA,eAAe,EAAE,CAPA;AAQjBC,EAAAA,UAAU,EAAE,EARK;AASjBlB,EAAAA,WAAW,EAAE;AACTmB,IAAAA,KAAK,EAAE,KADE;AAETb,IAAAA,IAAI,EAAE;AACF,iBAAW;AADT;AAFG,GATI;AAejBc,EAAAA,MAAM,EAAE;AACJD,IAAAA,KAAK,EAAE,KADH;AAEJb,IAAAA,IAAI,EAAE;AACF,iBAAW;AACPe,QAAAA,OAAO,EAAE,CACL;AADK,SADF;AAIPC,QAAAA,gBAAgB,EAAE,CAJX;AAKPC,QAAAA,YAAY,EAAE,CALP;AAMPC,QAAAA,gBAAgB,EAAE;AANX;AADT;AAFF,GAfS;AA4BjBC,EAAAA,SAAS,EAAE;AACPN,IAAAA,KAAK,EAAE,KADA;AAEPb,IAAAA,IAAI,EAAE;AACF,iBAAW;AACPoB,QAAAA,cAAc,EAAE,CADT;AAEPC,QAAAA,cAAc,EAAE,CAFT;AAGPC,QAAAA,eAAe,EAAE;AAHV;AADT;AAFC,GA5BM;AAsCjBC,EAAAA,SAAS,EAAE;AACPV,IAAAA,KAAK,EAAE,KADA;AAEPb,IAAAA,IAAI,EAAE;AAFC;AAtCM,CAArB;;AA4CA,MAAMwB,WAAW,GAAG,CAAC1B,KAAK,GAAGM,YAAT,EAAuBqB,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACnC,IAAf;AACI,SAAKH,wBAAL;AACA,SAAKC,sBAAL;AACI;AACA,aAAOU,KAAP;;AACJ,SAAKd,UAAL;AACI;AACA,aAAOc,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AATR;AAYH,CAbD;;AAcA,SACI0B,WADJ,EAEIrB,QAFJ,EAGIZ,SAHJ,EAIIC,iBAJJ,EAKIH,cALJ","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\n\n\n\n\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getMarketNameSaga = createRequestSaga(\n    GET_MARKET_NAMES,\n    coinApi.getMarketCodes,\n    coinListDataUtils.marketNames\n);\n\n\nfunction* startInitSaga() {\n    yield getMarketNameSaga();\n\n    const marketNames = Object.keys(state.Coin.marketNames.data);\n    console.log(marketNames);\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n\n}\n\n\nconst initialState = {\n    selectedMarket: \"KRW-BTC\",\n    selectedTimeType: \"minutes\",\n    selectedTimeCount: 5,\n    selectedAskBidOrder: \"bid\",\n    orderPrice: 0,\n    orderAmount: 0,\n    orderTotalPrice: 0,\n    searchCoin: \"\",\n    marketNames: {\n        error: false,\n        data: {\n            \"KRW-BTC\": \"비트코인\",\n        },\n    },\n    candle: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                candles: [\n                    // { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n                ],\n                tradePrice24Hour: 0,\n                volume24Hour: 0,\n                changeRate24Hour: 0,\n            },\n        },\n    },\n    orderbook: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                total_bid_size: 0,\n                total_ask_size: 0,\n                orderbook_units: [],\n            },\n        },\n    },\n    tradeList: {\n        error: false,\n        data: {},\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_MARKET_NAMES_SUCCESS:\n        case GET_MARKET_NAMES_ERROR:\n            //return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n            return state;\n        case START_INIT:\n            //console.log(12);\n            return state + 1;\n        default:\n            return state;\n\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    getMarketNameSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}