{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getMarketNameSaga = createRequestSaga(GET_MARKET_NAMES, coinApi.getMarketCodes, coinListDataUtils.marketNames);\n\nfunction* startInitSaga() {\n  yield getMarketNameSaga();\n  const state = yield select();\n  const marketNames = Object.keys(state.Coin.marketNames.data); //console.log(marketNames);\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  marketNames: {\n    error: false,\n    data: {\n      \"BTC\": {\n        totalPrice: [{\n          upbitUSDT: \"\",\n          upbitBTC: \"\",\n          upbitSym: \"\",\n          bithumbSym: \"\",\n          binanSym: \"\",\n          upbitPrice: 0.0,\n          upbitBTCPrice: 0.0,\n          upbitPrice: 0.0,\n          bithumbPrice: 0.0,\n          binanPrice: 0.0\n        }]\n      }\n    }\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  //console.log(state);\n  switch (action.type) {\n    case GET_MARKET_NAMES_SUCCESS:\n    case GET_MARKET_NAMES_ERROR:\n      //console.log(\"13\");\n      //console.log(coinListDataUtils.marketNames);\n      return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n    //return state;\n\n    case START_INIT:\n      //console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, getMarketNameSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","coinApi","createRequestSaga","requestActions","coinListDataUtils","START_INIT","START_INIT_ASYNC","GET_MARKET_NAMES","GET_MARKET_NAMES_SUCCESS","GET_MARKET_NAMES_ERROR","startInitAsync","type","startInit","getMarketNameSaga","getMarketCodes","marketNames","startInitSaga","state","Object","keys","Coin","data","coinSaga","initialState","error","totalPrice","upbitUSDT","upbitBTC","upbitSym","bithumbSym","binanSym","upbitPrice","upbitBTCPrice","bithumbPrice","binanPrice","coinReducer","action"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,KAA9C,QAA2D,oBAA3D;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,kBAAlD;AACA,SAASC,iBAAT,QAAkC,cAAlC;AAMA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,wBAAwB,GAAG,0BAAjC;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;;AAIA,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEL;AAAR,CAAP,CAAvB;;AACA,MAAMM,SAAS,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEN;AAAR,CAAP,CAAlB;;AAGA,MAAMQ,iBAAiB,GAAGX,iBAAiB,CACvCK,gBADuC,EAEvCN,OAAO,CAACa,cAF+B,EAGvCV,iBAAiB,CAACW,WAHqB,CAA3C;;AAOA,UAAUC,aAAV,GAA0B;AACtB,QAAMH,iBAAiB,EAAvB;AAEA,QAAMI,KAAK,GAAG,MAAMnB,MAAM,EAA1B;AACA,QAAMiB,WAAW,GAAGG,MAAM,CAACC,IAAP,CAAYF,KAAK,CAACG,IAAN,CAAWL,WAAX,CAAuBM,IAAnC,CAApB,CAJsB,CAKtB;AACH;;AACD,UAAUC,QAAV,GAAqB;AACjB,QAAM3B,SAAS,CAACU,UAAD,EAAaW,aAAb,CAAf;AAEH;;AAED,MAAMO,YAAY,GAAG;AACjBR,EAAAA,WAAW,EAAE;AACTS,IAAAA,KAAK,EAAE,KADE;AAETH,IAAAA,IAAI,EAAE;AACF,aAAO;AACHI,QAAAA,UAAU,EAAE,CACR;AAAEC,UAAAA,SAAS,EAAE,EAAb;AAAiBC,UAAAA,QAAQ,EAAE,EAA3B;AAA+BC,UAAAA,QAAQ,EAAE,EAAzC;AAA6CC,UAAAA,UAAU,EAAE,EAAzD;AAA6DC,UAAAA,QAAQ,EAAE,EAAvE;AAA2EC,UAAAA,UAAU,EAAE,GAAvF;AAA4FC,UAAAA,aAAa,EAAE,GAA3G;AAAgHD,UAAAA,UAAU,EAAE,GAA5H;AAAiIE,UAAAA,YAAY,EAAE,GAA/I;AAAoJC,UAAAA,UAAU,EAAE;AAAhK,SADQ;AADT;AADL;AAFG;AADI,CAArB;;AAaA,MAAMC,WAAW,GAAG,CAAClB,KAAK,GAAGM,YAAT,EAAuBa,MAAvB,KAAkC;AAClD;AACA,UAAQA,MAAM,CAACzB,IAAf;AACI,SAAKH,wBAAL;AACA,SAAKC,sBAAL;AACI;AACA;AACA,aAAON,cAAc,CAACI,gBAAD,EAAmB,aAAnB,CAAd,CAAgDU,KAAhD,EAAuDmB,MAAvD,CAAP;AACJ;;AACA,SAAK/B,UAAL;AACI;AACA,aAAOY,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AAXR;AAaH,CAfD;;AAgBA,SACIkB,WADJ,EAEIb,QAFJ,EAGIV,SAHJ,EAIIC,iBAJJ,EAKIH,cALJ","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { createRequestSaga, requestActions } from '../Lib/asyncUtil';\nimport { coinListDataUtils } from '../Lib/utils';\n\n\n\n\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"GET_MARKET_NAMES_ERROR\";\n\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getMarketNameSaga = createRequestSaga(\n    GET_MARKET_NAMES,\n    coinApi.getMarketCodes,\n    coinListDataUtils.marketNames\n);\n\n\nfunction* startInitSaga() {\n    yield getMarketNameSaga();\n\n    const state = yield select();\n    const marketNames = Object.keys(state.Coin.marketNames.data);\n    //console.log(marketNames);\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n\n}\n\nconst initialState = {\n    marketNames: {\n        error: false,\n        data: {\n            \"BTC\": {\n                totalPrice: [\n                    { upbitUSDT: \"\", upbitBTC: \"\", upbitSym: \"\", bithumbSym: \"\", binanSym: \"\", upbitPrice: 0.0, upbitBTCPrice: 0.0, upbitPrice: 0.0, bithumbPrice: 0.0, binanPrice: 0.0 }\n                ],\n            },\n        },\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    //console.log(state);\n    switch (action.type) {\n        case GET_MARKET_NAMES_SUCCESS:\n        case GET_MARKET_NAMES_ERROR:\n            //console.log(\"13\");\n            //console.log(coinListDataUtils.marketNames);\n            return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n        //return state;\n        case START_INIT:\n            //console.log(12);\n            return state + 1;\n        default:\n            return state;\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    getMarketNameSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}