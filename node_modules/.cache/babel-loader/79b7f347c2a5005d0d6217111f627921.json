{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { coinListDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst getMarketNameSaga = createRequestSaga(GET_MARKET_NAMES, coinApi.getMarketCodes, coinListDataUtils.marketNames);\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst createRequestSaga = (type, api, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function* (action = {}) {\n    yield put(type);\n\n    try {\n      const res = yield call(api, action.payload);\n      const state = yield select();\n      console.log(res);\n      yield put({\n        type: SUCCESS,\n        payload: dataMaker(res.data, state)\n      }); // yield put(finishLoading(type));\n    } catch (e) {\n      yield put({\n        type: ERROR,\n        payload: e\n      }); // yield put(finishLoading(type));\n\n      throw e;\n    }\n  };\n};\n/*\nconst createRequestSaga = (type, api) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        // yield put(startLoading(type));\n        const res = yield call(api, action.payload);\n        console.log(res);\n        // yield put(finishLoading(type));\n    }\n};\n*/\n\n\nfunction* startInitSaga() {\n  yield delay(2000);\n  yield put(getMarketNameSaga());\n}\n\nfunction* coinSaga() {//yield takeEvery(START_INIT, startInitSaga);\n}\n\nconst initialState = {\n  selectedMarket: \"KRW-BTC\",\n  selectedTimeType: \"minutes\",\n  selectedTimeCount: 5,\n  selectedAskBidOrder: \"bid\",\n  orderPrice: 0,\n  orderAmount: 0,\n  orderTotalPrice: 0,\n  searchCoin: \"\",\n  marketNames: {\n    error: false,\n    data: {\n      \"KRW-BTC\": \"비트코인\"\n    }\n  },\n  candle: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        candles: [// { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n        ],\n        tradePrice24Hour: 0,\n        volume24Hour: 0,\n        changeRate24Hour: 0\n      }\n    }\n  },\n  orderbook: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        total_bid_size: 0,\n        total_ask_size: 0,\n        orderbook_units: []\n      }\n    }\n  },\n  tradeList: {\n    error: false,\n    data: {}\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MARKET_NAMES:\n      console.log(11);\n      return;\n\n    case START_INIT:\n      console.log(12);\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, getMarketNameSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","coinApi","coinListDataUtils","START_INIT","START_INIT_ASYNC","GET_MARKET_NAMES","startInitAsync","type","getMarketNameSaga","createRequestSaga","getMarketCodes","marketNames","startInit","api","dataMaker","SUCCESS","ERROR","action","res","payload","state","console","log","data","e","startInitSaga","coinSaga","initialState","selectedMarket","selectedTimeType","selectedTimeCount","selectedAskBidOrder","orderPrice","orderAmount","orderTotalPrice","searchCoin","error","candle","candles","tradePrice24Hour","volume24Hour","changeRate24Hour","orderbook","total_bid_size","total_ask_size","orderbook_units","tradeList","coinReducer"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { coinApi } from \"../Api/api\";\nimport { coinListDataUtils } from '../Lib/utils';\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_MARKET_NAMES = \"GET_MARKET_NAMES\";\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst getMarketNameSaga = createRequestSaga(\n    GET_MARKET_NAMES,\n    coinApi.getMarketCodes,\n    coinListDataUtils.marketNames\n);\nconst startInit = () => ({ type: START_INIT });\n\n\nconst createRequestSaga = (type, api, dataMaker) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        yield put(type);\n        try {\n            const res = yield call(api, action.payload);\n            const state = yield select();\n            console.log(res);\n            yield put({ type: SUCCESS, payload: dataMaker(res.data, state) });\n            // yield put(finishLoading(type));\n        } catch (e) {\n            yield put({ type: ERROR, payload: e });\n            // yield put(finishLoading(type));\n            throw e;\n        }\n    };\n};\n\n\n/*\nconst createRequestSaga = (type, api) => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const ERROR = `${type}_ERROR`;\n\n    return function* (action = {}) {\n        // yield put(startLoading(type));\n        const res = yield call(api, action.payload);\n        console.log(res);\n        // yield put(finishLoading(type));\n    }\n};\n*/\nfunction* startInitSaga() {\n    yield delay(2000);\n    yield put(getMarketNameSaga());\n}\nfunction* coinSaga() {\n    //yield takeEvery(START_INIT, startInitSaga);\n}\n\n\nconst initialState = {\n    selectedMarket: \"KRW-BTC\",\n    selectedTimeType: \"minutes\",\n    selectedTimeCount: 5,\n    selectedAskBidOrder: \"bid\",\n    orderPrice: 0,\n    orderAmount: 0,\n    orderTotalPrice: 0,\n    searchCoin: \"\",\n    marketNames: {\n        error: false,\n        data: {\n            \"KRW-BTC\": \"비트코인\",\n        },\n    },\n    candle: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                candles: [\n                    // { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n                ],\n                tradePrice24Hour: 0,\n                volume24Hour: 0,\n                changeRate24Hour: 0,\n            },\n        },\n    },\n    orderbook: {\n        error: false,\n        data: {\n            \"KRW-BTC\": {\n                total_bid_size: 0,\n                total_ask_size: 0,\n                orderbook_units: [],\n            },\n        },\n    },\n    tradeList: {\n        error: false,\n        data: {},\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_MARKET_NAMES:\n            console.log(11);\n            return;\n        case START_INIT:\n            console.log(12);\n            return state + 1;\n        default:\n            return state;\n\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    getMarketNameSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}