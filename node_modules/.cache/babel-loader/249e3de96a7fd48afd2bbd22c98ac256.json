{"ast":null,"code":"import React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga, connectBithumbSocketThunk, bitcreateConnectSocketSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\nconst GET_BITHUMB_MARKET_KRW_NAMES = \"GET_BITHUMB_MARKET_KRW_NAMES\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_ERROR = \"GET_BITHUMB_MARKET_KRW_NAMES_ERROR\";\nconst GET_BITHUMB_MARKET_BTC_NAMES = \"GET_BITHUMB_MARKET_BTC_NAMES\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_ERROR = \"GET_BITHUMB_MARKET_BTC_NAMES_ERROR\";\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\nconst CONNECT_BITHUMB_SOCKET = \"CONNECT_BITHUMB_SOCKET\";\nconst CONNECT_BITHUMB_SOCKET_SUCCESS = \"CONNECT_BITHUMB_SOCKET_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_ERROR = \"CONNECT_BITHUMB_SOCKET_ERROR\";\nconst CREATE_UPBIT_INIT = \"CREATE_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CREATE_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CREATE_UPBIT_INIT_ERROR\";\nconst CREATE_BITHUMB_INIT = \"CREATE_BITHUMB_INIT\";\nconst CREATE_BITHUMB_INIT_SUCCESS = \"CREATE_BITHUMB_INIT_SUCCESS\";\nconst CREATE_BITHUMB_INIT_ERROR = \"CREATE_BITHUMB_INIT_ERROR\";\nconst CONNECT_BITHUMB_SOCKET_THUNK = \"CONNECT_BITHUMB_SOCKET_THUNK\";\nconst CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS = \"CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_THUNK_ERROR = \"CONNECT_BITHUMB_SOCKET_THUNK_ERROR\";\n\nconst startInitAsync = () => ({\n  type: START_INIT_ASYNC\n});\n\nconst startInit = () => ({\n  type: START_INIT\n});\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(GET_UPBIT_MARKET_NAMES, upbitoinApi.getMarketCodes, coinListDataUtils.upbitAllNames);\nconst getBithumbKRWMarketNameSaga = createRequestSaga(GET_BITHUMB_MARKET_KRW_NAMES, bithumbcoinApi.getKRWMarketCodes, coinListDataUtils.bithumbKRWNames);\nconst getBithumbBTCMarketNameSaga = createRequestSaga(GET_BITHUMB_MARKET_BTC_NAMES, bithumbcoinApi.getBTCMarketCodes, coinListDataUtils.bithumbBTCNames); //✅ 업비트 소켓 연결\n\nconst connectUpbitSocketSaga = createConnectSocketSaga(CONNECT_UPBIT_SOCKET, \"ticker\", coinReadDataUtils.upbitUpdates); //✅ 빗썸 소켓 연결\n\nconst connectBithumbSocketSaga = bitcreateConnectSocketSaga(CONNECT_BITHUMB_SOCKET, \"ticker\", coinReadDataUtils.bithumbUpdates);\nconst createUpbitInitSocketSaga = createInitRequestSaga(CREATE_UPBIT_INIT, coinReadDataUtils.upbitInitNames);\nconst createBithumbInitSocketSaga = createInitRequestSaga(CREATE_BITHUMB_INIT, coinReadDataUtils.bithumbInitNames);\nconst createconnectBithumbSocketThunk = connectBithumbSocketThunk(CONNECT_BITHUMB_SOCKET_THUNK, \"ticker\", coinReadDataUtils.bithumbUpdates);\n\nfunction* startInitSaga() {\n  yield getUpbitAllMarketNameSaga();\n  yield getBithumbKRWMarketNameSaga();\n  yield getBithumbBTCMarketNameSaga();\n  const state = yield select();\n  const upbitmarketNames = Object.keys(state.Coin.upbitTotalNames.data);\n  yield createUpbitInitSocketSaga({\n    payload: upbitmarketNames\n  });\n  const bithumbmarketNames = Object.keys(state.Coin.bithumbTotalNames.data);\n  yield createBithumbInitSocketSaga({\n    payload: bithumbmarketNames\n  });\n  const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n  yield connectUpbitSocketSaga({\n    payload: marketNames\n  }); //yield connectBithumbSocketSaga({ payload: bithumbmarketNames });\n  //yield createconnectBithumbSocketThunk({ payload: bithumbmarketNames });\n}\n\nfunction* coinSaga() {\n  yield takeEvery(START_INIT, startInitSaga);\n  yield takeEvery(CONNECT_UPBIT_SOCKET, connectUpbitSocketSaga); //yield takeEvery(CONNECT_BITHUMB_SOCKET, connectBithumbSocketSaga);\n}\n\nconst initialState = {\n  upbitTotalNames: {\n    data: {\n      \"KRW-BTC\": \"\"\n    }\n  },\n  bithumbTotalNames: {\n    data: {\n      \"BTC_KRW\": \"\"\n    }\n  },\n  marketNames: {\n    error: false,\n    data: {\n      \"BTC\": {\n        imgsrc: \"\",\n        upbitSym: \"\",\n        upbitUSDT: \"\",\n        upbitBTC: \"\",\n        bithumbSym: \"\",\n        bithumbBTC: \"\",\n        upbitPrice: 0.0,\n        upbitBTCPrice: 0.0,\n        upbitUSDTPrice: 0.0,\n        bithumbPrice: 0.0,\n        bithumbBTCPrice: 0.0,\n        binanSym: \"\",\n        binanPrice: 0.0\n      }\n    }\n  }\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_UPBIT_MARKET_NAMES_SUCCESS:\n    case GET_UPBIT_MARKET_NAMES_ERROR:\n      return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n    case GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS:\n    case GET_BITHUMB_MARKET_KRW_NAMES_ERROR:\n      return requestActions(GET_BITHUMB_MARKET_KRW_NAMES, \"bithumbTotalNames\")(state, action);\n\n    case GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS:\n    case GET_BITHUMB_MARKET_BTC_NAMES_ERROR:\n      return requestActions(GET_BITHUMB_MARKET_BTC_NAMES, \"bithumbTotalNames\")(state, action);\n\n    case CREATE_UPBIT_INIT_SUCCESS:\n    case CREATE_UPBIT_INIT_ERROR:\n      return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n    case CREATE_BITHUMB_INIT_SUCCESS:\n    case CREATE_BITHUMB_INIT_ERROR:\n      return requestActions(CREATE_BITHUMB_INIT, \"marketNames\")(state, action);\n\n    case CONNECT_UPBIT_SOCKET_SUCCESS:\n    case CONNECT_UPBIT_SOCKET_ERROR:\n      return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n    /*\n    \n            case CONNECT_BITHUMB_SOCKET_SUCCESS:\n            case CONNECT_BITHUMB_SOCKET_ERROR:\n                return requestActions(CONNECT_BITHUMB_SOCKET, \"marketNames\")(state, action);\n    \n            case CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS:\n            case CONNECT_BITHUMB_SOCKET_THUNK_ERROR:\n                return requestActions(CONNECT_BITHUMB_SOCKET_THUNK, \"marketNames\")(state, action);\n    */\n\n    case START_INIT:\n      //console.log(12);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport { coinReducer, coinSaga, startInit, connectUpbitSocketSaga, startInitAsync };","map":{"version":3,"sources":["/Users/sinhyeonsu/Documents/coingetprice2/src/Reducer/coinReducer.js"],"names":["React","takeEvery","call","put","select","flush","delay","upbitoinApi","bithumbcoinApi","createConnectSocketSaga","createRequestSaga","requestActions","createInitRequestSaga","connectBithumbSocketThunk","bitcreateConnectSocketSaga","coinListDataUtils","coinReadDataUtils","START_INIT","START_INIT_ASYNC","GET_UPBIT_MARKET_NAMES","GET_UPBIT_MARKET_NAMES_SUCCESS","GET_UPBIT_MARKET_NAMES_ERROR","GET_BITHUMB_MARKET_KRW_NAMES","GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS","GET_BITHUMB_MARKET_KRW_NAMES_ERROR","GET_BITHUMB_MARKET_BTC_NAMES","GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS","GET_BITHUMB_MARKET_BTC_NAMES_ERROR","CONNECT_UPBIT_SOCKET","CONNECT_UPBIT_SOCKET_SUCCESS","CONNECT_UPBIT_SOCKET_ERROR","CONNECT_BITHUMB_SOCKET","CONNECT_BITHUMB_SOCKET_SUCCESS","CONNECT_BITHUMB_SOCKET_ERROR","CREATE_UPBIT_INIT","CREATE_UPBIT_INIT_SUCCESS","CREATE_UPBIT_INIT_ERROR","CREATE_BITHUMB_INIT","CREATE_BITHUMB_INIT_SUCCESS","CREATE_BITHUMB_INIT_ERROR","CONNECT_BITHUMB_SOCKET_THUNK","CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS","CONNECT_BITHUMB_SOCKET_THUNK_ERROR","startInitAsync","type","startInit","getUpbitAllMarketNameSaga","getMarketCodes","upbitAllNames","getBithumbKRWMarketNameSaga","getKRWMarketCodes","bithumbKRWNames","getBithumbBTCMarketNameSaga","getBTCMarketCodes","bithumbBTCNames","connectUpbitSocketSaga","upbitUpdates","connectBithumbSocketSaga","bithumbUpdates","createUpbitInitSocketSaga","upbitInitNames","createBithumbInitSocketSaga","bithumbInitNames","createconnectBithumbSocketThunk","startInitSaga","state","upbitmarketNames","Object","keys","Coin","upbitTotalNames","data","payload","bithumbmarketNames","bithumbTotalNames","marketNames","coinSaga","initialState","error","imgsrc","upbitSym","upbitUSDT","upbitBTC","bithumbSym","bithumbBTC","upbitPrice","upbitBTCPrice","upbitUSDTPrice","bithumbPrice","bithumbBTCPrice","binanSym","binanPrice","coinReducer","action"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,KAA9C,QAA2D,oBAA3D;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,YAA5C;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,EAAqDC,cAArD,EAAqEC,qBAArE,EAA4FC,yBAA5F,EAAuHC,0BAAvH,QAAyJ,kBAAzJ;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,cAArD;AAEA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,8BAA8B,GAAG,gCAAvC;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AAEA,MAAMC,4BAA4B,GAAG,8BAArC;AACA,MAAMC,oCAAoC,GAAG,sCAA7C;AACA,MAAMC,kCAAkC,GAAG,oCAA3C;AAEA,MAAMC,4BAA4B,GAAG,8BAArC;AACA,MAAMC,oCAAoC,GAAG,sCAA7C;AACA,MAAMC,kCAAkC,GAAG,oCAA3C;AAEA,MAAMC,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AACA,MAAMC,0BAA0B,GAAG,4BAAnC;AAEA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,8BAA8B,GAAG,gCAAvC;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,yBAAyB,GAAG,2BAAlC;AACA,MAAMC,uBAAuB,GAAG,yBAAhC;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,2BAA2B,GAAG,6BAApC;AACA,MAAMC,yBAAyB,GAAG,2BAAlC;AAEA,MAAMC,4BAA4B,GAAG,8BAArC;AACA,MAAMC,oCAAoC,GAAG,sCAA7C;AACA,MAAMC,kCAAkC,GAAG,oCAA3C;;AAGA,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAE1B;AAAR,CAAP,CAAvB;;AACA,MAAM2B,SAAS,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAE3B;AAAR,CAAP,CAAlB;;AAGA,MAAM6B,yBAAyB,GAAGpC,iBAAiB,CAC/CS,sBAD+C,EAE/CZ,WAAW,CAACwC,cAFmC,EAG/ChC,iBAAiB,CAACiC,aAH6B,CAAnD;AAKA,MAAMC,2BAA2B,GAAGvC,iBAAiB,CACjDY,4BADiD,EAEjDd,cAAc,CAAC0C,iBAFkC,EAGjDnC,iBAAiB,CAACoC,eAH+B,CAArD;AAKA,MAAMC,2BAA2B,GAAG1C,iBAAiB,CACjDe,4BADiD,EAEjDjB,cAAc,CAAC6C,iBAFkC,EAGjDtC,iBAAiB,CAACuC,eAH+B,CAArD,C,CAQA;;AACA,MAAMC,sBAAsB,GAAG9C,uBAAuB,CAClDmB,oBADkD,EAElD,QAFkD,EAGlDZ,iBAAiB,CAACwC,YAHgC,CAAtD,C,CAKA;;AACA,MAAMC,wBAAwB,GAAG3C,0BAA0B,CACvDiB,sBADuD,EAEvD,QAFuD,EAGvDf,iBAAiB,CAAC0C,cAHqC,CAA3D;AAMA,MAAMC,yBAAyB,GAAG/C,qBAAqB,CACnDsB,iBADmD,EAEnDlB,iBAAiB,CAAC4C,cAFiC,CAAvD;AAKA,MAAMC,2BAA2B,GAAGjD,qBAAqB,CACrDyB,mBADqD,EAErDrB,iBAAiB,CAAC8C,gBAFmC,CAAzD;AAKA,MAAMC,+BAA+B,GAAGlD,yBAAyB,CAC7D2B,4BAD6D,EAE7D,QAF6D,EAG7DxB,iBAAiB,CAAC0C,cAH2C,CAAjE;;AAOA,UAAUM,aAAV,GAA0B;AACtB,QAAMlB,yBAAyB,EAA/B;AACA,QAAMG,2BAA2B,EAAjC;AACA,QAAMG,2BAA2B,EAAjC;AACA,QAAMa,KAAK,GAAG,MAAM7D,MAAM,EAA1B;AACA,QAAM8D,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,IAAN,CAAWC,eAAX,CAA2BC,IAAvC,CAAzB;AACA,QAAMZ,yBAAyB,CAAC;AAAEa,IAAAA,OAAO,EAAEN;AAAX,GAAD,CAA/B;AAEA,QAAMO,kBAAkB,GAAGN,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,IAAN,CAAWK,iBAAX,CAA6BH,IAAzC,CAA3B;AACA,QAAMV,2BAA2B,CAAC;AAAEW,IAAAA,OAAO,EAAEC;AAAX,GAAD,CAAjC;AAGA,QAAME,WAAW,GAAGR,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,IAAN,CAAWC,eAAX,CAA2BC,IAAvC,CAApB;AAEA,QAAMhB,sBAAsB,CAAC;AAAEiB,IAAAA,OAAO,EAAEG;AAAX,GAAD,CAA5B,CAdsB,CAetB;AAEA;AACH;;AACD,UAAUC,QAAV,GAAqB;AACjB,QAAM3E,SAAS,CAACgB,UAAD,EAAa+C,aAAb,CAAf;AACA,QAAM/D,SAAS,CAAC2B,oBAAD,EAAuB2B,sBAAvB,CAAf,CAFiB,CAKjB;AACH;;AAED,MAAMsB,YAAY,GAAG;AACjBP,EAAAA,eAAe,EAAE;AACbC,IAAAA,IAAI,EAAE;AACF,iBAAW;AADT;AADO,GADA;AAMjBG,EAAAA,iBAAiB,EAAE;AACfH,IAAAA,IAAI,EAAE;AACF,iBAAW;AADT;AADS,GANF;AAWjBI,EAAAA,WAAW,EAAE;AACTG,IAAAA,KAAK,EAAE,KADE;AAETP,IAAAA,IAAI,EAAE;AACF,aAAO;AACHQ,QAAAA,MAAM,EAAE,EADL;AAEHC,QAAAA,QAAQ,EAAE,EAFP;AAEWC,QAAAA,SAAS,EAAE,EAFtB;AAE0BC,QAAAA,QAAQ,EAAE,EAFpC;AAGHC,QAAAA,UAAU,EAAE,EAHT;AAGaC,QAAAA,UAAU,EAAE,EAHzB;AAIHC,QAAAA,UAAU,EAAE,GAJT;AAIcC,QAAAA,aAAa,EAAE,GAJ7B;AAIkCC,QAAAA,cAAc,EAAE,GAJlD;AAKHC,QAAAA,YAAY,EAAE,GALX;AAKgBC,QAAAA,eAAe,EAAE,GALjC;AAMHC,QAAAA,QAAQ,EAAE,EANP;AAMWC,QAAAA,UAAU,EAAE;AANvB;AADL;AAFG;AAXI,CAArB;;AA0BA,MAAMC,WAAW,GAAG,CAAC3B,KAAK,GAAGY,YAAT,EAAuBgB,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACjD,IAAf;AAEI,SAAKxB,8BAAL;AACA,SAAKC,4BAAL;AACI,aAAOV,cAAc,CAACQ,sBAAD,EAAyB,iBAAzB,CAAd,CAA0D8C,KAA1D,EAAiE4B,MAAjE,CAAP;;AAEJ,SAAKtE,oCAAL;AACA,SAAKC,kCAAL;AACI,aAAOb,cAAc,CAACW,4BAAD,EAA+B,mBAA/B,CAAd,CAAkE2C,KAAlE,EAAyE4B,MAAzE,CAAP;;AAEJ,SAAKnE,oCAAL;AACA,SAAKC,kCAAL;AACI,aAAOhB,cAAc,CAACc,4BAAD,EAA+B,mBAA/B,CAAd,CAAkEwC,KAAlE,EAAyE4B,MAAzE,CAAP;;AAEJ,SAAK1D,yBAAL;AACA,SAAKC,uBAAL;AACI,aAAOzB,cAAc,CAACuB,iBAAD,EAAoB,aAApB,CAAd,CAAiD+B,KAAjD,EAAwD4B,MAAxD,CAAP;;AAEJ,SAAKvD,2BAAL;AACA,SAAKC,yBAAL;AACI,aAAO5B,cAAc,CAAC0B,mBAAD,EAAsB,aAAtB,CAAd,CAAmD4B,KAAnD,EAA0D4B,MAA1D,CAAP;;AAEJ,SAAKhE,4BAAL;AACA,SAAKC,0BAAL;AACI,aAAOnB,cAAc,CAACiB,oBAAD,EAAuB,aAAvB,CAAd,CAAoDqC,KAApD,EAA2D4B,MAA3D,CAAP;;AAEJ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGQ,SAAK5E,UAAL;AACI;AACA,aAAOgD,KAAP;;AACJ;AACI,aAAOA,KAAP;AA1CR;AA4CH,CA7CD;;AA8CA,SACI2B,WADJ,EAEIhB,QAFJ,EAGI/B,SAHJ,EAIIU,sBAJJ,EAKIZ,cALJ","sourcesContent":["\nimport React from 'react';\nimport { takeEvery, call, put, select, flush, delay } from \"redux-saga/effects\";\nimport { upbitoinApi, bithumbcoinApi } from \"../Api/api\";\nimport { createConnectSocketSaga, createRequestSaga, requestActions, createInitRequestSaga, connectBithumbSocketThunk, bitcreateConnectSocketSaga } from '../Lib/asyncUtil';\nimport { coinListDataUtils, coinReadDataUtils } from '../Lib/utils';\n\nconst START_INIT = \"START_INIT\";\nconst START_INIT_ASYNC = \"START_INIT_ASYNC\";\n\nconst GET_UPBIT_MARKET_NAMES = \"GET_UPBIT_MARKET_NAMES\";\nconst GET_UPBIT_MARKET_NAMES_SUCCESS = \"GET_UPBIT_MARKET_NAMES_SUCCESS\";\nconst GET_UPBIT_MARKET_NAMES_ERROR = \"GET_UPBIT_MARKET_NAMES_ERROR\";\n\nconst GET_BITHUMB_MARKET_KRW_NAMES = \"GET_BITHUMB_MARKET_KRW_NAMES\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_KRW_NAMES_ERROR = \"GET_BITHUMB_MARKET_KRW_NAMES_ERROR\";\n\nconst GET_BITHUMB_MARKET_BTC_NAMES = \"GET_BITHUMB_MARKET_BTC_NAMES\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS = \"GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS\";\nconst GET_BITHUMB_MARKET_BTC_NAMES_ERROR = \"GET_BITHUMB_MARKET_BTC_NAMES_ERROR\";\n\nconst CONNECT_UPBIT_SOCKET = \"CONNECT_UPBIT_SOCKET\";\nconst CONNECT_UPBIT_SOCKET_SUCCESS = \"CONNECT_UPBIT_SOCKET_SUCCESS\";\nconst CONNECT_UPBIT_SOCKET_ERROR = \"CONNECT_UPBIT_SOCKET_ERROR\";\n\nconst CONNECT_BITHUMB_SOCKET = \"CONNECT_BITHUMB_SOCKET\";\nconst CONNECT_BITHUMB_SOCKET_SUCCESS = \"CONNECT_BITHUMB_SOCKET_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_ERROR = \"CONNECT_BITHUMB_SOCKET_ERROR\";\n\nconst CREATE_UPBIT_INIT = \"CREATE_UPBIT_INIT\";\nconst CREATE_UPBIT_INIT_SUCCESS = \"CREATE_UPBIT_INIT_SUCCESS\";\nconst CREATE_UPBIT_INIT_ERROR = \"CREATE_UPBIT_INIT_ERROR\";\n\nconst CREATE_BITHUMB_INIT = \"CREATE_BITHUMB_INIT\";\nconst CREATE_BITHUMB_INIT_SUCCESS = \"CREATE_BITHUMB_INIT_SUCCESS\";\nconst CREATE_BITHUMB_INIT_ERROR = \"CREATE_BITHUMB_INIT_ERROR\";\n\nconst CONNECT_BITHUMB_SOCKET_THUNK = \"CONNECT_BITHUMB_SOCKET_THUNK\";\nconst CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS = \"CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS\";\nconst CONNECT_BITHUMB_SOCKET_THUNK_ERROR = \"CONNECT_BITHUMB_SOCKET_THUNK_ERROR\";\n\n\nconst startInitAsync = () => ({ type: START_INIT_ASYNC });\nconst startInit = () => ({ type: START_INIT });\n\n\nconst getUpbitAllMarketNameSaga = createRequestSaga(\n    GET_UPBIT_MARKET_NAMES,\n    upbitoinApi.getMarketCodes,\n    coinListDataUtils.upbitAllNames\n);\nconst getBithumbKRWMarketNameSaga = createRequestSaga(\n    GET_BITHUMB_MARKET_KRW_NAMES,\n    bithumbcoinApi.getKRWMarketCodes,\n    coinListDataUtils.bithumbKRWNames\n);\nconst getBithumbBTCMarketNameSaga = createRequestSaga(\n    GET_BITHUMB_MARKET_BTC_NAMES,\n    bithumbcoinApi.getBTCMarketCodes,\n    coinListDataUtils.bithumbBTCNames\n);\n\n\n\n//✅ 업비트 소켓 연결\nconst connectUpbitSocketSaga = createConnectSocketSaga(\n    CONNECT_UPBIT_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.upbitUpdates\n);\n//✅ 빗썸 소켓 연결\nconst connectBithumbSocketSaga = bitcreateConnectSocketSaga(\n    CONNECT_BITHUMB_SOCKET,\n    \"ticker\",\n    coinReadDataUtils.bithumbUpdates\n);\n\nconst createUpbitInitSocketSaga = createInitRequestSaga(\n    CREATE_UPBIT_INIT,\n    coinReadDataUtils.upbitInitNames\n);\n\nconst createBithumbInitSocketSaga = createInitRequestSaga(\n    CREATE_BITHUMB_INIT,\n    coinReadDataUtils.bithumbInitNames\n);\n\nconst createconnectBithumbSocketThunk = connectBithumbSocketThunk(\n    CONNECT_BITHUMB_SOCKET_THUNK,\n    \"ticker\",\n    coinReadDataUtils.bithumbUpdates\n);\n\n\nfunction* startInitSaga() {\n    yield getUpbitAllMarketNameSaga();\n    yield getBithumbKRWMarketNameSaga();\n    yield getBithumbBTCMarketNameSaga();\n    const state = yield select();\n    const upbitmarketNames = Object.keys(state.Coin.upbitTotalNames.data);\n    yield createUpbitInitSocketSaga({ payload: upbitmarketNames });\n\n    const bithumbmarketNames = Object.keys(state.Coin.bithumbTotalNames.data);\n    yield createBithumbInitSocketSaga({ payload: bithumbmarketNames });\n\n\n    const marketNames = Object.keys(state.Coin.upbitTotalNames.data);\n\n    yield connectUpbitSocketSaga({ payload: marketNames });\n    //yield connectBithumbSocketSaga({ payload: bithumbmarketNames });\n\n    //yield createconnectBithumbSocketThunk({ payload: bithumbmarketNames });\n}\nfunction* coinSaga() {\n    yield takeEvery(START_INIT, startInitSaga);\n    yield takeEvery(CONNECT_UPBIT_SOCKET, connectUpbitSocketSaga);\n\n\n    //yield takeEvery(CONNECT_BITHUMB_SOCKET, connectBithumbSocketSaga);\n}\n\nconst initialState = {\n    upbitTotalNames: {\n        data: {\n            \"KRW-BTC\": \"\"\n        },\n    },\n    bithumbTotalNames: {\n        data: {\n            \"BTC_KRW\": \"\"\n        },\n    },\n    marketNames: {\n        error: false,\n        data: {\n            \"BTC\": {\n                imgsrc: \"\",\n                upbitSym: \"\", upbitUSDT: \"\", upbitBTC: \"\",\n                bithumbSym: \"\", bithumbBTC: \"\",\n                upbitPrice: 0.0, upbitBTCPrice: 0.0, upbitUSDTPrice: 0.0,\n                bithumbPrice: 0.0, bithumbBTCPrice: 0.0,\n                binanSym: \"\", binanPrice: 0.0\n            },\n        },\n    },\n};\n\nconst coinReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case GET_UPBIT_MARKET_NAMES_SUCCESS:\n        case GET_UPBIT_MARKET_NAMES_ERROR:\n            return requestActions(GET_UPBIT_MARKET_NAMES, \"upbitTotalNames\")(state, action);\n\n        case GET_BITHUMB_MARKET_KRW_NAMES_SUCCESS:\n        case GET_BITHUMB_MARKET_KRW_NAMES_ERROR:\n            return requestActions(GET_BITHUMB_MARKET_KRW_NAMES, \"bithumbTotalNames\")(state, action);\n\n        case GET_BITHUMB_MARKET_BTC_NAMES_SUCCESS:\n        case GET_BITHUMB_MARKET_BTC_NAMES_ERROR:\n            return requestActions(GET_BITHUMB_MARKET_BTC_NAMES, \"bithumbTotalNames\")(state, action);\n\n        case CREATE_UPBIT_INIT_SUCCESS:\n        case CREATE_UPBIT_INIT_ERROR:\n            return requestActions(CREATE_UPBIT_INIT, \"marketNames\")(state, action);\n\n        case CREATE_BITHUMB_INIT_SUCCESS:\n        case CREATE_BITHUMB_INIT_ERROR:\n            return requestActions(CREATE_BITHUMB_INIT, \"marketNames\")(state, action);\n\n        case CONNECT_UPBIT_SOCKET_SUCCESS:\n        case CONNECT_UPBIT_SOCKET_ERROR:\n            return requestActions(CONNECT_UPBIT_SOCKET, \"marketNames\")(state, action);\n\n        /*\n        \n                case CONNECT_BITHUMB_SOCKET_SUCCESS:\n                case CONNECT_BITHUMB_SOCKET_ERROR:\n                    return requestActions(CONNECT_BITHUMB_SOCKET, \"marketNames\")(state, action);\n        \n                case CONNECT_BITHUMB_SOCKET_THUNK_SUCCESS:\n                case CONNECT_BITHUMB_SOCKET_THUNK_ERROR:\n                    return requestActions(CONNECT_BITHUMB_SOCKET_THUNK, \"marketNames\")(state, action);\n        */\n\n\n        case START_INIT:\n            //console.log(12);\n            return state;\n        default:\n            return state;\n    }\n}\nexport {\n    coinReducer,\n    coinSaga,\n    startInit,\n    connectUpbitSocketSaga,\n    startInitAsync\n}"]},"metadata":{},"sourceType":"module"}